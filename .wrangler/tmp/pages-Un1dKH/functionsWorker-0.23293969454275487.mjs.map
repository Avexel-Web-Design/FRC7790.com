{
  "version": 3,
  "sources": ["../bundle-XoVhQD/checked-fetch.js", "../../../node_modules/hono/dist/compose.js", "../../../node_modules/hono/dist/request/constants.js", "../../../node_modules/hono/dist/utils/body.js", "../../../node_modules/hono/dist/utils/url.js", "../../../node_modules/hono/dist/request.js", "../../../node_modules/hono/dist/utils/html.js", "../../../node_modules/hono/dist/context.js", "../../../node_modules/hono/dist/router.js", "../../../node_modules/hono/dist/utils/constants.js", "../../../node_modules/hono/dist/hono-base.js", "../../../node_modules/hono/dist/router/reg-exp-router/node.js", "../../../node_modules/hono/dist/router/reg-exp-router/trie.js", "../../../node_modules/hono/dist/router/reg-exp-router/router.js", "../../../node_modules/hono/dist/router/smart-router/router.js", "../../../node_modules/hono/dist/router/trie-router/node.js", "../../../node_modules/hono/dist/router/trie-router/router.js", "../../../node_modules/hono/dist/hono.js", "../../../node_modules/hono/dist/adapter/cloudflare-pages/handler.js", "../../../node_modules/hono/dist/helper/factory/index.js", "../../../node_modules/hono/dist/utils/encode.js", "../../../node_modules/hono/dist/utils/jwt/jwa.js", "../../../node_modules/hono/dist/helper/adapter/index.js", "../../../node_modules/hono/dist/utils/jwt/types.js", "../../../node_modules/hono/dist/utils/jwt/utf8.js", "../../../node_modules/hono/dist/utils/jwt/jws.js", "../../../node_modules/hono/dist/utils/jwt/jwt.js", "../../../node_modules/hono/dist/utils/jwt/index.js", "../../../node_modules/hono/dist/middleware/jwt/jwt.js", "../../../functions/api/middleware/index.ts", "../../../functions/api/auth/register.ts", "../../../functions/api/auth/login.ts", "../../../functions/api/auth/middleware.ts", "../../../functions/api/admin/users.ts", "../../../functions/api/calendar/index.ts", "../../../functions/api/utils/push.ts", "../../../functions/api/tasks/index.ts", "../../../functions/api/profile/index.ts", "../../../functions/api/preferences/index.ts", "../../../functions/api/chat/messages.ts", "../../../functions/api/chat/channels.ts", "../../../functions/api/chat/users.ts", "../../../functions/api/chat/notifications.ts", "../../../functions/api/chat/index.ts", "../../../functions/api/ai/matchSummary.ts", "../../../functions/api/%5B%5Bpath%5D%5D.ts", "functionsRoutes-0.7599463434577728.mjs", "../../../node_modules/path-to-regexp/src/index.ts", "../../../node_modules/wrangler/templates/pages-template-worker.ts", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-XoVhQD/middleware-insertion-facade.js", "../../../node_modules/wrangler/templates/middleware/common.ts", "../bundle-XoVhQD/middleware-loader.entry.ts"],
  "sourceRoot": "/Users/gmoceri/Documents/FRC7790.com/.wrangler/tmp/pages-Un1dKH/functionsWorker-0.23293969454275487.mjs",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "// src/compose.ts\nvar compose = (middleware, onError, onNotFound) => {\n  return (context, next) => {\n    let index = -1;\n    return dispatch(0);\n    async function dispatch(i) {\n      if (i <= index) {\n        throw new Error(\"next() called multiple times\");\n      }\n      index = i;\n      let res;\n      let isError = false;\n      let handler;\n      if (middleware[i]) {\n        handler = middleware[i][0][0];\n        context.req.routeIndex = i;\n      } else {\n        handler = i === middleware.length && next || void 0;\n      }\n      if (handler) {\n        try {\n          res = await handler(context, () => dispatch(i + 1));\n        } catch (err) {\n          if (err instanceof Error && onError) {\n            context.error = err;\n            res = await onError(err, context);\n            isError = true;\n          } else {\n            throw err;\n          }\n        }\n      } else {\n        if (context.finalized === false && onNotFound) {\n          res = await onNotFound(context);\n        }\n      }\n      if (res && (context.finalized === false || isError)) {\n        context.res = res;\n      }\n      return context;\n    }\n  };\n};\nexport {\n  compose\n};\n", "// src/request/constants.ts\nvar GET_MATCH_RESULT = Symbol();\nexport {\n  GET_MATCH_RESULT\n};\n", "// src/utils/body.ts\nimport { HonoRequest } from \"../request.js\";\nvar parseBody = async (request, options = /* @__PURE__ */ Object.create(null)) => {\n  const { all = false, dot = false } = options;\n  const headers = request instanceof HonoRequest ? request.raw.headers : request.headers;\n  const contentType = headers.get(\"Content-Type\");\n  if (contentType?.startsWith(\"multipart/form-data\") || contentType?.startsWith(\"application/x-www-form-urlencoded\")) {\n    return parseFormData(request, { all, dot });\n  }\n  return {};\n};\nasync function parseFormData(request, options) {\n  const formData = await request.formData();\n  if (formData) {\n    return convertFormDataToBodyData(formData, options);\n  }\n  return {};\n}\nfunction convertFormDataToBodyData(formData, options) {\n  const form = /* @__PURE__ */ Object.create(null);\n  formData.forEach((value, key) => {\n    const shouldParseAllValues = options.all || key.endsWith(\"[]\");\n    if (!shouldParseAllValues) {\n      form[key] = value;\n    } else {\n      handleParsingAllValues(form, key, value);\n    }\n  });\n  if (options.dot) {\n    Object.entries(form).forEach(([key, value]) => {\n      const shouldParseDotValues = key.includes(\".\");\n      if (shouldParseDotValues) {\n        handleParsingNestedValues(form, key, value);\n        delete form[key];\n      }\n    });\n  }\n  return form;\n}\nvar handleParsingAllValues = (form, key, value) => {\n  if (form[key] !== void 0) {\n    if (Array.isArray(form[key])) {\n      ;\n      form[key].push(value);\n    } else {\n      form[key] = [form[key], value];\n    }\n  } else {\n    if (!key.endsWith(\"[]\")) {\n      form[key] = value;\n    } else {\n      form[key] = [value];\n    }\n  }\n};\nvar handleParsingNestedValues = (form, key, value) => {\n  let nestedForm = form;\n  const keys = key.split(\".\");\n  keys.forEach((key2, index) => {\n    if (index === keys.length - 1) {\n      nestedForm[key2] = value;\n    } else {\n      if (!nestedForm[key2] || typeof nestedForm[key2] !== \"object\" || Array.isArray(nestedForm[key2]) || nestedForm[key2] instanceof File) {\n        nestedForm[key2] = /* @__PURE__ */ Object.create(null);\n      }\n      nestedForm = nestedForm[key2];\n    }\n  });\n};\nexport {\n  parseBody\n};\n", "// src/utils/url.ts\nvar splitPath = (path) => {\n  const paths = path.split(\"/\");\n  if (paths[0] === \"\") {\n    paths.shift();\n  }\n  return paths;\n};\nvar splitRoutingPath = (routePath) => {\n  const { groups, path } = extractGroupsFromPath(routePath);\n  const paths = splitPath(path);\n  return replaceGroupMarks(paths, groups);\n};\nvar extractGroupsFromPath = (path) => {\n  const groups = [];\n  path = path.replace(/\\{[^}]+\\}/g, (match, index) => {\n    const mark = `@${index}`;\n    groups.push([mark, match]);\n    return mark;\n  });\n  return { groups, path };\n};\nvar replaceGroupMarks = (paths, groups) => {\n  for (let i = groups.length - 1; i >= 0; i--) {\n    const [mark] = groups[i];\n    for (let j = paths.length - 1; j >= 0; j--) {\n      if (paths[j].includes(mark)) {\n        paths[j] = paths[j].replace(mark, groups[i][1]);\n        break;\n      }\n    }\n  }\n  return paths;\n};\nvar patternCache = {};\nvar getPattern = (label, next) => {\n  if (label === \"*\") {\n    return \"*\";\n  }\n  const match = label.match(/^\\:([^\\{\\}]+)(?:\\{(.+)\\})?$/);\n  if (match) {\n    const cacheKey = `${label}#${next}`;\n    if (!patternCache[cacheKey]) {\n      if (match[2]) {\n        patternCache[cacheKey] = next && next[0] !== \":\" && next[0] !== \"*\" ? [cacheKey, match[1], new RegExp(`^${match[2]}(?=/${next})`)] : [label, match[1], new RegExp(`^${match[2]}$`)];\n      } else {\n        patternCache[cacheKey] = [label, match[1], true];\n      }\n    }\n    return patternCache[cacheKey];\n  }\n  return null;\n};\nvar tryDecode = (str, decoder) => {\n  try {\n    return decoder(str);\n  } catch {\n    return str.replace(/(?:%[0-9A-Fa-f]{2})+/g, (match) => {\n      try {\n        return decoder(match);\n      } catch {\n        return match;\n      }\n    });\n  }\n};\nvar tryDecodeURI = (str) => tryDecode(str, decodeURI);\nvar getPath = (request) => {\n  const url = request.url;\n  const start = url.indexOf(\"/\", url.indexOf(\":\") + 4);\n  let i = start;\n  for (; i < url.length; i++) {\n    const charCode = url.charCodeAt(i);\n    if (charCode === 37) {\n      const queryIndex = url.indexOf(\"?\", i);\n      const path = url.slice(start, queryIndex === -1 ? void 0 : queryIndex);\n      return tryDecodeURI(path.includes(\"%25\") ? path.replace(/%25/g, \"%2525\") : path);\n    } else if (charCode === 63) {\n      break;\n    }\n  }\n  return url.slice(start, i);\n};\nvar getQueryStrings = (url) => {\n  const queryIndex = url.indexOf(\"?\", 8);\n  return queryIndex === -1 ? \"\" : \"?\" + url.slice(queryIndex + 1);\n};\nvar getPathNoStrict = (request) => {\n  const result = getPath(request);\n  return result.length > 1 && result.at(-1) === \"/\" ? result.slice(0, -1) : result;\n};\nvar mergePath = (base, sub, ...rest) => {\n  if (rest.length) {\n    sub = mergePath(sub, ...rest);\n  }\n  return `${base?.[0] === \"/\" ? \"\" : \"/\"}${base}${sub === \"/\" ? \"\" : `${base?.at(-1) === \"/\" ? \"\" : \"/\"}${sub?.[0] === \"/\" ? sub.slice(1) : sub}`}`;\n};\nvar checkOptionalParameter = (path) => {\n  if (path.charCodeAt(path.length - 1) !== 63 || !path.includes(\":\")) {\n    return null;\n  }\n  const segments = path.split(\"/\");\n  const results = [];\n  let basePath = \"\";\n  segments.forEach((segment) => {\n    if (segment !== \"\" && !/\\:/.test(segment)) {\n      basePath += \"/\" + segment;\n    } else if (/\\:/.test(segment)) {\n      if (/\\?/.test(segment)) {\n        if (results.length === 0 && basePath === \"\") {\n          results.push(\"/\");\n        } else {\n          results.push(basePath);\n        }\n        const optionalSegment = segment.replace(\"?\", \"\");\n        basePath += \"/\" + optionalSegment;\n        results.push(basePath);\n      } else {\n        basePath += \"/\" + segment;\n      }\n    }\n  });\n  return results.filter((v, i, a) => a.indexOf(v) === i);\n};\nvar _decodeURI = (value) => {\n  if (!/[%+]/.test(value)) {\n    return value;\n  }\n  if (value.indexOf(\"+\") !== -1) {\n    value = value.replace(/\\+/g, \" \");\n  }\n  return value.indexOf(\"%\") !== -1 ? tryDecode(value, decodeURIComponent_) : value;\n};\nvar _getQueryParam = (url, key, multiple) => {\n  let encoded;\n  if (!multiple && key && !/[%+]/.test(key)) {\n    let keyIndex2 = url.indexOf(`?${key}`, 8);\n    if (keyIndex2 === -1) {\n      keyIndex2 = url.indexOf(`&${key}`, 8);\n    }\n    while (keyIndex2 !== -1) {\n      const trailingKeyCode = url.charCodeAt(keyIndex2 + key.length + 1);\n      if (trailingKeyCode === 61) {\n        const valueIndex = keyIndex2 + key.length + 2;\n        const endIndex = url.indexOf(\"&\", valueIndex);\n        return _decodeURI(url.slice(valueIndex, endIndex === -1 ? void 0 : endIndex));\n      } else if (trailingKeyCode == 38 || isNaN(trailingKeyCode)) {\n        return \"\";\n      }\n      keyIndex2 = url.indexOf(`&${key}`, keyIndex2 + 1);\n    }\n    encoded = /[%+]/.test(url);\n    if (!encoded) {\n      return void 0;\n    }\n  }\n  const results = {};\n  encoded ??= /[%+]/.test(url);\n  let keyIndex = url.indexOf(\"?\", 8);\n  while (keyIndex !== -1) {\n    const nextKeyIndex = url.indexOf(\"&\", keyIndex + 1);\n    let valueIndex = url.indexOf(\"=\", keyIndex);\n    if (valueIndex > nextKeyIndex && nextKeyIndex !== -1) {\n      valueIndex = -1;\n    }\n    let name = url.slice(\n      keyIndex + 1,\n      valueIndex === -1 ? nextKeyIndex === -1 ? void 0 : nextKeyIndex : valueIndex\n    );\n    if (encoded) {\n      name = _decodeURI(name);\n    }\n    keyIndex = nextKeyIndex;\n    if (name === \"\") {\n      continue;\n    }\n    let value;\n    if (valueIndex === -1) {\n      value = \"\";\n    } else {\n      value = url.slice(valueIndex + 1, nextKeyIndex === -1 ? void 0 : nextKeyIndex);\n      if (encoded) {\n        value = _decodeURI(value);\n      }\n    }\n    if (multiple) {\n      if (!(results[name] && Array.isArray(results[name]))) {\n        results[name] = [];\n      }\n      ;\n      results[name].push(value);\n    } else {\n      results[name] ??= value;\n    }\n  }\n  return key ? results[key] : results;\n};\nvar getQueryParam = _getQueryParam;\nvar getQueryParams = (url, key) => {\n  return _getQueryParam(url, key, true);\n};\nvar decodeURIComponent_ = decodeURIComponent;\nexport {\n  checkOptionalParameter,\n  decodeURIComponent_,\n  getPath,\n  getPathNoStrict,\n  getPattern,\n  getQueryParam,\n  getQueryParams,\n  getQueryStrings,\n  mergePath,\n  splitPath,\n  splitRoutingPath,\n  tryDecode\n};\n", "// src/request.ts\nimport { GET_MATCH_RESULT } from \"./request/constants.js\";\nimport { parseBody } from \"./utils/body.js\";\nimport { decodeURIComponent_, getQueryParam, getQueryParams, tryDecode } from \"./utils/url.js\";\nvar tryDecodeURIComponent = (str) => tryDecode(str, decodeURIComponent_);\nvar HonoRequest = class {\n  raw;\n  #validatedData;\n  #matchResult;\n  routeIndex = 0;\n  path;\n  bodyCache = {};\n  constructor(request, path = \"/\", matchResult = [[]]) {\n    this.raw = request;\n    this.path = path;\n    this.#matchResult = matchResult;\n    this.#validatedData = {};\n  }\n  param(key) {\n    return key ? this.#getDecodedParam(key) : this.#getAllDecodedParams();\n  }\n  #getDecodedParam(key) {\n    const paramKey = this.#matchResult[0][this.routeIndex][1][key];\n    const param = this.#getParamValue(paramKey);\n    return param ? /\\%/.test(param) ? tryDecodeURIComponent(param) : param : void 0;\n  }\n  #getAllDecodedParams() {\n    const decoded = {};\n    const keys = Object.keys(this.#matchResult[0][this.routeIndex][1]);\n    for (const key of keys) {\n      const value = this.#getParamValue(this.#matchResult[0][this.routeIndex][1][key]);\n      if (value && typeof value === \"string\") {\n        decoded[key] = /\\%/.test(value) ? tryDecodeURIComponent(value) : value;\n      }\n    }\n    return decoded;\n  }\n  #getParamValue(paramKey) {\n    return this.#matchResult[1] ? this.#matchResult[1][paramKey] : paramKey;\n  }\n  query(key) {\n    return getQueryParam(this.url, key);\n  }\n  queries(key) {\n    return getQueryParams(this.url, key);\n  }\n  header(name) {\n    if (name) {\n      return this.raw.headers.get(name) ?? void 0;\n    }\n    const headerData = {};\n    this.raw.headers.forEach((value, key) => {\n      headerData[key] = value;\n    });\n    return headerData;\n  }\n  async parseBody(options) {\n    return this.bodyCache.parsedBody ??= await parseBody(this, options);\n  }\n  #cachedBody = (key) => {\n    const { bodyCache, raw } = this;\n    const cachedBody = bodyCache[key];\n    if (cachedBody) {\n      return cachedBody;\n    }\n    const anyCachedKey = Object.keys(bodyCache)[0];\n    if (anyCachedKey) {\n      return bodyCache[anyCachedKey].then((body) => {\n        if (anyCachedKey === \"json\") {\n          body = JSON.stringify(body);\n        }\n        return new Response(body)[key]();\n      });\n    }\n    return bodyCache[key] = raw[key]();\n  };\n  json() {\n    return this.#cachedBody(\"text\").then((text) => JSON.parse(text));\n  }\n  text() {\n    return this.#cachedBody(\"text\");\n  }\n  arrayBuffer() {\n    return this.#cachedBody(\"arrayBuffer\");\n  }\n  blob() {\n    return this.#cachedBody(\"blob\");\n  }\n  formData() {\n    return this.#cachedBody(\"formData\");\n  }\n  addValidatedData(target, data) {\n    this.#validatedData[target] = data;\n  }\n  valid(target) {\n    return this.#validatedData[target];\n  }\n  get url() {\n    return this.raw.url;\n  }\n  get method() {\n    return this.raw.method;\n  }\n  get [GET_MATCH_RESULT]() {\n    return this.#matchResult;\n  }\n  get matchedRoutes() {\n    return this.#matchResult[0].map(([[, route]]) => route);\n  }\n  get routePath() {\n    return this.#matchResult[0].map(([[, route]]) => route)[this.routeIndex].path;\n  }\n};\nexport {\n  HonoRequest\n};\n", "// src/utils/html.ts\nvar HtmlEscapedCallbackPhase = {\n  Stringify: 1,\n  BeforeStream: 2,\n  Stream: 3\n};\nvar raw = (value, callbacks) => {\n  const escapedString = new String(value);\n  escapedString.isEscaped = true;\n  escapedString.callbacks = callbacks;\n  return escapedString;\n};\nvar escapeRe = /[&<>'\"]/;\nvar stringBufferToString = async (buffer, callbacks) => {\n  let str = \"\";\n  callbacks ||= [];\n  const resolvedBuffer = await Promise.all(buffer);\n  for (let i = resolvedBuffer.length - 1; ; i--) {\n    str += resolvedBuffer[i];\n    i--;\n    if (i < 0) {\n      break;\n    }\n    let r = resolvedBuffer[i];\n    if (typeof r === \"object\") {\n      callbacks.push(...r.callbacks || []);\n    }\n    const isEscaped = r.isEscaped;\n    r = await (typeof r === \"object\" ? r.toString() : r);\n    if (typeof r === \"object\") {\n      callbacks.push(...r.callbacks || []);\n    }\n    if (r.isEscaped ?? isEscaped) {\n      str += r;\n    } else {\n      const buf = [str];\n      escapeToBuffer(r, buf);\n      str = buf[0];\n    }\n  }\n  return raw(str, callbacks);\n};\nvar escapeToBuffer = (str, buffer) => {\n  const match = str.search(escapeRe);\n  if (match === -1) {\n    buffer[0] += str;\n    return;\n  }\n  let escape;\n  let index;\n  let lastIndex = 0;\n  for (index = match; index < str.length; index++) {\n    switch (str.charCodeAt(index)) {\n      case 34:\n        escape = \"&quot;\";\n        break;\n      case 39:\n        escape = \"&#39;\";\n        break;\n      case 38:\n        escape = \"&amp;\";\n        break;\n      case 60:\n        escape = \"&lt;\";\n        break;\n      case 62:\n        escape = \"&gt;\";\n        break;\n      default:\n        continue;\n    }\n    buffer[0] += str.substring(lastIndex, index) + escape;\n    lastIndex = index + 1;\n  }\n  buffer[0] += str.substring(lastIndex, index);\n};\nvar resolveCallbackSync = (str) => {\n  const callbacks = str.callbacks;\n  if (!callbacks?.length) {\n    return str;\n  }\n  const buffer = [str];\n  const context = {};\n  callbacks.forEach((c) => c({ phase: HtmlEscapedCallbackPhase.Stringify, buffer, context }));\n  return buffer[0];\n};\nvar resolveCallback = async (str, phase, preserveCallbacks, context, buffer) => {\n  if (typeof str === \"object\" && !(str instanceof String)) {\n    if (!(str instanceof Promise)) {\n      str = str.toString();\n    }\n    if (str instanceof Promise) {\n      str = await str;\n    }\n  }\n  const callbacks = str.callbacks;\n  if (!callbacks?.length) {\n    return Promise.resolve(str);\n  }\n  if (buffer) {\n    buffer[0] += str;\n  } else {\n    buffer = [str];\n  }\n  const resStr = Promise.all(callbacks.map((c) => c({ phase, buffer, context }))).then(\n    (res) => Promise.all(\n      res.filter(Boolean).map((str2) => resolveCallback(str2, phase, false, context, buffer))\n    ).then(() => buffer[0])\n  );\n  if (preserveCallbacks) {\n    return raw(await resStr, callbacks);\n  } else {\n    return resStr;\n  }\n};\nexport {\n  HtmlEscapedCallbackPhase,\n  escapeToBuffer,\n  raw,\n  resolveCallback,\n  resolveCallbackSync,\n  stringBufferToString\n};\n", "// src/context.ts\nimport { HonoRequest } from \"./request.js\";\nimport { HtmlEscapedCallbackPhase, resolveCallback } from \"./utils/html.js\";\nvar TEXT_PLAIN = \"text/plain; charset=UTF-8\";\nvar setDefaultContentType = (contentType, headers) => {\n  return {\n    \"Content-Type\": contentType,\n    ...headers\n  };\n};\nvar Context = class {\n  #rawRequest;\n  #req;\n  env = {};\n  #var;\n  finalized = false;\n  error;\n  #status;\n  #executionCtx;\n  #res;\n  #layout;\n  #renderer;\n  #notFoundHandler;\n  #preparedHeaders;\n  #matchResult;\n  #path;\n  constructor(req, options) {\n    this.#rawRequest = req;\n    if (options) {\n      this.#executionCtx = options.executionCtx;\n      this.env = options.env;\n      this.#notFoundHandler = options.notFoundHandler;\n      this.#path = options.path;\n      this.#matchResult = options.matchResult;\n    }\n  }\n  get req() {\n    this.#req ??= new HonoRequest(this.#rawRequest, this.#path, this.#matchResult);\n    return this.#req;\n  }\n  get event() {\n    if (this.#executionCtx && \"respondWith\" in this.#executionCtx) {\n      return this.#executionCtx;\n    } else {\n      throw Error(\"This context has no FetchEvent\");\n    }\n  }\n  get executionCtx() {\n    if (this.#executionCtx) {\n      return this.#executionCtx;\n    } else {\n      throw Error(\"This context has no ExecutionContext\");\n    }\n  }\n  get res() {\n    return this.#res ||= new Response(null, {\n      headers: this.#preparedHeaders ??= new Headers()\n    });\n  }\n  set res(_res) {\n    if (this.#res && _res) {\n      _res = new Response(_res.body, _res);\n      for (const [k, v] of this.#res.headers.entries()) {\n        if (k === \"content-type\") {\n          continue;\n        }\n        if (k === \"set-cookie\") {\n          const cookies = this.#res.headers.getSetCookie();\n          _res.headers.delete(\"set-cookie\");\n          for (const cookie of cookies) {\n            _res.headers.append(\"set-cookie\", cookie);\n          }\n        } else {\n          _res.headers.set(k, v);\n        }\n      }\n    }\n    this.#res = _res;\n    this.finalized = true;\n  }\n  render = (...args) => {\n    this.#renderer ??= (content) => this.html(content);\n    return this.#renderer(...args);\n  };\n  setLayout = (layout) => this.#layout = layout;\n  getLayout = () => this.#layout;\n  setRenderer = (renderer) => {\n    this.#renderer = renderer;\n  };\n  header = (name, value, options) => {\n    if (this.finalized) {\n      this.#res = new Response(this.#res.body, this.#res);\n    }\n    const headers = this.#res ? this.#res.headers : this.#preparedHeaders ??= new Headers();\n    if (value === void 0) {\n      headers.delete(name);\n    } else if (options?.append) {\n      headers.append(name, value);\n    } else {\n      headers.set(name, value);\n    }\n  };\n  status = (status) => {\n    this.#status = status;\n  };\n  set = (key, value) => {\n    this.#var ??= /* @__PURE__ */ new Map();\n    this.#var.set(key, value);\n  };\n  get = (key) => {\n    return this.#var ? this.#var.get(key) : void 0;\n  };\n  get var() {\n    if (!this.#var) {\n      return {};\n    }\n    return Object.fromEntries(this.#var);\n  }\n  #newResponse(data, arg, headers) {\n    const responseHeaders = this.#res ? new Headers(this.#res.headers) : this.#preparedHeaders ?? new Headers();\n    if (typeof arg === \"object\" && \"headers\" in arg) {\n      const argHeaders = arg.headers instanceof Headers ? arg.headers : new Headers(arg.headers);\n      for (const [key, value] of argHeaders) {\n        if (key.toLowerCase() === \"set-cookie\") {\n          responseHeaders.append(key, value);\n        } else {\n          responseHeaders.set(key, value);\n        }\n      }\n    }\n    if (headers) {\n      for (const [k, v] of Object.entries(headers)) {\n        if (typeof v === \"string\") {\n          responseHeaders.set(k, v);\n        } else {\n          responseHeaders.delete(k);\n          for (const v2 of v) {\n            responseHeaders.append(k, v2);\n          }\n        }\n      }\n    }\n    const status = typeof arg === \"number\" ? arg : arg?.status ?? this.#status;\n    return new Response(data, { status, headers: responseHeaders });\n  }\n  newResponse = (...args) => this.#newResponse(...args);\n  body = (data, arg, headers) => this.#newResponse(data, arg, headers);\n  text = (text, arg, headers) => {\n    return !this.#preparedHeaders && !this.#status && !arg && !headers && !this.finalized ? new Response(text) : this.#newResponse(\n      text,\n      arg,\n      setDefaultContentType(TEXT_PLAIN, headers)\n    );\n  };\n  json = (object, arg, headers) => {\n    return this.#newResponse(\n      JSON.stringify(object),\n      arg,\n      setDefaultContentType(\"application/json\", headers)\n    );\n  };\n  html = (html, arg, headers) => {\n    const res = (html2) => this.#newResponse(html2, arg, setDefaultContentType(\"text/html; charset=UTF-8\", headers));\n    return typeof html === \"object\" ? resolveCallback(html, HtmlEscapedCallbackPhase.Stringify, false, {}).then(res) : res(html);\n  };\n  redirect = (location, status) => {\n    const locationString = String(location);\n    this.header(\n      \"Location\",\n      !/[^\\x00-\\xFF]/.test(locationString) ? locationString : encodeURI(locationString)\n    );\n    return this.newResponse(null, status ?? 302);\n  };\n  notFound = () => {\n    this.#notFoundHandler ??= () => new Response();\n    return this.#notFoundHandler(this);\n  };\n};\nexport {\n  Context,\n  TEXT_PLAIN\n};\n", "// src/router.ts\nvar METHOD_NAME_ALL = \"ALL\";\nvar METHOD_NAME_ALL_LOWERCASE = \"all\";\nvar METHODS = [\"get\", \"post\", \"put\", \"delete\", \"options\", \"patch\"];\nvar MESSAGE_MATCHER_IS_ALREADY_BUILT = \"Can not add a route since the matcher is already built.\";\nvar UnsupportedPathError = class extends Error {\n};\nexport {\n  MESSAGE_MATCHER_IS_ALREADY_BUILT,\n  METHODS,\n  METHOD_NAME_ALL,\n  METHOD_NAME_ALL_LOWERCASE,\n  UnsupportedPathError\n};\n", "// src/utils/constants.ts\nvar COMPOSED_HANDLER = \"__COMPOSED_HANDLER\";\nexport {\n  COMPOSED_HANDLER\n};\n", "// src/hono-base.ts\nimport { compose } from \"./compose.js\";\nimport { Context } from \"./context.js\";\nimport { METHODS, METHOD_NAME_ALL, METHOD_NAME_ALL_LOWERCASE } from \"./router.js\";\nimport { COMPOSED_HANDLER } from \"./utils/constants.js\";\nimport { getPath, getPathNoStrict, mergePath } from \"./utils/url.js\";\nvar notFoundHandler = (c) => {\n  return c.text(\"404 Not Found\", 404);\n};\nvar errorHandler = (err, c) => {\n  if (\"getResponse\" in err) {\n    const res = err.getResponse();\n    return c.newResponse(res.body, res);\n  }\n  console.error(err);\n  return c.text(\"Internal Server Error\", 500);\n};\nvar Hono = class {\n  get;\n  post;\n  put;\n  delete;\n  options;\n  patch;\n  all;\n  on;\n  use;\n  router;\n  getPath;\n  _basePath = \"/\";\n  #path = \"/\";\n  routes = [];\n  constructor(options = {}) {\n    const allMethods = [...METHODS, METHOD_NAME_ALL_LOWERCASE];\n    allMethods.forEach((method) => {\n      this[method] = (args1, ...args) => {\n        if (typeof args1 === \"string\") {\n          this.#path = args1;\n        } else {\n          this.#addRoute(method, this.#path, args1);\n        }\n        args.forEach((handler) => {\n          this.#addRoute(method, this.#path, handler);\n        });\n        return this;\n      };\n    });\n    this.on = (method, path, ...handlers) => {\n      for (const p of [path].flat()) {\n        this.#path = p;\n        for (const m of [method].flat()) {\n          handlers.map((handler) => {\n            this.#addRoute(m.toUpperCase(), this.#path, handler);\n          });\n        }\n      }\n      return this;\n    };\n    this.use = (arg1, ...handlers) => {\n      if (typeof arg1 === \"string\") {\n        this.#path = arg1;\n      } else {\n        this.#path = \"*\";\n        handlers.unshift(arg1);\n      }\n      handlers.forEach((handler) => {\n        this.#addRoute(METHOD_NAME_ALL, this.#path, handler);\n      });\n      return this;\n    };\n    const { strict, ...optionsWithoutStrict } = options;\n    Object.assign(this, optionsWithoutStrict);\n    this.getPath = strict ?? true ? options.getPath ?? getPath : getPathNoStrict;\n  }\n  #clone() {\n    const clone = new Hono({\n      router: this.router,\n      getPath: this.getPath\n    });\n    clone.errorHandler = this.errorHandler;\n    clone.#notFoundHandler = this.#notFoundHandler;\n    clone.routes = this.routes;\n    return clone;\n  }\n  #notFoundHandler = notFoundHandler;\n  errorHandler = errorHandler;\n  route(path, app) {\n    const subApp = this.basePath(path);\n    app.routes.map((r) => {\n      let handler;\n      if (app.errorHandler === errorHandler) {\n        handler = r.handler;\n      } else {\n        handler = async (c, next) => (await compose([], app.errorHandler)(c, () => r.handler(c, next))).res;\n        handler[COMPOSED_HANDLER] = r.handler;\n      }\n      subApp.#addRoute(r.method, r.path, handler);\n    });\n    return this;\n  }\n  basePath(path) {\n    const subApp = this.#clone();\n    subApp._basePath = mergePath(this._basePath, path);\n    return subApp;\n  }\n  onError = (handler) => {\n    this.errorHandler = handler;\n    return this;\n  };\n  notFound = (handler) => {\n    this.#notFoundHandler = handler;\n    return this;\n  };\n  mount(path, applicationHandler, options) {\n    let replaceRequest;\n    let optionHandler;\n    if (options) {\n      if (typeof options === \"function\") {\n        optionHandler = options;\n      } else {\n        optionHandler = options.optionHandler;\n        if (options.replaceRequest === false) {\n          replaceRequest = (request) => request;\n        } else {\n          replaceRequest = options.replaceRequest;\n        }\n      }\n    }\n    const getOptions = optionHandler ? (c) => {\n      const options2 = optionHandler(c);\n      return Array.isArray(options2) ? options2 : [options2];\n    } : (c) => {\n      let executionContext = void 0;\n      try {\n        executionContext = c.executionCtx;\n      } catch {\n      }\n      return [c.env, executionContext];\n    };\n    replaceRequest ||= (() => {\n      const mergedPath = mergePath(this._basePath, path);\n      const pathPrefixLength = mergedPath === \"/\" ? 0 : mergedPath.length;\n      return (request) => {\n        const url = new URL(request.url);\n        url.pathname = url.pathname.slice(pathPrefixLength) || \"/\";\n        return new Request(url, request);\n      };\n    })();\n    const handler = async (c, next) => {\n      const res = await applicationHandler(replaceRequest(c.req.raw), ...getOptions(c));\n      if (res) {\n        return res;\n      }\n      await next();\n    };\n    this.#addRoute(METHOD_NAME_ALL, mergePath(path, \"*\"), handler);\n    return this;\n  }\n  #addRoute(method, path, handler) {\n    method = method.toUpperCase();\n    path = mergePath(this._basePath, path);\n    const r = { basePath: this._basePath, path, method, handler };\n    this.router.add(method, path, [handler, r]);\n    this.routes.push(r);\n  }\n  #handleError(err, c) {\n    if (err instanceof Error) {\n      return this.errorHandler(err, c);\n    }\n    throw err;\n  }\n  #dispatch(request, executionCtx, env, method) {\n    if (method === \"HEAD\") {\n      return (async () => new Response(null, await this.#dispatch(request, executionCtx, env, \"GET\")))();\n    }\n    const path = this.getPath(request, { env });\n    const matchResult = this.router.match(method, path);\n    const c = new Context(request, {\n      path,\n      matchResult,\n      env,\n      executionCtx,\n      notFoundHandler: this.#notFoundHandler\n    });\n    if (matchResult[0].length === 1) {\n      let res;\n      try {\n        res = matchResult[0][0][0][0](c, async () => {\n          c.res = await this.#notFoundHandler(c);\n        });\n      } catch (err) {\n        return this.#handleError(err, c);\n      }\n      return res instanceof Promise ? res.then(\n        (resolved) => resolved || (c.finalized ? c.res : this.#notFoundHandler(c))\n      ).catch((err) => this.#handleError(err, c)) : res ?? this.#notFoundHandler(c);\n    }\n    const composed = compose(matchResult[0], this.errorHandler, this.#notFoundHandler);\n    return (async () => {\n      try {\n        const context = await composed(c);\n        if (!context.finalized) {\n          throw new Error(\n            \"Context is not finalized. Did you forget to return a Response object or `await next()`?\"\n          );\n        }\n        return context.res;\n      } catch (err) {\n        return this.#handleError(err, c);\n      }\n    })();\n  }\n  fetch = (request, ...rest) => {\n    return this.#dispatch(request, rest[1], rest[0], request.method);\n  };\n  request = (input, requestInit, Env, executionCtx) => {\n    if (input instanceof Request) {\n      return this.fetch(requestInit ? new Request(input, requestInit) : input, Env, executionCtx);\n    }\n    input = input.toString();\n    return this.fetch(\n      new Request(\n        /^https?:\\/\\//.test(input) ? input : `http://localhost${mergePath(\"/\", input)}`,\n        requestInit\n      ),\n      Env,\n      executionCtx\n    );\n  };\n  fire = () => {\n    addEventListener(\"fetch\", (event) => {\n      event.respondWith(this.#dispatch(event.request, event, void 0, event.request.method));\n    });\n  };\n};\nexport {\n  Hono as HonoBase\n};\n", "// src/router/reg-exp-router/node.ts\nvar LABEL_REG_EXP_STR = \"[^/]+\";\nvar ONLY_WILDCARD_REG_EXP_STR = \".*\";\nvar TAIL_WILDCARD_REG_EXP_STR = \"(?:|/.*)\";\nvar PATH_ERROR = Symbol();\nvar regExpMetaChars = new Set(\".\\\\+*[^]$()\");\nfunction compareKey(a, b) {\n  if (a.length === 1) {\n    return b.length === 1 ? a < b ? -1 : 1 : -1;\n  }\n  if (b.length === 1) {\n    return 1;\n  }\n  if (a === ONLY_WILDCARD_REG_EXP_STR || a === TAIL_WILDCARD_REG_EXP_STR) {\n    return 1;\n  } else if (b === ONLY_WILDCARD_REG_EXP_STR || b === TAIL_WILDCARD_REG_EXP_STR) {\n    return -1;\n  }\n  if (a === LABEL_REG_EXP_STR) {\n    return 1;\n  } else if (b === LABEL_REG_EXP_STR) {\n    return -1;\n  }\n  return a.length === b.length ? a < b ? -1 : 1 : b.length - a.length;\n}\nvar Node = class {\n  #index;\n  #varIndex;\n  #children = /* @__PURE__ */ Object.create(null);\n  insert(tokens, index, paramMap, context, pathErrorCheckOnly) {\n    if (tokens.length === 0) {\n      if (this.#index !== void 0) {\n        throw PATH_ERROR;\n      }\n      if (pathErrorCheckOnly) {\n        return;\n      }\n      this.#index = index;\n      return;\n    }\n    const [token, ...restTokens] = tokens;\n    const pattern = token === \"*\" ? restTokens.length === 0 ? [\"\", \"\", ONLY_WILDCARD_REG_EXP_STR] : [\"\", \"\", LABEL_REG_EXP_STR] : token === \"/*\" ? [\"\", \"\", TAIL_WILDCARD_REG_EXP_STR] : token.match(/^\\:([^\\{\\}]+)(?:\\{(.+)\\})?$/);\n    let node;\n    if (pattern) {\n      const name = pattern[1];\n      let regexpStr = pattern[2] || LABEL_REG_EXP_STR;\n      if (name && pattern[2]) {\n        if (regexpStr === \".*\") {\n          throw PATH_ERROR;\n        }\n        regexpStr = regexpStr.replace(/^\\((?!\\?:)(?=[^)]+\\)$)/, \"(?:\");\n        if (/\\((?!\\?:)/.test(regexpStr)) {\n          throw PATH_ERROR;\n        }\n      }\n      node = this.#children[regexpStr];\n      if (!node) {\n        if (Object.keys(this.#children).some(\n          (k) => k !== ONLY_WILDCARD_REG_EXP_STR && k !== TAIL_WILDCARD_REG_EXP_STR\n        )) {\n          throw PATH_ERROR;\n        }\n        if (pathErrorCheckOnly) {\n          return;\n        }\n        node = this.#children[regexpStr] = new Node();\n        if (name !== \"\") {\n          node.#varIndex = context.varIndex++;\n        }\n      }\n      if (!pathErrorCheckOnly && name !== \"\") {\n        paramMap.push([name, node.#varIndex]);\n      }\n    } else {\n      node = this.#children[token];\n      if (!node) {\n        if (Object.keys(this.#children).some(\n          (k) => k.length > 1 && k !== ONLY_WILDCARD_REG_EXP_STR && k !== TAIL_WILDCARD_REG_EXP_STR\n        )) {\n          throw PATH_ERROR;\n        }\n        if (pathErrorCheckOnly) {\n          return;\n        }\n        node = this.#children[token] = new Node();\n      }\n    }\n    node.insert(restTokens, index, paramMap, context, pathErrorCheckOnly);\n  }\n  buildRegExpStr() {\n    const childKeys = Object.keys(this.#children).sort(compareKey);\n    const strList = childKeys.map((k) => {\n      const c = this.#children[k];\n      return (typeof c.#varIndex === \"number\" ? `(${k})@${c.#varIndex}` : regExpMetaChars.has(k) ? `\\\\${k}` : k) + c.buildRegExpStr();\n    });\n    if (typeof this.#index === \"number\") {\n      strList.unshift(`#${this.#index}`);\n    }\n    if (strList.length === 0) {\n      return \"\";\n    }\n    if (strList.length === 1) {\n      return strList[0];\n    }\n    return \"(?:\" + strList.join(\"|\") + \")\";\n  }\n};\nexport {\n  Node,\n  PATH_ERROR\n};\n", "// src/router/reg-exp-router/trie.ts\nimport { Node } from \"./node.js\";\nvar Trie = class {\n  #context = { varIndex: 0 };\n  #root = new Node();\n  insert(path, index, pathErrorCheckOnly) {\n    const paramAssoc = [];\n    const groups = [];\n    for (let i = 0; ; ) {\n      let replaced = false;\n      path = path.replace(/\\{[^}]+\\}/g, (m) => {\n        const mark = `@\\\\${i}`;\n        groups[i] = [mark, m];\n        i++;\n        replaced = true;\n        return mark;\n      });\n      if (!replaced) {\n        break;\n      }\n    }\n    const tokens = path.match(/(?::[^\\/]+)|(?:\\/\\*$)|./g) || [];\n    for (let i = groups.length - 1; i >= 0; i--) {\n      const [mark] = groups[i];\n      for (let j = tokens.length - 1; j >= 0; j--) {\n        if (tokens[j].indexOf(mark) !== -1) {\n          tokens[j] = tokens[j].replace(mark, groups[i][1]);\n          break;\n        }\n      }\n    }\n    this.#root.insert(tokens, index, paramAssoc, this.#context, pathErrorCheckOnly);\n    return paramAssoc;\n  }\n  buildRegExp() {\n    let regexp = this.#root.buildRegExpStr();\n    if (regexp === \"\") {\n      return [/^$/, [], []];\n    }\n    let captureIndex = 0;\n    const indexReplacementMap = [];\n    const paramReplacementMap = [];\n    regexp = regexp.replace(/#(\\d+)|@(\\d+)|\\.\\*\\$/g, (_, handlerIndex, paramIndex) => {\n      if (handlerIndex !== void 0) {\n        indexReplacementMap[++captureIndex] = Number(handlerIndex);\n        return \"$()\";\n      }\n      if (paramIndex !== void 0) {\n        paramReplacementMap[Number(paramIndex)] = ++captureIndex;\n        return \"\";\n      }\n      return \"\";\n    });\n    return [new RegExp(`^${regexp}`), indexReplacementMap, paramReplacementMap];\n  }\n};\nexport {\n  Trie\n};\n", "// src/router/reg-exp-router/router.ts\nimport {\n  MESSAGE_MATCHER_IS_ALREADY_BUILT,\n  METHOD_NAME_ALL,\n  UnsupportedPathError\n} from \"../../router.js\";\nimport { checkOptionalParameter } from \"../../utils/url.js\";\nimport { PATH_ERROR } from \"./node.js\";\nimport { Trie } from \"./trie.js\";\nvar emptyParam = [];\nvar nullMatcher = [/^$/, [], /* @__PURE__ */ Object.create(null)];\nvar wildcardRegExpCache = /* @__PURE__ */ Object.create(null);\nfunction buildWildcardRegExp(path) {\n  return wildcardRegExpCache[path] ??= new RegExp(\n    path === \"*\" ? \"\" : `^${path.replace(\n      /\\/\\*$|([.\\\\+*[^\\]$()])/g,\n      (_, metaChar) => metaChar ? `\\\\${metaChar}` : \"(?:|/.*)\"\n    )}$`\n  );\n}\nfunction clearWildcardRegExpCache() {\n  wildcardRegExpCache = /* @__PURE__ */ Object.create(null);\n}\nfunction buildMatcherFromPreprocessedRoutes(routes) {\n  const trie = new Trie();\n  const handlerData = [];\n  if (routes.length === 0) {\n    return nullMatcher;\n  }\n  const routesWithStaticPathFlag = routes.map(\n    (route) => [!/\\*|\\/:/.test(route[0]), ...route]\n  ).sort(\n    ([isStaticA, pathA], [isStaticB, pathB]) => isStaticA ? 1 : isStaticB ? -1 : pathA.length - pathB.length\n  );\n  const staticMap = /* @__PURE__ */ Object.create(null);\n  for (let i = 0, j = -1, len = routesWithStaticPathFlag.length; i < len; i++) {\n    const [pathErrorCheckOnly, path, handlers] = routesWithStaticPathFlag[i];\n    if (pathErrorCheckOnly) {\n      staticMap[path] = [handlers.map(([h]) => [h, /* @__PURE__ */ Object.create(null)]), emptyParam];\n    } else {\n      j++;\n    }\n    let paramAssoc;\n    try {\n      paramAssoc = trie.insert(path, j, pathErrorCheckOnly);\n    } catch (e) {\n      throw e === PATH_ERROR ? new UnsupportedPathError(path) : e;\n    }\n    if (pathErrorCheckOnly) {\n      continue;\n    }\n    handlerData[j] = handlers.map(([h, paramCount]) => {\n      const paramIndexMap = /* @__PURE__ */ Object.create(null);\n      paramCount -= 1;\n      for (; paramCount >= 0; paramCount--) {\n        const [key, value] = paramAssoc[paramCount];\n        paramIndexMap[key] = value;\n      }\n      return [h, paramIndexMap];\n    });\n  }\n  const [regexp, indexReplacementMap, paramReplacementMap] = trie.buildRegExp();\n  for (let i = 0, len = handlerData.length; i < len; i++) {\n    for (let j = 0, len2 = handlerData[i].length; j < len2; j++) {\n      const map = handlerData[i][j]?.[1];\n      if (!map) {\n        continue;\n      }\n      const keys = Object.keys(map);\n      for (let k = 0, len3 = keys.length; k < len3; k++) {\n        map[keys[k]] = paramReplacementMap[map[keys[k]]];\n      }\n    }\n  }\n  const handlerMap = [];\n  for (const i in indexReplacementMap) {\n    handlerMap[i] = handlerData[indexReplacementMap[i]];\n  }\n  return [regexp, handlerMap, staticMap];\n}\nfunction findMiddleware(middleware, path) {\n  if (!middleware) {\n    return void 0;\n  }\n  for (const k of Object.keys(middleware).sort((a, b) => b.length - a.length)) {\n    if (buildWildcardRegExp(k).test(path)) {\n      return [...middleware[k]];\n    }\n  }\n  return void 0;\n}\nvar RegExpRouter = class {\n  name = \"RegExpRouter\";\n  #middleware;\n  #routes;\n  constructor() {\n    this.#middleware = { [METHOD_NAME_ALL]: /* @__PURE__ */ Object.create(null) };\n    this.#routes = { [METHOD_NAME_ALL]: /* @__PURE__ */ Object.create(null) };\n  }\n  add(method, path, handler) {\n    const middleware = this.#middleware;\n    const routes = this.#routes;\n    if (!middleware || !routes) {\n      throw new Error(MESSAGE_MATCHER_IS_ALREADY_BUILT);\n    }\n    if (!middleware[method]) {\n      ;\n      [middleware, routes].forEach((handlerMap) => {\n        handlerMap[method] = /* @__PURE__ */ Object.create(null);\n        Object.keys(handlerMap[METHOD_NAME_ALL]).forEach((p) => {\n          handlerMap[method][p] = [...handlerMap[METHOD_NAME_ALL][p]];\n        });\n      });\n    }\n    if (path === \"/*\") {\n      path = \"*\";\n    }\n    const paramCount = (path.match(/\\/:/g) || []).length;\n    if (/\\*$/.test(path)) {\n      const re = buildWildcardRegExp(path);\n      if (method === METHOD_NAME_ALL) {\n        Object.keys(middleware).forEach((m) => {\n          middleware[m][path] ||= findMiddleware(middleware[m], path) || findMiddleware(middleware[METHOD_NAME_ALL], path) || [];\n        });\n      } else {\n        middleware[method][path] ||= findMiddleware(middleware[method], path) || findMiddleware(middleware[METHOD_NAME_ALL], path) || [];\n      }\n      Object.keys(middleware).forEach((m) => {\n        if (method === METHOD_NAME_ALL || method === m) {\n          Object.keys(middleware[m]).forEach((p) => {\n            re.test(p) && middleware[m][p].push([handler, paramCount]);\n          });\n        }\n      });\n      Object.keys(routes).forEach((m) => {\n        if (method === METHOD_NAME_ALL || method === m) {\n          Object.keys(routes[m]).forEach(\n            (p) => re.test(p) && routes[m][p].push([handler, paramCount])\n          );\n        }\n      });\n      return;\n    }\n    const paths = checkOptionalParameter(path) || [path];\n    for (let i = 0, len = paths.length; i < len; i++) {\n      const path2 = paths[i];\n      Object.keys(routes).forEach((m) => {\n        if (method === METHOD_NAME_ALL || method === m) {\n          routes[m][path2] ||= [\n            ...findMiddleware(middleware[m], path2) || findMiddleware(middleware[METHOD_NAME_ALL], path2) || []\n          ];\n          routes[m][path2].push([handler, paramCount - len + i + 1]);\n        }\n      });\n    }\n  }\n  match(method, path) {\n    clearWildcardRegExpCache();\n    const matchers = this.#buildAllMatchers();\n    this.match = (method2, path2) => {\n      const matcher = matchers[method2] || matchers[METHOD_NAME_ALL];\n      const staticMatch = matcher[2][path2];\n      if (staticMatch) {\n        return staticMatch;\n      }\n      const match = path2.match(matcher[0]);\n      if (!match) {\n        return [[], emptyParam];\n      }\n      const index = match.indexOf(\"\", 1);\n      return [matcher[1][index], match];\n    };\n    return this.match(method, path);\n  }\n  #buildAllMatchers() {\n    const matchers = /* @__PURE__ */ Object.create(null);\n    Object.keys(this.#routes).concat(Object.keys(this.#middleware)).forEach((method) => {\n      matchers[method] ||= this.#buildMatcher(method);\n    });\n    this.#middleware = this.#routes = void 0;\n    return matchers;\n  }\n  #buildMatcher(method) {\n    const routes = [];\n    let hasOwnRoute = method === METHOD_NAME_ALL;\n    [this.#middleware, this.#routes].forEach((r) => {\n      const ownRoute = r[method] ? Object.keys(r[method]).map((path) => [path, r[method][path]]) : [];\n      if (ownRoute.length !== 0) {\n        hasOwnRoute ||= true;\n        routes.push(...ownRoute);\n      } else if (method !== METHOD_NAME_ALL) {\n        routes.push(\n          ...Object.keys(r[METHOD_NAME_ALL]).map((path) => [path, r[METHOD_NAME_ALL][path]])\n        );\n      }\n    });\n    if (!hasOwnRoute) {\n      return null;\n    } else {\n      return buildMatcherFromPreprocessedRoutes(routes);\n    }\n  }\n};\nexport {\n  RegExpRouter\n};\n", "// src/router/smart-router/router.ts\nimport { MESSAGE_MATCHER_IS_ALREADY_BUILT, UnsupportedPathError } from \"../../router.js\";\nvar SmartRouter = class {\n  name = \"SmartRouter\";\n  #routers = [];\n  #routes = [];\n  constructor(init) {\n    this.#routers = init.routers;\n  }\n  add(method, path, handler) {\n    if (!this.#routes) {\n      throw new Error(MESSAGE_MATCHER_IS_ALREADY_BUILT);\n    }\n    this.#routes.push([method, path, handler]);\n  }\n  match(method, path) {\n    if (!this.#routes) {\n      throw new Error(\"Fatal error\");\n    }\n    const routers = this.#routers;\n    const routes = this.#routes;\n    const len = routers.length;\n    let i = 0;\n    let res;\n    for (; i < len; i++) {\n      const router = routers[i];\n      try {\n        for (let i2 = 0, len2 = routes.length; i2 < len2; i2++) {\n          router.add(...routes[i2]);\n        }\n        res = router.match(method, path);\n      } catch (e) {\n        if (e instanceof UnsupportedPathError) {\n          continue;\n        }\n        throw e;\n      }\n      this.match = router.match.bind(router);\n      this.#routers = [router];\n      this.#routes = void 0;\n      break;\n    }\n    if (i === len) {\n      throw new Error(\"Fatal error\");\n    }\n    this.name = `SmartRouter + ${this.activeRouter.name}`;\n    return res;\n  }\n  get activeRouter() {\n    if (this.#routes || this.#routers.length !== 1) {\n      throw new Error(\"No active router has been determined yet.\");\n    }\n    return this.#routers[0];\n  }\n};\nexport {\n  SmartRouter\n};\n", "// src/router/trie-router/node.ts\nimport { METHOD_NAME_ALL } from \"../../router.js\";\nimport { getPattern, splitPath, splitRoutingPath } from \"../../utils/url.js\";\nvar emptyParams = /* @__PURE__ */ Object.create(null);\nvar Node = class {\n  #methods;\n  #children;\n  #patterns;\n  #order = 0;\n  #params = emptyParams;\n  constructor(method, handler, children) {\n    this.#children = children || /* @__PURE__ */ Object.create(null);\n    this.#methods = [];\n    if (method && handler) {\n      const m = /* @__PURE__ */ Object.create(null);\n      m[method] = { handler, possibleKeys: [], score: 0 };\n      this.#methods = [m];\n    }\n    this.#patterns = [];\n  }\n  insert(method, path, handler) {\n    this.#order = ++this.#order;\n    let curNode = this;\n    const parts = splitRoutingPath(path);\n    const possibleKeys = [];\n    for (let i = 0, len = parts.length; i < len; i++) {\n      const p = parts[i];\n      const nextP = parts[i + 1];\n      const pattern = getPattern(p, nextP);\n      const key = Array.isArray(pattern) ? pattern[0] : p;\n      if (key in curNode.#children) {\n        curNode = curNode.#children[key];\n        if (pattern) {\n          possibleKeys.push(pattern[1]);\n        }\n        continue;\n      }\n      curNode.#children[key] = new Node();\n      if (pattern) {\n        curNode.#patterns.push(pattern);\n        possibleKeys.push(pattern[1]);\n      }\n      curNode = curNode.#children[key];\n    }\n    curNode.#methods.push({\n      [method]: {\n        handler,\n        possibleKeys: possibleKeys.filter((v, i, a) => a.indexOf(v) === i),\n        score: this.#order\n      }\n    });\n    return curNode;\n  }\n  #getHandlerSets(node, method, nodeParams, params) {\n    const handlerSets = [];\n    for (let i = 0, len = node.#methods.length; i < len; i++) {\n      const m = node.#methods[i];\n      const handlerSet = m[method] || m[METHOD_NAME_ALL];\n      const processedSet = {};\n      if (handlerSet !== void 0) {\n        handlerSet.params = /* @__PURE__ */ Object.create(null);\n        handlerSets.push(handlerSet);\n        if (nodeParams !== emptyParams || params && params !== emptyParams) {\n          for (let i2 = 0, len2 = handlerSet.possibleKeys.length; i2 < len2; i2++) {\n            const key = handlerSet.possibleKeys[i2];\n            const processed = processedSet[handlerSet.score];\n            handlerSet.params[key] = params?.[key] && !processed ? params[key] : nodeParams[key] ?? params?.[key];\n            processedSet[handlerSet.score] = true;\n          }\n        }\n      }\n    }\n    return handlerSets;\n  }\n  search(method, path) {\n    const handlerSets = [];\n    this.#params = emptyParams;\n    const curNode = this;\n    let curNodes = [curNode];\n    const parts = splitPath(path);\n    const curNodesQueue = [];\n    for (let i = 0, len = parts.length; i < len; i++) {\n      const part = parts[i];\n      const isLast = i === len - 1;\n      const tempNodes = [];\n      for (let j = 0, len2 = curNodes.length; j < len2; j++) {\n        const node = curNodes[j];\n        const nextNode = node.#children[part];\n        if (nextNode) {\n          nextNode.#params = node.#params;\n          if (isLast) {\n            if (nextNode.#children[\"*\"]) {\n              handlerSets.push(\n                ...this.#getHandlerSets(nextNode.#children[\"*\"], method, node.#params)\n              );\n            }\n            handlerSets.push(...this.#getHandlerSets(nextNode, method, node.#params));\n          } else {\n            tempNodes.push(nextNode);\n          }\n        }\n        for (let k = 0, len3 = node.#patterns.length; k < len3; k++) {\n          const pattern = node.#patterns[k];\n          const params = node.#params === emptyParams ? {} : { ...node.#params };\n          if (pattern === \"*\") {\n            const astNode = node.#children[\"*\"];\n            if (astNode) {\n              handlerSets.push(...this.#getHandlerSets(astNode, method, node.#params));\n              astNode.#params = params;\n              tempNodes.push(astNode);\n            }\n            continue;\n          }\n          const [key, name, matcher] = pattern;\n          if (!part && !(matcher instanceof RegExp)) {\n            continue;\n          }\n          const child = node.#children[key];\n          const restPathString = parts.slice(i).join(\"/\");\n          if (matcher instanceof RegExp) {\n            const m = matcher.exec(restPathString);\n            if (m) {\n              params[name] = m[0];\n              handlerSets.push(...this.#getHandlerSets(child, method, node.#params, params));\n              if (Object.keys(child.#children).length) {\n                child.#params = params;\n                const componentCount = m[0].match(/\\//)?.length ?? 0;\n                const targetCurNodes = curNodesQueue[componentCount] ||= [];\n                targetCurNodes.push(child);\n              }\n              continue;\n            }\n          }\n          if (matcher === true || matcher.test(part)) {\n            params[name] = part;\n            if (isLast) {\n              handlerSets.push(...this.#getHandlerSets(child, method, params, node.#params));\n              if (child.#children[\"*\"]) {\n                handlerSets.push(\n                  ...this.#getHandlerSets(child.#children[\"*\"], method, params, node.#params)\n                );\n              }\n            } else {\n              child.#params = params;\n              tempNodes.push(child);\n            }\n          }\n        }\n      }\n      curNodes = tempNodes.concat(curNodesQueue.shift() ?? []);\n    }\n    if (handlerSets.length > 1) {\n      handlerSets.sort((a, b) => {\n        return a.score - b.score;\n      });\n    }\n    return [handlerSets.map(({ handler, params }) => [handler, params])];\n  }\n};\nexport {\n  Node\n};\n", "// src/router/trie-router/router.ts\nimport { checkOptionalParameter } from \"../../utils/url.js\";\nimport { Node } from \"./node.js\";\nvar TrieRouter = class {\n  name = \"TrieRouter\";\n  #node;\n  constructor() {\n    this.#node = new Node();\n  }\n  add(method, path, handler) {\n    const results = checkOptionalParameter(path);\n    if (results) {\n      for (let i = 0, len = results.length; i < len; i++) {\n        this.#node.insert(method, results[i], handler);\n      }\n      return;\n    }\n    this.#node.insert(method, path, handler);\n  }\n  match(method, path) {\n    return this.#node.search(method, path);\n  }\n};\nexport {\n  TrieRouter\n};\n", "// src/hono.ts\nimport { HonoBase } from \"./hono-base.js\";\nimport { RegExpRouter } from \"./router/reg-exp-router/index.js\";\nimport { SmartRouter } from \"./router/smart-router/index.js\";\nimport { TrieRouter } from \"./router/trie-router/index.js\";\nvar Hono = class extends HonoBase {\n  constructor(options = {}) {\n    super(options);\n    this.router = options.router ?? new SmartRouter({\n      routers: [new RegExpRouter(), new TrieRouter()]\n    });\n  }\n};\nexport {\n  Hono\n};\n", "// src/adapter/cloudflare-pages/handler.ts\nimport { Context } from \"../../context.js\";\nimport { HTTPException } from \"../../http-exception.js\";\nvar handle = (app) => (eventContext) => {\n  return app.fetch(\n    eventContext.request,\n    { ...eventContext.env, eventContext },\n    {\n      waitUntil: eventContext.waitUntil,\n      passThroughOnException: eventContext.passThroughOnException,\n      props: {}\n    }\n  );\n};\nfunction handleMiddleware(middleware) {\n  return async (executionCtx) => {\n    const context = new Context(executionCtx.request, {\n      env: { ...executionCtx.env, eventContext: executionCtx },\n      executionCtx\n    });\n    let response = void 0;\n    try {\n      response = await middleware(context, async () => {\n        try {\n          context.res = await executionCtx.next();\n        } catch (error) {\n          if (error instanceof Error) {\n            context.error = error;\n          } else {\n            throw error;\n          }\n        }\n      });\n    } catch (error) {\n      if (error instanceof Error) {\n        context.error = error;\n      } else {\n        throw error;\n      }\n    }\n    if (response) {\n      return response;\n    }\n    if (context.error instanceof HTTPException) {\n      return context.error.getResponse();\n    }\n    if (context.error) {\n      throw context.error;\n    }\n    return context.res;\n  };\n}\nvar serveStatic = () => {\n  return async (c) => {\n    const env = c.env;\n    const res = await env.ASSETS.fetch(c.req.raw);\n    if (res.status === 404) {\n      return c.notFound();\n    }\n    return res;\n  };\n};\nexport {\n  handle,\n  handleMiddleware,\n  serveStatic\n};\n", "// src/helper/factory/index.ts\nimport { Hono } from \"../../hono.js\";\nvar Factory = class {\n  initApp;\n  #defaultAppOptions;\n  constructor(init) {\n    this.initApp = init?.initApp;\n    this.#defaultAppOptions = init?.defaultAppOptions;\n  }\n  createApp = (options) => {\n    const app = new Hono(\n      options && this.#defaultAppOptions ? { ...this.#defaultAppOptions, ...options } : options ?? this.#defaultAppOptions\n    );\n    if (this.initApp) {\n      this.initApp(app);\n    }\n    return app;\n  };\n  createMiddleware = (middleware) => middleware;\n  createHandlers = (...handlers) => {\n    return handlers.filter((handler) => handler !== void 0);\n  };\n};\nvar createFactory = (init) => new Factory(init);\nvar createMiddleware = (middleware) => middleware;\nexport {\n  Factory,\n  createFactory,\n  createMiddleware\n};\n", "// src/utils/encode.ts\nvar decodeBase64Url = (str) => {\n  return decodeBase64(str.replace(/_|-/g, (m) => ({ _: \"/\", \"-\": \"+\" })[m] ?? m));\n};\nvar encodeBase64Url = (buf) => encodeBase64(buf).replace(/\\/|\\+/g, (m) => ({ \"/\": \"_\", \"+\": \"-\" })[m] ?? m);\nvar encodeBase64 = (buf) => {\n  let binary = \"\";\n  const bytes = new Uint8Array(buf);\n  for (let i = 0, len = bytes.length; i < len; i++) {\n    binary += String.fromCharCode(bytes[i]);\n  }\n  return btoa(binary);\n};\nvar decodeBase64 = (str) => {\n  const binary = atob(str);\n  const bytes = new Uint8Array(new ArrayBuffer(binary.length));\n  const half = binary.length / 2;\n  for (let i = 0, j = binary.length - 1; i <= half; i++, j--) {\n    bytes[i] = binary.charCodeAt(i);\n    bytes[j] = binary.charCodeAt(j);\n  }\n  return bytes;\n};\nexport {\n  decodeBase64,\n  decodeBase64Url,\n  encodeBase64,\n  encodeBase64Url\n};\n", "// src/utils/jwt/jwa.ts\nvar AlgorithmTypes = /* @__PURE__ */ ((AlgorithmTypes2) => {\n  AlgorithmTypes2[\"HS256\"] = \"HS256\";\n  AlgorithmTypes2[\"HS384\"] = \"HS384\";\n  AlgorithmTypes2[\"HS512\"] = \"HS512\";\n  AlgorithmTypes2[\"RS256\"] = \"RS256\";\n  AlgorithmTypes2[\"RS384\"] = \"RS384\";\n  AlgorithmTypes2[\"RS512\"] = \"RS512\";\n  AlgorithmTypes2[\"PS256\"] = \"PS256\";\n  AlgorithmTypes2[\"PS384\"] = \"PS384\";\n  AlgorithmTypes2[\"PS512\"] = \"PS512\";\n  AlgorithmTypes2[\"ES256\"] = \"ES256\";\n  AlgorithmTypes2[\"ES384\"] = \"ES384\";\n  AlgorithmTypes2[\"ES512\"] = \"ES512\";\n  AlgorithmTypes2[\"EdDSA\"] = \"EdDSA\";\n  return AlgorithmTypes2;\n})(AlgorithmTypes || {});\nexport {\n  AlgorithmTypes\n};\n", "// src/helper/adapter/index.ts\nvar env = (c, runtime) => {\n  const global = globalThis;\n  const globalEnv = global?.process?.env;\n  runtime ??= getRuntimeKey();\n  const runtimeEnvHandlers = {\n    bun: () => globalEnv,\n    node: () => globalEnv,\n    \"edge-light\": () => globalEnv,\n    deno: () => {\n      return Deno.env.toObject();\n    },\n    workerd: () => c.env,\n    fastly: () => ({}),\n    other: () => ({})\n  };\n  return runtimeEnvHandlers[runtime]();\n};\nvar knownUserAgents = {\n  deno: \"Deno\",\n  bun: \"Bun\",\n  workerd: \"Cloudflare-Workers\",\n  node: \"Node.js\"\n};\nvar getRuntimeKey = () => {\n  const global = globalThis;\n  const userAgentSupported = typeof navigator !== \"undefined\" && typeof navigator.userAgent === \"string\";\n  if (userAgentSupported) {\n    for (const [runtimeKey, userAgent] of Object.entries(knownUserAgents)) {\n      if (checkUserAgentEquals(userAgent)) {\n        return runtimeKey;\n      }\n    }\n  }\n  if (typeof global?.EdgeRuntime === \"string\") {\n    return \"edge-light\";\n  }\n  if (global?.fastly !== void 0) {\n    return \"fastly\";\n  }\n  if (global?.process?.release?.name === \"node\") {\n    return \"node\";\n  }\n  return \"other\";\n};\nvar checkUserAgentEquals = (platform) => {\n  const userAgent = navigator.userAgent;\n  return userAgent.startsWith(platform);\n};\nexport {\n  checkUserAgentEquals,\n  env,\n  getRuntimeKey,\n  knownUserAgents\n};\n", "// src/utils/jwt/types.ts\nvar JwtAlgorithmNotImplemented = class extends Error {\n  constructor(alg) {\n    super(`${alg} is not an implemented algorithm`);\n    this.name = \"JwtAlgorithmNotImplemented\";\n  }\n};\nvar JwtTokenInvalid = class extends Error {\n  constructor(token) {\n    super(`invalid JWT token: ${token}`);\n    this.name = \"JwtTokenInvalid\";\n  }\n};\nvar JwtTokenNotBefore = class extends Error {\n  constructor(token) {\n    super(`token (${token}) is being used before it's valid`);\n    this.name = \"JwtTokenNotBefore\";\n  }\n};\nvar JwtTokenExpired = class extends Error {\n  constructor(token) {\n    super(`token (${token}) expired`);\n    this.name = \"JwtTokenExpired\";\n  }\n};\nvar JwtTokenIssuedAt = class extends Error {\n  constructor(currentTimestamp, iat) {\n    super(\n      `Invalid \"iat\" claim, must be a valid number lower than \"${currentTimestamp}\" (iat: \"${iat}\")`\n    );\n    this.name = \"JwtTokenIssuedAt\";\n  }\n};\nvar JwtTokenIssuer = class extends Error {\n  constructor(expected, iss) {\n    super(`expected issuer \"${expected}\", got ${iss ? `\"${iss}\"` : \"none\"} `);\n    this.name = \"JwtTokenIssuer\";\n  }\n};\nvar JwtHeaderInvalid = class extends Error {\n  constructor(header) {\n    super(`jwt header is invalid: ${JSON.stringify(header)}`);\n    this.name = \"JwtHeaderInvalid\";\n  }\n};\nvar JwtHeaderRequiresKid = class extends Error {\n  constructor(header) {\n    super(`required \"kid\" in jwt header: ${JSON.stringify(header)}`);\n    this.name = \"JwtHeaderRequiresKid\";\n  }\n};\nvar JwtTokenSignatureMismatched = class extends Error {\n  constructor(token) {\n    super(`token(${token}) signature mismatched`);\n    this.name = \"JwtTokenSignatureMismatched\";\n  }\n};\nvar CryptoKeyUsage = /* @__PURE__ */ ((CryptoKeyUsage2) => {\n  CryptoKeyUsage2[\"Encrypt\"] = \"encrypt\";\n  CryptoKeyUsage2[\"Decrypt\"] = \"decrypt\";\n  CryptoKeyUsage2[\"Sign\"] = \"sign\";\n  CryptoKeyUsage2[\"Verify\"] = \"verify\";\n  CryptoKeyUsage2[\"DeriveKey\"] = \"deriveKey\";\n  CryptoKeyUsage2[\"DeriveBits\"] = \"deriveBits\";\n  CryptoKeyUsage2[\"WrapKey\"] = \"wrapKey\";\n  CryptoKeyUsage2[\"UnwrapKey\"] = \"unwrapKey\";\n  return CryptoKeyUsage2;\n})(CryptoKeyUsage || {});\nexport {\n  CryptoKeyUsage,\n  JwtAlgorithmNotImplemented,\n  JwtHeaderInvalid,\n  JwtHeaderRequiresKid,\n  JwtTokenExpired,\n  JwtTokenInvalid,\n  JwtTokenIssuedAt,\n  JwtTokenIssuer,\n  JwtTokenNotBefore,\n  JwtTokenSignatureMismatched\n};\n", "// src/utils/jwt/utf8.ts\nvar utf8Encoder = new TextEncoder();\nvar utf8Decoder = new TextDecoder();\nexport {\n  utf8Decoder,\n  utf8Encoder\n};\n", "// src/utils/jwt/jws.ts\nimport { getRuntimeKey } from \"../../helper/adapter/index.js\";\nimport { decodeBase64 } from \"../encode.js\";\nimport { CryptoKeyUsage, JwtAlgorithmNotImplemented } from \"./types.js\";\nimport { utf8Encoder } from \"./utf8.js\";\nasync function signing(privateKey, alg, data) {\n  const algorithm = getKeyAlgorithm(alg);\n  const cryptoKey = await importPrivateKey(privateKey, algorithm);\n  return await crypto.subtle.sign(algorithm, cryptoKey, data);\n}\nasync function verifying(publicKey, alg, signature, data) {\n  const algorithm = getKeyAlgorithm(alg);\n  const cryptoKey = await importPublicKey(publicKey, algorithm);\n  return await crypto.subtle.verify(algorithm, cryptoKey, signature, data);\n}\nfunction pemToBinary(pem) {\n  return decodeBase64(pem.replace(/-+(BEGIN|END).*/g, \"\").replace(/\\s/g, \"\"));\n}\nasync function importPrivateKey(key, alg) {\n  if (!crypto.subtle || !crypto.subtle.importKey) {\n    throw new Error(\"`crypto.subtle.importKey` is undefined. JWT auth middleware requires it.\");\n  }\n  if (isCryptoKey(key)) {\n    if (key.type !== \"private\" && key.type !== \"secret\") {\n      throw new Error(\n        `unexpected key type: CryptoKey.type is ${key.type}, expected private or secret`\n      );\n    }\n    return key;\n  }\n  const usages = [CryptoKeyUsage.Sign];\n  if (typeof key === \"object\") {\n    return await crypto.subtle.importKey(\"jwk\", key, alg, false, usages);\n  }\n  if (key.includes(\"PRIVATE\")) {\n    return await crypto.subtle.importKey(\"pkcs8\", pemToBinary(key), alg, false, usages);\n  }\n  return await crypto.subtle.importKey(\"raw\", utf8Encoder.encode(key), alg, false, usages);\n}\nasync function importPublicKey(key, alg) {\n  if (!crypto.subtle || !crypto.subtle.importKey) {\n    throw new Error(\"`crypto.subtle.importKey` is undefined. JWT auth middleware requires it.\");\n  }\n  if (isCryptoKey(key)) {\n    if (key.type === \"public\" || key.type === \"secret\") {\n      return key;\n    }\n    key = await exportPublicJwkFrom(key);\n  }\n  if (typeof key === \"string\" && key.includes(\"PRIVATE\")) {\n    const privateKey = await crypto.subtle.importKey(\"pkcs8\", pemToBinary(key), alg, true, [\n      CryptoKeyUsage.Sign\n    ]);\n    key = await exportPublicJwkFrom(privateKey);\n  }\n  const usages = [CryptoKeyUsage.Verify];\n  if (typeof key === \"object\") {\n    return await crypto.subtle.importKey(\"jwk\", key, alg, false, usages);\n  }\n  if (key.includes(\"PUBLIC\")) {\n    return await crypto.subtle.importKey(\"spki\", pemToBinary(key), alg, false, usages);\n  }\n  return await crypto.subtle.importKey(\"raw\", utf8Encoder.encode(key), alg, false, usages);\n}\nasync function exportPublicJwkFrom(privateKey) {\n  if (privateKey.type !== \"private\") {\n    throw new Error(`unexpected key type: ${privateKey.type}`);\n  }\n  if (!privateKey.extractable) {\n    throw new Error(\"unexpected private key is unextractable\");\n  }\n  const jwk = await crypto.subtle.exportKey(\"jwk\", privateKey);\n  const { kty } = jwk;\n  const { alg, e, n } = jwk;\n  const { crv, x, y } = jwk;\n  return { kty, alg, e, n, crv, x, y, key_ops: [CryptoKeyUsage.Verify] };\n}\nfunction getKeyAlgorithm(name) {\n  switch (name) {\n    case \"HS256\":\n      return {\n        name: \"HMAC\",\n        hash: {\n          name: \"SHA-256\"\n        }\n      };\n    case \"HS384\":\n      return {\n        name: \"HMAC\",\n        hash: {\n          name: \"SHA-384\"\n        }\n      };\n    case \"HS512\":\n      return {\n        name: \"HMAC\",\n        hash: {\n          name: \"SHA-512\"\n        }\n      };\n    case \"RS256\":\n      return {\n        name: \"RSASSA-PKCS1-v1_5\",\n        hash: {\n          name: \"SHA-256\"\n        }\n      };\n    case \"RS384\":\n      return {\n        name: \"RSASSA-PKCS1-v1_5\",\n        hash: {\n          name: \"SHA-384\"\n        }\n      };\n    case \"RS512\":\n      return {\n        name: \"RSASSA-PKCS1-v1_5\",\n        hash: {\n          name: \"SHA-512\"\n        }\n      };\n    case \"PS256\":\n      return {\n        name: \"RSA-PSS\",\n        hash: {\n          name: \"SHA-256\"\n        },\n        saltLength: 32\n      };\n    case \"PS384\":\n      return {\n        name: \"RSA-PSS\",\n        hash: {\n          name: \"SHA-384\"\n        },\n        saltLength: 48\n      };\n    case \"PS512\":\n      return {\n        name: \"RSA-PSS\",\n        hash: {\n          name: \"SHA-512\"\n        },\n        saltLength: 64\n      };\n    case \"ES256\":\n      return {\n        name: \"ECDSA\",\n        hash: {\n          name: \"SHA-256\"\n        },\n        namedCurve: \"P-256\"\n      };\n    case \"ES384\":\n      return {\n        name: \"ECDSA\",\n        hash: {\n          name: \"SHA-384\"\n        },\n        namedCurve: \"P-384\"\n      };\n    case \"ES512\":\n      return {\n        name: \"ECDSA\",\n        hash: {\n          name: \"SHA-512\"\n        },\n        namedCurve: \"P-521\"\n      };\n    case \"EdDSA\":\n      return {\n        name: \"Ed25519\",\n        namedCurve: \"Ed25519\"\n      };\n    default:\n      throw new JwtAlgorithmNotImplemented(name);\n  }\n}\nfunction isCryptoKey(key) {\n  const runtime = getRuntimeKey();\n  if (runtime === \"node\" && !!crypto.webcrypto) {\n    return key instanceof crypto.webcrypto.CryptoKey;\n  }\n  return key instanceof CryptoKey;\n}\nexport {\n  signing,\n  verifying\n};\n", "// src/utils/jwt/jwt.ts\nimport { decodeBase64Url, encodeBase64Url } from \"../../utils/encode.js\";\nimport { AlgorithmTypes } from \"./jwa.js\";\nimport { signing, verifying } from \"./jws.js\";\nimport {\n  JwtHeaderInvalid,\n  JwtHeaderRequiresKid,\n  JwtTokenExpired,\n  JwtTokenInvalid,\n  JwtTokenIssuedAt,\n  JwtTokenIssuer,\n  JwtTokenNotBefore,\n  JwtTokenSignatureMismatched\n} from \"./types.js\";\nimport { utf8Decoder, utf8Encoder } from \"./utf8.js\";\nvar encodeJwtPart = (part) => encodeBase64Url(utf8Encoder.encode(JSON.stringify(part)).buffer).replace(/=/g, \"\");\nvar encodeSignaturePart = (buf) => encodeBase64Url(buf).replace(/=/g, \"\");\nvar decodeJwtPart = (part) => JSON.parse(utf8Decoder.decode(decodeBase64Url(part)));\nfunction isTokenHeader(obj) {\n  if (typeof obj === \"object\" && obj !== null) {\n    const objWithAlg = obj;\n    return \"alg\" in objWithAlg && Object.values(AlgorithmTypes).includes(objWithAlg.alg) && (!(\"typ\" in objWithAlg) || objWithAlg.typ === \"JWT\");\n  }\n  return false;\n}\nvar sign = async (payload, privateKey, alg = \"HS256\") => {\n  const encodedPayload = encodeJwtPart(payload);\n  let encodedHeader;\n  if (typeof privateKey === \"object\" && \"alg\" in privateKey) {\n    alg = privateKey.alg;\n    encodedHeader = encodeJwtPart({ alg, typ: \"JWT\", kid: privateKey.kid });\n  } else {\n    encodedHeader = encodeJwtPart({ alg, typ: \"JWT\" });\n  }\n  const partialToken = `${encodedHeader}.${encodedPayload}`;\n  const signaturePart = await signing(privateKey, alg, utf8Encoder.encode(partialToken));\n  const signature = encodeSignaturePart(signaturePart);\n  return `${partialToken}.${signature}`;\n};\nvar verify = async (token, publicKey, algOrOptions) => {\n  const optsIn = typeof algOrOptions === \"string\" ? { alg: algOrOptions } : algOrOptions || {};\n  const opts = {\n    alg: optsIn.alg ?? \"HS256\",\n    iss: optsIn.iss,\n    nbf: optsIn.nbf ?? true,\n    exp: optsIn.exp ?? true,\n    iat: optsIn.iat ?? true\n  };\n  const tokenParts = token.split(\".\");\n  if (tokenParts.length !== 3) {\n    throw new JwtTokenInvalid(token);\n  }\n  const { header, payload } = decode(token);\n  if (!isTokenHeader(header)) {\n    throw new JwtHeaderInvalid(header);\n  }\n  const now = Date.now() / 1e3 | 0;\n  if (opts.nbf && payload.nbf && payload.nbf > now) {\n    throw new JwtTokenNotBefore(token);\n  }\n  if (opts.exp && payload.exp && payload.exp <= now) {\n    throw new JwtTokenExpired(token);\n  }\n  if (opts.iat && payload.iat && now < payload.iat) {\n    throw new JwtTokenIssuedAt(now, payload.iat);\n  }\n  if (opts.iss) {\n    if (!payload.iss) {\n      throw new JwtTokenIssuer(opts.iss, null);\n    }\n    if (typeof opts.iss === \"string\" && payload.iss !== opts.iss) {\n      throw new JwtTokenIssuer(opts.iss, payload.iss);\n    }\n    if (opts.iss instanceof RegExp && !opts.iss.test(payload.iss)) {\n      throw new JwtTokenIssuer(opts.iss, payload.iss);\n    }\n  }\n  const headerPayload = token.substring(0, token.lastIndexOf(\".\"));\n  const verified = await verifying(\n    publicKey,\n    opts.alg,\n    decodeBase64Url(tokenParts[2]),\n    utf8Encoder.encode(headerPayload)\n  );\n  if (!verified) {\n    throw new JwtTokenSignatureMismatched(token);\n  }\n  return payload;\n};\nvar verifyWithJwks = async (token, options, init) => {\n  const verifyOpts = options.verification || {};\n  const header = decodeHeader(token);\n  if (!isTokenHeader(header)) {\n    throw new JwtHeaderInvalid(header);\n  }\n  if (!header.kid) {\n    throw new JwtHeaderRequiresKid(header);\n  }\n  if (options.jwks_uri) {\n    const response = await fetch(options.jwks_uri, init);\n    if (!response.ok) {\n      throw new Error(`failed to fetch JWKS from ${options.jwks_uri}`);\n    }\n    const data = await response.json();\n    if (!data.keys) {\n      throw new Error('invalid JWKS response. \"keys\" field is missing');\n    }\n    if (!Array.isArray(data.keys)) {\n      throw new Error('invalid JWKS response. \"keys\" field is not an array');\n    }\n    if (options.keys) {\n      options.keys.push(...data.keys);\n    } else {\n      options.keys = data.keys;\n    }\n  } else if (!options.keys) {\n    throw new Error('verifyWithJwks requires options for either \"keys\" or \"jwks_uri\" or both');\n  }\n  const matchingKey = options.keys.find((key) => key.kid === header.kid);\n  if (!matchingKey) {\n    throw new JwtTokenInvalid(token);\n  }\n  return await verify(token, matchingKey, {\n    alg: matchingKey.alg || header.alg,\n    ...verifyOpts\n  });\n};\nvar decode = (token) => {\n  try {\n    const [h, p] = token.split(\".\");\n    const header = decodeJwtPart(h);\n    const payload = decodeJwtPart(p);\n    return {\n      header,\n      payload\n    };\n  } catch {\n    throw new JwtTokenInvalid(token);\n  }\n};\nvar decodeHeader = (token) => {\n  try {\n    const [h] = token.split(\".\");\n    return decodeJwtPart(h);\n  } catch {\n    throw new JwtTokenInvalid(token);\n  }\n};\nexport {\n  decode,\n  decodeHeader,\n  isTokenHeader,\n  sign,\n  verify,\n  verifyWithJwks\n};\n", "// src/utils/jwt/index.ts\nimport { decode, sign, verify, verifyWithJwks } from \"./jwt.js\";\nvar Jwt = { sign, verify, decode, verifyWithJwks };\nexport {\n  Jwt\n};\n", "// src/middleware/jwt/jwt.ts\nimport { getCookie, getSignedCookie } from \"../../helper/cookie/index.js\";\nimport { HTTPException } from \"../../http-exception.js\";\nimport { Jwt } from \"../../utils/jwt/index.js\";\nimport \"../../context.js\";\nvar jwt = (options) => {\n  const verifyOpts = options.verification || {};\n  if (!options || !options.secret) {\n    throw new Error('JWT auth middleware requires options for \"secret\"');\n  }\n  if (!crypto.subtle || !crypto.subtle.importKey) {\n    throw new Error(\"`crypto.subtle.importKey` is undefined. JWT auth middleware requires it.\");\n  }\n  return async function jwt2(ctx, next) {\n    const headerName = options.headerName || \"Authorization\";\n    const credentials = ctx.req.raw.headers.get(headerName);\n    let token;\n    if (credentials) {\n      const parts = credentials.split(/\\s+/);\n      if (parts.length !== 2) {\n        const errDescription = \"invalid credentials structure\";\n        throw new HTTPException(401, {\n          message: errDescription,\n          res: unauthorizedResponse({\n            ctx,\n            error: \"invalid_request\",\n            errDescription\n          })\n        });\n      } else {\n        token = parts[1];\n      }\n    } else if (options.cookie) {\n      if (typeof options.cookie == \"string\") {\n        token = getCookie(ctx, options.cookie);\n      } else if (options.cookie.secret) {\n        if (options.cookie.prefixOptions) {\n          token = await getSignedCookie(\n            ctx,\n            options.cookie.secret,\n            options.cookie.key,\n            options.cookie.prefixOptions\n          );\n        } else {\n          token = await getSignedCookie(ctx, options.cookie.secret, options.cookie.key);\n        }\n      } else {\n        if (options.cookie.prefixOptions) {\n          token = getCookie(ctx, options.cookie.key, options.cookie.prefixOptions);\n        } else {\n          token = getCookie(ctx, options.cookie.key);\n        }\n      }\n    }\n    if (!token) {\n      const errDescription = \"no authorization included in request\";\n      throw new HTTPException(401, {\n        message: errDescription,\n        res: unauthorizedResponse({\n          ctx,\n          error: \"invalid_request\",\n          errDescription\n        })\n      });\n    }\n    let payload;\n    let cause;\n    try {\n      payload = await Jwt.verify(token, options.secret, {\n        alg: options.alg,\n        ...verifyOpts\n      });\n    } catch (e) {\n      cause = e;\n    }\n    if (!payload) {\n      throw new HTTPException(401, {\n        message: \"Unauthorized\",\n        res: unauthorizedResponse({\n          ctx,\n          error: \"invalid_token\",\n          statusText: \"Unauthorized\",\n          errDescription: \"token verification failure\"\n        }),\n        cause\n      });\n    }\n    ctx.set(\"jwtPayload\", payload);\n    await next();\n  };\n};\nfunction unauthorizedResponse(opts) {\n  return new Response(\"Unauthorized\", {\n    status: 401,\n    statusText: opts.statusText,\n    headers: {\n      \"WWW-Authenticate\": `Bearer realm=\"${opts.ctx.req.url}\",error=\"${opts.error}\",error_description=\"${opts.errDescription}\"`\n    }\n  });\n}\nvar verifyWithJwks = Jwt.verifyWithJwks;\nvar verify = Jwt.verify;\nvar decode = Jwt.decode;\nvar sign = Jwt.sign;\nexport {\n  decode,\n  jwt,\n  sign,\n  verify,\n  verifyWithJwks\n};\n", "import { createMiddleware } from 'hono/factory';\nimport { verify } from 'hono/jwt';\n\n// Simple CORS middleware without hono/cors dependency\nexport const corsMiddleware = createMiddleware(async (c, next) => {\n  // Echo the Origin for better compatibility with credentialed requests and WebViews\n  const origin = c.req.header('Origin') || '*';\n  c.header('Access-Control-Allow-Origin', origin);\n  if (origin !== '*') {\n    c.header('Vary', 'Origin');\n  }\n  c.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\n  // If the browser sent Access-Control-Request-Headers, reflect them; otherwise provide a safe default\n  const reqHdrs = c.req.header('Access-Control-Request-Headers');\n  c.header('Access-Control-Allow-Headers', reqHdrs || 'Content-Type, Authorization, X-Session-ID');\n  // Only meaningful when the origin isn\u2019t '*'; harmless otherwise\n  c.header('Access-Control-Allow-Credentials', 'true');\n  c.header('Access-Control-Max-Age', '600');\n\n  // Handle preflight requests early\n  if (c.req.method === 'OPTIONS') {\n    return c.text('', 200);\n  }\n\n  await next();\n});\n\n// Error handling middleware\nexport const errorMiddleware = createMiddleware(async (c, next) => {\n  try {\n    await next();\n  } catch (error) {\n    console.error('API Error:', error);\n    \n    if (error instanceof Error) {\n      return c.json({ \n        error: 'Internal Server Error',\n        message: error.message \n      }, 500);\n    }\n    \n    return c.json({ \n      error: 'Internal Server Error',\n      message: 'An unexpected error occurred' \n    }, 500);\n  }\n});\n\n// Rate limiting middleware (enhanced and safer implementation)\ntype Bucket = { count: number; resetTime: number };\nconst requestCounts = new Map<string, Bucket>();\n\nexport const rateLimitMiddleware = createMiddleware(async (c, next) => {\n  const now = Date.now();\n  const windowMs = 15 * 60 * 1000; // 15 minutes\n  const path = c.req.path;\n  const method = c.req.method.toUpperCase();\n\n  // Skip rate limit for health checks and preflight already handled by CORS\n  if (path.endsWith('/health')) {\n    return next();\n  }\n\n  // Build a stable client key preference order:\n  // 1) Authenticated user id (from JWT)\n  // 2) CF-Connecting-IP or first X-Forwarded-For\n  // 3) Explicit X-Session-ID header (we will also send from client)\n  // 4) CF-Ray (per POP trace) or User-Agent as a last resort\n  let key: string | null = null;\n  const authHeader = c.req.header('Authorization');\n  if (authHeader?.startsWith('Bearer ')) {\n    const token = authHeader.substring('Bearer '.length);\n    try {\n      const decoded: any = await verify(token, c.env.JWT_SECRET);\n      if (decoded && typeof decoded.id === 'number') {\n        key = `user:${decoded.id}`;\n      }\n    } catch {\n      // ignore verify errors for rate limit keying\n    }\n  }\n  if (!key) {\n    const fwd = c.req.header('X-Forwarded-For');\n    const ip = c.req.header('CF-Connecting-IP') || (fwd ? fwd.split(',')[0].trim() : undefined);\n    if (ip) key = `ip:${ip}`;\n  }\n  if (!key) {\n    const sess = c.req.header('X-Session-ID');\n    if (sess) key = `sess:${sess}`;\n  }\n  if (!key) {\n    const ray = c.req.header('CF-Ray');\n    const ua = c.req.header('User-Agent');\n    if (ray) key = `ray:${ray}`;\n    else if (ua) key = `ua:${ua.substring(0, 64)}`; // cap length\n  }\n\n  // If we still can't find a stable key, don't rate limit this request to avoid global lockout\n  if (!key) {\n    return next();\n  }\n\n  // Higher limits for GET and notification endpoints, stricter for mutating requests\n  const isNotificationEndpoint = path.includes('/notifications/');\n  const isChatPoll = isNotificationEndpoint && (path.includes('/all') || path.includes('/total') || path.includes('/unread'));\n  let maxRequests = 0;\n  if (method === 'GET') {\n    maxRequests = isChatPoll ? 2000 : 1000;\n  } else {\n    maxRequests = 300; // POST/PUT/DELETE\n  }\n\n  let bucket = requestCounts.get(key);\n  if (!bucket || now > bucket.resetTime) {\n    bucket = { count: 1, resetTime: now + windowMs };\n    requestCounts.set(key, bucket);\n  } else {\n    bucket.count++;\n  }\n\n  // Set rate limit headers early so clients can read even on 429\n  c.header('X-RateLimit-Limit', String(maxRequests));\n  c.header('X-RateLimit-Remaining', String(Math.max(0, maxRequests - bucket.count)));\n  c.header('X-RateLimit-Reset', String(Math.ceil(bucket.resetTime / 1000)));\n\n  if (bucket.count > maxRequests) {\n    const retryAfterSec = Math.max(1, Math.ceil((bucket.resetTime - now) / 1000));\n    c.header('Retry-After', String(retryAfterSec));\n    console.log(`Rate limit 429 for key=${key} path=${path} method=${method} count=${bucket.count}/${maxRequests}`);\n    return c.json({\n      error: 'Rate limit exceeded',\n      message: `Too many requests. Please wait ${retryAfterSec}s and try again.`,\n      retryAfter: retryAfterSec\n    }, 429);\n  }\n\n  await next();\n});\n", "import { Hono } from 'hono';\nimport { sign, verify } from 'hono/jwt';\nimport { authMiddleware } from './middleware';\n\ninterface CloudflareEnv {\n  DB: D1Database;\n  JWT_SECRET: string;\n}\n\ninterface AuthUser {\n  id: number;\n  username: string;\n  isAdmin: boolean;\n}\n\n// Simple password hashing using Web Crypto API\nasync function hashPassword(password: string): Promise<string> {\n  const encoder = new TextEncoder();\n  const data = encoder.encode(password);\n  const hashBuffer = await crypto.subtle.digest('SHA-256', data);\n  const hashArray = Array.from(new Uint8Array(hashBuffer));\n  return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n}\n\nconst register = new Hono<{ \n  Bindings: CloudflareEnv;\n  Variables: { user: AuthUser };\n}>();\n\nregister.post('/', async (c) => {\n  try {\n    const { username, password, is_admin, user_type } = await c.req.json();\n    \n    // Check if this is an admin creating a user with admin privileges\n    const authHeader = c.req.header('Authorization');\n  let isAdmin = false;\n  let creatorIsAdmin = false; // whether requester is admin (for user_type decision)\n    \n    if (is_admin === true) {\n      // Admin privileges requested, verify if requester is an admin\n      if (!authHeader || !authHeader.startsWith('Bearer ')) {\n        return c.json({ error: 'Admin privileges cannot be assigned by non-admin users' }, 403);\n      }\n      \n      try {\n        const token = authHeader.split(' ')[1];\n        const decoded = await verify(token, c.env.JWT_SECRET);\n        if (!(decoded.isAdmin === true || decoded.isAdmin === 1)) {\n          return c.json({ error: 'Only administrators can create admin users' }, 403);\n        }\n        isAdmin = true;\n        creatorIsAdmin = true;\n      } catch (e) {\n        return c.json({ error: 'Invalid authorization for admin user creation' }, 401);\n      }\n    }\n    \n    // Convert isAdmin to integer for DB\n    const isAdminValue = isAdmin ? 1 : 0;\n\n    if (!username || !password) {\n      return c.json({ error: 'Username and password are required' }, 400);\n    }\n\n    if (password.length < 6) {\n      return c.json({ error: 'Password must be at least 6 characters long' }, 400);\n    }\n\n    // Determine account type: self-registered (public) vs admin-created (member by default)\n    // Admin may explicitly set user_type to 'public' or 'member'. Non-admins are forced to 'public'.\n    let userType: 'member' | 'public' = 'public';\n    if (creatorIsAdmin) {\n      if (user_type === 'public' || user_type === 'member') {\n        userType = user_type;\n      } else {\n        userType = 'member';\n      }\n    } else {\n      userType = 'public';\n    }\n\n    // For created (public) accounts, enforce username pattern [A-Za-z0-9._]+\n    const allowedUsername = /^[A-Za-z0-9._]+$/;\n    if (userType === 'public') {\n      if (!allowedUsername.test(username)) {\n        return c.json({ error: 'Username may only contain letters, numbers, underscores, and periods' }, 400);\n      }\n    }\n\n    const hashedPassword = await hashPassword(password);\n\n  const avatarValue = userType === 'member' ? `https://api.dicebear.com/7.x/initials/svg?seed=${username}` : null;\n    const { success, meta } = await c.env.DB.prepare(\n      'INSERT INTO users (username, password, avatar, is_admin, user_type) VALUES (?, ?, ?, ?, ?)'\n    )\n      .bind(\n        username,\n        hashedPassword,\n        avatarValue,\n        isAdminValue,\n        userType\n      )\n      .run();\n\n    if (success) {\n      const userId = meta.last_row_id;\n      const token = await sign(\n        { \n          id: userId, \n          username: username,\n          isAdmin: isAdminValue,\n          userType,\n          avatar: avatarValue || undefined,\n          iat: Math.floor(Date.now() / 1000),\n          exp: Math.floor(Date.now() / 1000) + (24 * 60 * 60) // 24 hours\n        }, \n        c.env.JWT_SECRET\n      );\n\n      return c.json({ \n        token,\n        user: {\n          id: userId,\n          username: username,\n          isAdmin: isAdminValue === 1,\n          userType,\n          avatar: avatarValue || undefined\n        },\n        message: 'Registration successful'\n      });\n    }\n\n    return c.json({ error: 'Failed to register user' }, 500);\n  } catch (e) {\n    if (e instanceof Error && e.message.includes('UNIQUE constraint failed')) {\n      return c.json({ error: 'Username already exists' }, 409);\n    }\n    console.error('Registration error:', e);\n    return c.json({ error: 'Internal server error' }, 500);\n  }\n});\n\nexport default register;\n", "import { Hono } from 'hono';\nimport { sign } from 'hono/jwt';\n\ninterface CloudflareEnv {\n  DB: D1Database;\n  JWT_SECRET: string;\n}\n\n// Simple password verification using Web Crypto API\nasync function verifyPassword(password: string, hashedPassword: string): Promise<boolean> {\n  const encoder = new TextEncoder();\n  const data = encoder.encode(password);\n  const hashBuffer = await crypto.subtle.digest('SHA-256', data);\n  const hashArray = Array.from(new Uint8Array(hashBuffer));\n  const computedHash = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n  return computedHash === hashedPassword;\n}\n\nconst login = new Hono<{ Bindings: CloudflareEnv }>();\n\nlogin.post('/', async (c) => {\n  try {\n    const { username, password } = await c.req.json();\n\n    if (!username || !password) {\n      return c.json({ error: 'Username and password are required' }, 400);\n    }\n\n    const user = await c.env.DB.prepare('SELECT * FROM users WHERE username = ?')\n      .bind(username)\n      .first() as { id: number; username: string; password: string; is_admin: number; avatar: string | null; user_type: string } | null;\n\n    if (!user) {\n      return c.json({ error: 'Invalid credentials' }, 401);\n    }\n\n    const validPassword = await verifyPassword(password, user.password as string);\n\n    if (!validPassword) {\n      return c.json({ error: 'Invalid credentials' }, 401);\n    }\n\n    const token = await sign(\n      { \n        id: user.id, \n        username: user.username,\n        isAdmin: user.is_admin,\n        userType: user.user_type,\n        iat: Math.floor(Date.now() / 1000),\n        exp: Math.floor(Date.now() / 1000) + (24 * 60 * 60) // 24 hours\n      }, \n      c.env.JWT_SECRET\n    );\n\n    return c.json({ \n      token,\n      user: {\n        id: user.id,\n        username: user.username,\n        isAdmin: !!user.is_admin,\n        userType: user.user_type\n      },\n      message: 'Login successful'\n    });\n  } catch (error) {\n    console.error('Login error:', error);\n    return c.json({ error: 'Internal server error' }, 500);\n  }\n});\n\nexport default login;\n", "import { createMiddleware } from 'hono/factory';\nimport { verify } from 'hono/jwt';\n\ninterface CloudflareEnv {\n  DB: D1Database;\n  JWT_SECRET: string;\n}\n\nexport interface AuthUser {\n  id: number;\n  username: string;\n  isAdmin: boolean;\n  userType?: 'member' | 'public';\n}\n\nexport const authMiddleware = createMiddleware<{ \n  Bindings: CloudflareEnv;\n  Variables: { user: AuthUser };\n}>(async (c, next) => {\n  const authHeader = c.req.header('Authorization');\n\n  if (!authHeader || !authHeader.startsWith('Bearer ')) {\n    return c.json({ error: 'Unauthorized' }, 401);\n  }\n\n  const token = authHeader.split(' ')[1];\n\n  try {\n    const decoded = await verify(token, c.env.JWT_SECRET);\n    const user: AuthUser = {\n      id: decoded.id as number,\n      username: decoded.username as string,\n      isAdmin: decoded.isAdmin as boolean,\n      userType: (decoded as any).userType as any\n    };\n    c.set('user', user);\n    await next();\n  } catch (e) {\n    return c.json({ error: 'Unauthorized' }, 401);\n  }\n});\n", "import { Hono } from 'hono';\nimport { authMiddleware } from '../auth/middleware';\n\ninterface CloudflareEnv {\n  DB: D1Database;\n  JWT_SECRET: string;\n}\n\ninterface AuthUser {\n  id: number;\n  username: string;\n  isAdmin: boolean;\n}\n\n// Simple password hashing using Web Crypto API\nasync function hashPassword(password: string): Promise<string> {\n  const encoder = new TextEncoder();\n  const data = encoder.encode(password);\n  const hashBuffer = await crypto.subtle.digest('SHA-256', data);\n  const hashArray = Array.from(new Uint8Array(hashBuffer));\n  return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n}\n\nconst users = new Hono<{ \n  Bindings: CloudflareEnv;\n  Variables: { user: AuthUser };\n}>();\n\nusers.use('*', authMiddleware);\n\nusers.get('/', async (c) => {\n  const user = c.get('user');\n\n  if (!user.isAdmin) {\n    return c.json({ error: 'Forbidden' }, 403);\n  }\n\n  try {\n    const type = c.req.query('user_type');\n    if (type === 'member' || type === 'public') {\n      const { results } = await c.env.DB.prepare(\n        'SELECT id, username, is_admin, created_at, avatar_color, user_type FROM users WHERE user_type = ? ORDER BY id ASC'\n      ).bind(type).all();\n      return c.json(results);\n    }\n    const { results } = await c.env.DB.prepare('SELECT id, username, is_admin, created_at, avatar_color, user_type FROM users ORDER BY id ASC').all();\n    return c.json(results);\n  } catch (error) {\n    console.error('Error fetching users:', error);\n    return c.json({ error: 'Internal server error' }, 500);\n  }\n});\n\n// Update user (for changing admin status, username, or password)\nusers.put('/:userId', async (c) => {\n  const currentUser = c.get('user');\n  if (!currentUser.isAdmin) {\n    return c.json({ error: 'Forbidden' }, 403);\n  }\n\n  const userId = parseInt(c.req.param('userId'), 10);\n  const body = await c.req.json();\n  \n  // Prevent changing your own admin status\n  if (userId === currentUser.id && body.is_admin !== undefined) {\n    return c.json({ error: 'Cannot modify your own admin status' }, 400);\n  }\n  \n  try {\n    const updates: string[] = [];\n    const values: any[] = [];\n\n    // Handle admin status update\n    if (body.is_admin !== undefined) {\n      const isAdmin = body.is_admin === true ? 1 : 0;\n      updates.push('is_admin = ?');\n      values.push(isAdmin);\n    }\n\n    // Handle username update\n    if (body.username !== undefined && body.username.trim() !== '') {\n      // Check if username already exists (excluding current user)\n      const existingUser = await c.env.DB.prepare('SELECT id FROM users WHERE username = ? AND id != ?')\n        .bind(body.username.trim(), userId)\n        .first();\n      \n      if (existingUser) {\n        return c.json({ error: 'Username already exists' }, 400);\n      }\n      \n      updates.push('username = ?');\n      values.push(body.username.trim());\n    }\n\n    // Handle password update\n    if (body.password !== undefined && body.password.trim() !== '') {\n      const hashedPassword = await hashPassword(body.password.trim());\n      updates.push('password = ?');\n      values.push(hashedPassword);\n    }\n\n    if (updates.length === 0) {\n      return c.json({ error: 'No valid fields to update' }, 400);\n    }\n\n    // Add user ID to the end of values array\n    values.push(userId);\n\n    const query = `UPDATE users SET ${updates.join(', ')} WHERE id = ?`;\n    await c.env.DB.prepare(query).bind(...values).run();\n    \n    return c.json({ success: true });\n  } catch (error) {\n    console.error('Error updating user:', error);\n    return c.json({ error: 'Internal server error' }, 500);\n  }\n});\n\n// Delete user\nusers.delete('/:userId', async (c) => {\n  const currentUser = c.get('user');\n  if (!currentUser.isAdmin) {\n    return c.json({ error: 'Forbidden' }, 403);\n  }\n\n  const userId = parseInt(c.req.param('userId'), 10);\n  \n  // Prevent deleting your own account\n  if (userId === currentUser.id) {\n    return c.json({ error: 'Cannot delete your own account' }, 400);\n  }\n  \n  try {\n    await c.env.DB.prepare('DELETE FROM users WHERE id = ?')\n      .bind(userId)\n      .run();\n    \n    return c.json({ success: true });\n  } catch (error) {\n    console.error('Error deleting user:', error);\n    return c.json({ error: 'Internal server error' }, 500);\n  }\n});\n\nexport default users;\n", "import { Hono } from 'hono';\nimport { authMiddleware } from '../auth/middleware';\n\ninterface CloudflareEnv {\n  DB: D1Database;\n  JWT_SECRET: string;\n}\n\ninterface AuthUser {\n  id: number;\n  username: string;\n  isAdmin: boolean;\n}\n\ninterface RecurrenceConfig {\n  type: 'daily' | 'weekly' | 'monthly' | 'yearly' | 'custom';\n  interval: number;\n  daysOfWeek?: string[];\n  dayOfMonth?: number;\n  weekOfMonth?: number;\n  dayOfWeek?: string;\n  months?: number[];\n  endType: 'never' | 'after_occurrences' | 'end_date';\n  endDate?: string;\n  occurrences?: number;\n  exceptions?: string[];\n}\n\nconst calendar = new Hono<{ \n  Bindings: CloudflareEnv;\n  Variables: { user: AuthUser };\n}>();\n\ncalendar.use('*', authMiddleware);\n\n// Utility function to generate recurring event instances\nfunction generateRecurringInstances(baseEvent: any, startDate: Date, endDate: Date): any[] {\n  if (!baseEvent.is_recurring) {\n    return [baseEvent];\n  }\n\n  const instances = [];\n  // Fix timezone issue by parsing date as local date instead of UTC\n  const eventStartDate = new Date(baseEvent.event_date + 'T00:00:00');\n  let currentDate = new Date(Math.max(eventStartDate.getTime(), startDate.getTime()));\n  let occurrenceCount = 0;\n  const maxOccurrences = baseEvent.recurrence_occurrences || 1000;\n\n  const config = {\n    type: baseEvent.recurrence_type,\n    interval: baseEvent.recurrence_interval || 1,\n    daysOfWeek: baseEvent.recurrence_days_of_week ? JSON.parse(baseEvent.recurrence_days_of_week) : undefined,\n    dayOfMonth: baseEvent.recurrence_day_of_month,\n    weekOfMonth: baseEvent.recurrence_week_of_month,\n    dayOfWeek: baseEvent.recurrence_day_of_week,\n    months: baseEvent.recurrence_months ? JSON.parse(baseEvent.recurrence_months) : undefined,\n    endType: baseEvent.recurrence_end_type || 'never',\n    endDate: baseEvent.recurrence_end_date,\n    occurrences: baseEvent.recurrence_occurrences,\n    exceptions: baseEvent.recurrence_exceptions ? JSON.parse(baseEvent.recurrence_exceptions) : []\n  };\n\n  while (currentDate <= endDate && occurrenceCount < maxOccurrences) {\n    if (config.endType === 'end_date' && config.endDate) {\n      const endDateObj = new Date(config.endDate + 'T00:00:00');\n      if (currentDate > endDateObj) break;\n    }\n    \n    if (config.endType === 'after_occurrences' && occurrenceCount >= maxOccurrences) {\n      break;\n    }\n\n    const dateStr = currentDate.getFullYear() + '-' + \n                    String(currentDate.getMonth() + 1).padStart(2, '0') + '-' + \n                    String(currentDate.getDate()).padStart(2, '0');\n    if (config.exceptions?.includes(dateStr)) {\n      currentDate = getNextOccurrence(currentDate, config);\n      continue;\n    }\n\n    if (isValidOccurrence(currentDate, eventStartDate, config)) {\n      instances.push({\n        ...baseEvent,\n        id: `${baseEvent.id}_${dateStr}`, // Unique ID for recurring instance\n        event_date: dateStr,\n        parent_event_id: baseEvent.id,\n        is_recurring_instance: true,\n        is_recurring: false // Instances themselves are not recurring\n      });\n      occurrenceCount++;\n    }\n\n    currentDate = getNextOccurrence(currentDate, config);\n  }\n\n  return instances;\n}\n\nfunction isValidOccurrence(date: Date, startDate: Date, config: any): boolean {\n  const daysDiff = Math.floor((date.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));\n  const DAY_NAMES = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\n\n  switch (config.type) {\n    case 'daily':\n      return daysDiff >= 0 && daysDiff % config.interval === 0;\n\n    case 'weekly':\n      if (daysDiff < 0) return false;\n      const weeksDiff = Math.floor(daysDiff / 7);\n      if (weeksDiff % config.interval !== 0) return false;\n      \n      if (config.daysOfWeek && config.daysOfWeek.length > 0) {\n        const dayName = DAY_NAMES[date.getDay()];\n        return config.daysOfWeek.includes(dayName);\n      }\n      return date.getDay() === startDate.getDay();\n\n    case 'monthly':\n      if (daysDiff < 0) return false;\n      \n      if (config.dayOfMonth) {\n        const monthsDiff = (date.getFullYear() - startDate.getFullYear()) * 12 + \n                          (date.getMonth() - startDate.getMonth());\n        if (monthsDiff % config.interval !== 0) return false;\n        return date.getDate() === config.dayOfMonth;\n      }\n      return false;\n\n    case 'yearly':\n      if (daysDiff < 0) return false;\n      const yearsDiff = date.getFullYear() - startDate.getFullYear();\n      if (yearsDiff % config.interval !== 0) return false;\n      \n      if (config.months && config.months.length > 0) {\n        return config.months.includes(date.getMonth() + 1) && \n               date.getDate() === startDate.getDate();\n      }\n      return date.getMonth() === startDate.getMonth() && \n             date.getDate() === startDate.getDate();\n\n    default:\n      return false;\n  }\n}\n\nfunction getNextOccurrence(currentDate: Date, config: any): Date {\n  const nextDate = new Date(currentDate);\n  const DAY_NAMES = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\n\n  switch (config.type) {\n    case 'daily':\n      nextDate.setDate(nextDate.getDate() + config.interval);\n      break;\n\n    case 'weekly':\n      if (config.daysOfWeek && config.daysOfWeek.length > 1) {\n        let found = false;\n        for (let i = 1; i <= 7; i++) {\n          const testDate = new Date(currentDate);\n          testDate.setDate(testDate.getDate() + i);\n          const dayName = DAY_NAMES[testDate.getDay()];\n          if (config.daysOfWeek.includes(dayName)) {\n            nextDate.setTime(testDate.getTime());\n            found = true;\n            break;\n          }\n        }\n        if (!found) {\n          nextDate.setDate(nextDate.getDate() + 7 * config.interval);\n        }\n      } else {\n        nextDate.setDate(nextDate.getDate() + 7 * config.interval);\n      }\n      break;\n\n    case 'monthly':\n      nextDate.setMonth(nextDate.getMonth() + config.interval);\n      break;\n\n    case 'yearly':\n      nextDate.setFullYear(nextDate.getFullYear() + config.interval);\n      break;\n\n    default:\n      nextDate.setDate(nextDate.getDate() + 1);\n  }\n\n  return nextDate;\n}\n\ncalendar.get('/', async (c) => {\n  try {\n    const startDate = c.req.query('start');\n    const endDate = c.req.query('end');\n    \n    // Get base recurring events and non-recurring events\n    let query = `\n      SELECT * FROM calendar_events \n      WHERE (parent_event_id IS NULL OR parent_event_id = 0)\n    `;\n    \n    if (startDate && endDate) {\n      query += ` AND (\n        (is_recurring = 0 AND event_date BETWEEN ? AND ?) OR\n        (is_recurring = 1 AND (\n          recurrence_end_date IS NULL OR \n          recurrence_end_date >= ? OR\n          event_date <= ?\n        ))\n      )`;\n    }\n    \n    query += ` ORDER BY event_date ASC, event_time ASC`;\n    \n    const params = startDate && endDate ? [startDate, endDate, startDate, endDate] : [];\n    const { results } = await c.env.DB.prepare(query).bind(...params).all();\n    \n    // Also get standalone instances (modified recurring instances) in the date range\n    let standaloneInstances = [];\n    if (startDate && endDate) {\n      const { results: standalone } = await c.env.DB.prepare(`\n        SELECT * FROM calendar_events \n        WHERE parent_event_id IS NOT NULL AND parent_event_id != 0 \n        AND event_date BETWEEN ? AND ?\n        ORDER BY event_date ASC, event_time ASC\n      `).bind(startDate, endDate).all();\n      standaloneInstances = standalone;\n    }\n    \n    // Generate recurring event instances if date range is provided\n    if (startDate && endDate) {\n      const expandedEvents = [];\n      const start = new Date(startDate + 'T00:00:00');\n      const end = new Date(endDate + 'T23:59:59');\n      \n      for (const event of results) {\n        if (event.is_recurring) {\n          const instances = generateRecurringInstances(event, start, end);\n          expandedEvents.push(...instances);\n        } else {\n          expandedEvents.push(event);\n        }\n      }\n      \n      // Add standalone instances (these are modified recurring instances)\n      expandedEvents.push(...standaloneInstances);\n      \n      return c.json(expandedEvents.sort((a, b) => {\n        const dateA = new Date(a.event_date + ' ' + (a.event_time || '00:00'));\n        const dateB = new Date(b.event_date + ' ' + (b.event_time || '00:00'));\n        return dateA.getTime() - dateB.getTime();\n      }));\n    }\n    \n    return c.json(results);\n  } catch (error) {\n    console.error('Error fetching calendar events:', error);\n    return c.json({ error: 'Internal server error' }, 500);\n  }\n});\n\ncalendar.post('/', async (c) => {\n  try {\n    const user = c.get('user');\n    const { \n      title, \n      description, \n      event_date, \n      event_time, \n      event_end_time,\n      location, \n      is_recurring, \n      recurrence \n    } = await c.req.json();\n\n    if (!title || !event_date) {\n      return c.json({ error: 'Missing required fields: title, event_date' }, 400);\n    }\n\n    // Validate date format (YYYY-MM-DD)\n    if (!/^\\d{4}-\\d{2}-\\d{2}$/.test(event_date)) {\n      return c.json({ error: 'Invalid date format. Use YYYY-MM-DD' }, 400);\n    }\n\n    // Validate time format if provided (HH:MM)\n    if (event_time && !/^\\d{2}:\\d{2}$/.test(event_time)) {\n      return c.json({ error: 'Invalid time format. Use HH:MM' }, 400);\n    }\n\n    if (event_end_time && !/^\\d{2}:\\d{2}$/.test(event_end_time)) {\n      return c.json({ error: 'Invalid end time format. Use HH:MM' }, 400);\n    }\n\n    // Validate recurrence config if recurring\n    if (is_recurring && recurrence) {\n      const validTypes = ['daily', 'weekly', 'monthly', 'yearly', 'custom'];\n      if (!validTypes.includes(recurrence.type)) {\n        return c.json({ error: 'Invalid recurrence type' }, 400);\n      }\n\n      if (recurrence.endType === 'end_date' && recurrence.endDate) {\n        if (!/^\\d{4}-\\d{2}-\\d{2}$/.test(recurrence.endDate)) {\n          return c.json({ error: 'Invalid recurrence end date format. Use YYYY-MM-DD' }, 400);\n        }\n      }\n    }\n\n    // Prepare recurring event fields\n    const recurrenceFields = is_recurring && recurrence ? {\n      is_recurring: 1,\n      recurrence_type: recurrence.type,\n      recurrence_interval: recurrence.interval || 1,\n      recurrence_days_of_week: recurrence.daysOfWeek ? JSON.stringify(recurrence.daysOfWeek) : null,\n      recurrence_day_of_month: recurrence.dayOfMonth || null,\n      recurrence_week_of_month: recurrence.weekOfMonth || null,\n      recurrence_day_of_week: recurrence.dayOfWeek || null,\n      recurrence_months: recurrence.months ? JSON.stringify(recurrence.months) : null,\n      recurrence_end_type: recurrence.endType || 'never',\n      recurrence_end_date: recurrence.endDate || null,\n      recurrence_occurrences: recurrence.occurrences || null,\n      recurrence_exceptions: recurrence.exceptions ? JSON.stringify(recurrence.exceptions) : null\n    } : {\n      is_recurring: 0,\n      recurrence_type: null,\n      recurrence_interval: null,\n      recurrence_days_of_week: null,\n      recurrence_day_of_month: null,\n      recurrence_week_of_month: null,\n      recurrence_day_of_week: null,\n      recurrence_months: null,\n      recurrence_end_type: null,\n      recurrence_end_date: null,\n      recurrence_occurrences: null,\n      recurrence_exceptions: null\n    };\n\n    const { success } = await c.env.DB.prepare(`\n      INSERT INTO calendar_events (\n        title, description, event_date, event_time, event_end_time, location, created_by,\n        is_recurring, recurrence_type, recurrence_interval, recurrence_days_of_week,\n        recurrence_day_of_month, recurrence_week_of_month, recurrence_day_of_week,\n        recurrence_months, recurrence_end_type, recurrence_end_date, \n        recurrence_occurrences, recurrence_exceptions\n      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n    `)\n      .bind(\n        title, \n        description || null, \n        event_date, \n        event_time || null, \n        event_end_time || null,\n        location || null, \n        user.id,\n        recurrenceFields.is_recurring,\n        recurrenceFields.recurrence_type,\n        recurrenceFields.recurrence_interval,\n        recurrenceFields.recurrence_days_of_week,\n        recurrenceFields.recurrence_day_of_month,\n        recurrenceFields.recurrence_week_of_month,\n        recurrenceFields.recurrence_day_of_week,\n        recurrenceFields.recurrence_months,\n        recurrenceFields.recurrence_end_type,\n        recurrenceFields.recurrence_end_date,\n        recurrenceFields.recurrence_occurrences,\n        recurrenceFields.recurrence_exceptions\n      )\n      .run();\n\n    if (success) {\n      return c.json({ message: 'Event created successfully' });\n    }\n\n    return c.json({ error: 'Failed to create event' }, 500);\n  } catch (error) {\n    console.error('Error creating event:', error);\n    return c.json({ error: 'Internal server error' }, 500);\n  }\n});\n\n// Get individual event by ID\ncalendar.get('/:id', async (c) => {\n  try {\n    const { id } = c.req.param();\n    \n    const { results } = await c.env.DB.prepare(\n      'SELECT * FROM calendar_events WHERE id = ?'\n    ).bind(id).all();\n    \n    if (results.length === 0) {\n      return c.json({ error: 'Event not found' }, 404);\n    }\n    \n    return c.json(results[0]);\n  } catch (error) {\n    console.error('Error fetching event:', error);\n    return c.json({ error: 'Internal server error' }, 500);\n  }\n});\n\ncalendar.put('/:id', async (c) => {\n  try {\n    const { id } = c.req.param();\n    const { \n      title, \n      description, \n      event_date, \n      event_time, \n      event_end_time,\n      location, \n      is_recurring, \n      recurrence,\n      update_series,\n      original_instance_date\n    } = await c.req.json();\n\n    if (!title || !event_date) {\n      return c.json({ error: 'Missing required fields: title, event_date' }, 400);\n    }\n\n    // Validate date format (YYYY-MM-DD)\n    if (!/^\\d{4}-\\d{2}-\\d{2}$/.test(event_date)) {\n      return c.json({ error: 'Invalid date format. Use YYYY-MM-DD' }, 400);\n    }\n\n    // Validate time format if provided (HH:MM)\n    if (event_time && !/^\\d{2}:\\d{2}$/.test(event_time)) {\n      return c.json({ error: 'Invalid time format. Use HH:MM' }, 400);\n    }\n\n    if (event_end_time && !/^\\d{2}:\\d{2}$/.test(event_end_time)) {\n      return c.json({ error: 'Invalid end time format. Use HH:MM' }, 400);\n    }\n\n    // Check if this is a recurring event instance\n    const { results: existingEvents } = await c.env.DB.prepare(\n      'SELECT * FROM calendar_events WHERE id = ?'\n    ).bind(id).all();\n\n    if (existingEvents.length === 0) {\n      return c.json({ error: 'Event not found' }, 404);\n    }\n\n    const existingEvent = existingEvents[0];\n    \n    // Debug logging\n    console.log('PUT /calendar/:id Debug Info:');\n    console.log('ID:', id);\n    console.log('original_instance_date:', original_instance_date);\n    console.log('update_series:', update_series);\n    console.log('existingEvent.is_recurring:', existingEvent.is_recurring);\n    console.log('existingEvent.parent_event_id:', existingEvent.parent_event_id);\n    console.log('existingEvent.recurrence_exceptions:', existingEvent.recurrence_exceptions);\n    \n    // Handle different update scenarios\n    if (original_instance_date && !update_series) {\n      // Editing a single recurring instance - create a new standalone event\n      // and add the original date to the parent's exceptions\n      \n      const parentEvent = existingEvent;\n      \n      // Check if this specific date already has an exception or standalone event\n      const { results: existingStandalone } = await c.env.DB.prepare(\n        'SELECT * FROM calendar_events WHERE parent_event_id = ? AND event_date = ?'\n      ).bind(id, original_instance_date).all();\n      \n      if (existingStandalone.length > 0) {\n        // Update the existing standalone event instead of creating a new one\n        const { success } = await c.env.DB.prepare(`\n          UPDATE calendar_events SET \n            title = ?, description = ?, event_date = ?, event_time = ?, \n            event_end_time = ?, location = ?, updated_at = CURRENT_TIMESTAMP\n          WHERE id = ?\n        `).bind(\n          title,\n          description || null,\n          event_date,\n          event_time || null,\n          event_end_time || null,\n          location || null,\n          existingStandalone[0].id\n        ).run();\n        \n        if (success) {\n          return c.json({ message: 'Recurring instance updated successfully' });\n        }\n        return c.json({ error: 'Failed to update recurring instance' }, 500);\n      } else {\n        // Add the original instance date to exceptions and create new standalone event\n        const currentExceptions = parentEvent.recurrence_exceptions ? \n          JSON.parse(parentEvent.recurrence_exceptions as string) : [];\n        const updatedExceptions = [...currentExceptions];\n        \n        if (!updatedExceptions.includes(original_instance_date)) {\n          updatedExceptions.push(original_instance_date);\n        }\n        \n        // Update the parent event to include the new exception\n        await c.env.DB.prepare(`\n          UPDATE calendar_events SET \n            recurrence_exceptions = ?,\n            updated_at = CURRENT_TIMESTAMP\n          WHERE id = ?\n        `).bind(JSON.stringify(updatedExceptions), id).run();\n        \n        // Create a new standalone event for the modified instance\n        const { success } = await c.env.DB.prepare(`\n          INSERT INTO calendar_events (\n            title, description, event_date, event_time, event_end_time, location, \n            created_by, is_recurring, parent_event_id\n          ) VALUES (?, ?, ?, ?, ?, ?, ?, 0, ?)\n        `).bind(\n          title,\n          description || null,\n          event_date,\n          event_time || null,\n          event_end_time || null,\n          location || null,\n          parentEvent.created_by,\n          id // Reference to parent for tracking\n        ).run();\n        \n        if (success) {\n          return c.json({ message: 'Recurring instance updated successfully' });\n        }\n        return c.json({ error: 'Failed to update recurring instance' }, 500);\n      }\n      \n    } else {\n      // Either updating the entire series or a regular event\n      // If we have original_instance_date, it means we're editing from a recurring instance\n      // and the ID is already the parent event ID\n      const targetId = id;\n      \n      console.log('Updating series/regular event:');\n      console.log('targetId:', targetId);\n      console.log('is_recurring:', is_recurring);\n      console.log('recurrence provided:', !!recurrence);\n\n      // Prepare recurring event fields\n      const recurrenceFields = is_recurring && recurrence ? {\n        is_recurring: 1,\n        recurrence_type: recurrence.type,\n        recurrence_interval: recurrence.interval || 1,\n        recurrence_days_of_week: recurrence.daysOfWeek ? JSON.stringify(recurrence.daysOfWeek) : null,\n        recurrence_day_of_month: recurrence.dayOfMonth || null,\n        recurrence_week_of_month: recurrence.weekOfMonth || null,\n        recurrence_day_of_week: recurrence.dayOfWeek || null,\n        recurrence_months: recurrence.months ? JSON.stringify(recurrence.months) : null,\n        recurrence_end_type: recurrence.endType || 'never',\n        recurrence_end_date: recurrence.endDate || null,\n        recurrence_occurrences: recurrence.occurrences || null,\n        // Always preserve existing exceptions when updating a series\n        recurrence_exceptions: existingEvent.recurrence_exceptions\n      } : {\n        is_recurring: 0,\n        recurrence_type: null,\n        recurrence_interval: null,\n        recurrence_days_of_week: null,\n        recurrence_day_of_month: null,\n        recurrence_week_of_month: null,\n        recurrence_day_of_week: null,\n        recurrence_months: null,\n        recurrence_end_type: null,\n        recurrence_end_date: null,\n        recurrence_occurrences: null,\n        recurrence_exceptions: null\n      };\n      \n      console.log('recurrenceFields.recurrence_exceptions:', recurrenceFields.recurrence_exceptions);\n      console.log('About to update event with targetId:', targetId);\n\n      const { success } = await c.env.DB.prepare(`\n        UPDATE calendar_events SET \n          title = ?, description = ?, event_time = ?, event_end_time = ?, \n          location = ?, updated_at = CURRENT_TIMESTAMP,\n          is_recurring = ?, recurrence_type = ?, recurrence_interval = ?, \n          recurrence_days_of_week = ?, recurrence_day_of_month = ?, \n          recurrence_week_of_month = ?, recurrence_day_of_week = ?, \n          recurrence_months = ?, recurrence_end_type = ?, recurrence_end_date = ?, \n          recurrence_occurrences = ?, recurrence_exceptions = ?\n        WHERE id = ?\n      `)\n        .bind(\n          title, \n          description || null, \n          event_time || null, \n          event_end_time || null,\n          location || null,\n          recurrenceFields.is_recurring,\n          recurrenceFields.recurrence_type,\n          recurrenceFields.recurrence_interval,\n          recurrenceFields.recurrence_days_of_week,\n          recurrenceFields.recurrence_day_of_month,\n          recurrenceFields.recurrence_week_of_month,\n          recurrenceFields.recurrence_day_of_week,\n          recurrenceFields.recurrence_months,\n          recurrenceFields.recurrence_end_type,\n          recurrenceFields.recurrence_end_date,\n          recurrenceFields.recurrence_occurrences,\n          recurrenceFields.recurrence_exceptions,\n          targetId\n        )\n        .run();\n\n      if (success) {\n        return c.json({ message: 'Event updated successfully' });\n      }\n      return c.json({ error: 'Failed to update event' }, 500);\n    }\n  } catch (error) {\n    console.error('Error updating event:', error);\n    return c.json({ error: 'Internal server error' }, 500);\n  }\n});\n\ncalendar.delete('/:id', async (c) => {\n  try {\n    const { id } = c.req.param();\n    const { delete_series, exception_date } = await c.req.json().catch(() => ({}));\n\n    // Check if this is a recurring event instance\n    const { results: existingEvents } = await c.env.DB.prepare(\n      'SELECT * FROM calendar_events WHERE id = ?'\n    ).bind(id).all();\n\n    if (existingEvents.length === 0) {\n      return c.json({ error: 'Event not found' }, 404);\n    }\n\n    const existingEvent = existingEvents[0];\n\n    // Handle recurring event instance deletion\n    if (exception_date && !delete_series) {\n      // This is deleting a single instance from a recurring series\n      let parentEventId = existingEvent.parent_event_id || id;\n      \n      // Get the parent event\n      const { results: parentEvents } = await c.env.DB.prepare(\n        'SELECT * FROM calendar_events WHERE id = ?'\n      ).bind(parentEventId).all();\n\n      if (parentEvents.length > 0) {\n        const parentEvent = parentEvents[0];\n        const exceptions = parentEvent.recurrence_exceptions ? \n          JSON.parse(parentEvent.recurrence_exceptions as string) : [];\n        \n        if (!exceptions.includes(exception_date)) {\n          exceptions.push(exception_date);\n          \n          await c.env.DB.prepare(\n            'UPDATE calendar_events SET recurrence_exceptions = ? WHERE id = ?'\n          ).bind(JSON.stringify(exceptions), parentEventId).run();\n        }\n\n        return c.json({ message: 'Event occurrence deleted successfully' });\n      }\n    }\n\n    // Handle series deletion or regular event deletion\n    if (delete_series) {\n      // Delete the entire recurring series - the ID should already be the parent event ID\n      const { success } = await c.env.DB.prepare('DELETE FROM calendar_events WHERE id = ?')\n        .bind(id)\n        .run();\n\n      if (success) {\n        // Also delete any standalone instances that were created from this series\n        await c.env.DB.prepare('DELETE FROM calendar_events WHERE parent_event_id = ?')\n          .bind(id)\n          .run();\n        \n        return c.json({ message: 'Event series deleted successfully' });\n      }\n    } else {\n      // Delete just this single event (could be a regular event or standalone instance)\n      const { success } = await c.env.DB.prepare('DELETE FROM calendar_events WHERE id = ?')\n        .bind(id)\n        .run();\n\n      if (success) {\n        return c.json({ message: 'Event deleted successfully' });\n      }\n    }\n\n    return c.json({ error: 'Failed to delete event' }, 500);\n  } catch (error) {\n    console.error('Error deleting event:', error);\n    return c.json({ error: 'Internal server error' }, 500);\n  }\n});\n\n// Add exception to recurring event\ncalendar.post('/:id/exception', async (c) => {\n  try {\n    const { id } = c.req.param();\n    const { exception_date } = await c.req.json();\n\n    if (!exception_date) {\n      return c.json({ error: 'Missing required field: exception_date' }, 400);\n    }\n\n    // Validate date format\n    if (!/^\\d{4}-\\d{2}-\\d{2}$/.test(exception_date)) {\n      return c.json({ error: 'Invalid date format. Use YYYY-MM-DD' }, 400);\n    }\n\n    const { results: events } = await c.env.DB.prepare(\n      'SELECT * FROM calendar_events WHERE id = ?'\n    ).bind(id).all();\n\n    if (events.length === 0) {\n      return c.json({ error: 'Event not found' }, 404);\n    }\n\n    const event = events[0];\n    if (!event.is_recurring) {\n      return c.json({ error: 'Event is not recurring' }, 400);\n    }\n\n    const exceptions = event.recurrence_exceptions ? \n      JSON.parse(event.recurrence_exceptions as string) : [];\n    \n    if (!exceptions.includes(exception_date)) {\n      exceptions.push(exception_date);\n      \n      const { success } = await c.env.DB.prepare(\n        'UPDATE calendar_events SET recurrence_exceptions = ? WHERE id = ?'\n      ).bind(JSON.stringify(exceptions), id).run();\n\n      if (success) {\n        return c.json({ message: 'Exception added successfully' });\n      }\n    }\n\n    return c.json({ message: 'Exception already exists or failed to add' });\n  } catch (error) {\n    console.error('Error adding exception:', error);\n    return c.json({ error: 'Internal server error' }, 500);\n  }\n});\n\n// Remove exception from recurring event\ncalendar.delete('/:id/exception', async (c) => {\n  try {\n    const { id } = c.req.param();\n    const { exception_date } = await c.req.json();\n\n    if (!exception_date) {\n      return c.json({ error: 'Missing required field: exception_date' }, 400);\n    }\n\n    const { results: events } = await c.env.DB.prepare(\n      'SELECT * FROM calendar_events WHERE id = ?'\n    ).bind(id).all();\n\n    if (events.length === 0) {\n      return c.json({ error: 'Event not found' }, 404);\n    }\n\n    const event = events[0];\n    if (!event.is_recurring) {\n      return c.json({ error: 'Event is not recurring' }, 400);\n    }\n\n    const exceptions = event.recurrence_exceptions ? \n      JSON.parse(event.recurrence_exceptions as string) : [];\n    \n    const updatedExceptions = exceptions.filter((date: string) => date !== exception_date);\n    \n    const { success } = await c.env.DB.prepare(\n      'UPDATE calendar_events SET recurrence_exceptions = ? WHERE id = ?'\n    ).bind(JSON.stringify(updatedExceptions), id).run();\n\n    if (success) {\n      return c.json({ message: 'Exception removed successfully' });\n    }\n\n    return c.json({ error: 'Failed to remove exception' }, 500);\n  } catch (error) {\n    console.error('Error removing exception:', error);\n    return c.json({ error: 'Internal server error' }, 500);\n  }\n});\n\n// Test endpoint to check recurring event generation\ncalendar.get('/test/:id', async (c) => {\n  try {\n    const { id } = c.req.param();\n    const startDate = new Date();\n    const endDate = new Date();\n    endDate.setMonth(endDate.getMonth() + 3); // 3 months ahead\n\n    const { results } = await c.env.DB.prepare(\n      'SELECT * FROM calendar_events WHERE id = ?'\n    ).bind(id).all();\n\n    if (results.length === 0) {\n      return c.json({ error: 'Event not found' }, 404);\n    }\n\n    const event = results[0];\n    const instances = generateRecurringInstances(event, startDate, endDate);\n\n    return c.json({\n      baseEvent: event,\n      generatedInstances: instances,\n      count: instances.length\n    });\n  } catch (error) {\n    console.error('Error testing recurring event:', error);\n    return c.json({ error: 'Internal server error' }, 500);\n  }\n});\n\nexport default calendar;\n", "import { Context } from 'hono';\n\ntype PushData = Record<string, string | number | boolean | null | undefined>;\n\nasync function getUserDeviceTokens(c: Context, userIds: number[]): Promise<string[]> {\n  if (!userIds.length) return [];\n  const placeholders = userIds.map(() => '?').join(',');\n  const { results } = await c.env.DB.prepare(\n    `SELECT token FROM user_devices WHERE user_id IN (${placeholders})`\n  ).bind(...userIds).all();\n  return ((results as any[]) || []).map(r => (r as any).token).filter(Boolean);\n}\n\nasync function filterMutedUsers(c: Context, channelId: string, userIds: number[]): Promise<number[]> {\n  if (!userIds.length) return [];\n  const placeholders = userIds.map(() => '?').join(',');\n  const { results } = await c.env.DB.prepare(\n    `SELECT user_id FROM user_notification_settings WHERE channel_id = ? AND muted = 1 AND user_id IN (${placeholders})`\n  ).bind(channelId, ...userIds).all();\n  const mutedSet = new Set(((results as any[]) || []).map(r => Number((r as any).user_id)));\n  return userIds.filter(id => !mutedSet.has(id));\n}\n\n// --- FCM HTTP v1 helpers (Service Account based) ---\nfunction base64url(input: ArrayBuffer | string): string {\n  let bytes: Uint8Array;\n  if (typeof input === 'string') {\n    bytes = new TextEncoder().encode(input);\n  } else {\n    bytes = new Uint8Array(input);\n  }\n  let binary = '';\n  for (let i = 0; i < bytes.byteLength; i++) binary += String.fromCharCode(bytes[i]);\n  const b64 = btoa(binary);\n  return b64.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=+$/, '');\n}\n\nfunction pemToArrayBuffer(pem: string): ArrayBuffer {\n  const b64 = pem.replace('-----BEGIN PRIVATE KEY-----', '')\n    .replace('-----END PRIVATE KEY-----', '')\n    .replace(/\\r?\\n/g, '');\n  const raw = atob(b64);\n  const arr = new Uint8Array(raw.length);\n  for (let i = 0; i < raw.length; i++) arr[i] = raw.charCodeAt(i);\n  return arr.buffer;\n}\n\nasync function getAccessToken(c: Context): Promise<{ token: string; projectId: string } | null> {\n  try {\n    const saJson = c.env.GOOGLE_SERVICE_ACCOUNT_JSON as string | undefined;\n    if (!saJson) return null;\n    const sa = JSON.parse(saJson);\n    const projectId: string = sa.project_id;\n    const iat = Math.floor(Date.now() / 1000);\n    const exp = iat + 3600;\n    const header = { alg: 'RS256', typ: 'JWT' };\n    const payload = {\n      iss: sa.client_email,\n      scope: 'https://www.googleapis.com/auth/firebase.messaging',\n      aud: 'https://oauth2.googleapis.com/token',\n      iat,\n      exp,\n    };\n    const unsigned = `${base64url(JSON.stringify(header))}.${base64url(JSON.stringify(payload))}`;\n    const keyData = pemToArrayBuffer(sa.private_key);\n    const cryptoKey = await crypto.subtle.importKey(\n      'pkcs8',\n      keyData,\n      { name: 'RSASSA-PKCS1-v1_5', hash: 'SHA-256' },\n      false,\n      ['sign']\n    );\n    const signature = await crypto.subtle.sign('RSASSA-PKCS1-v1_5', cryptoKey, new TextEncoder().encode(unsigned));\n    const jwt = `${unsigned}.${base64url(signature)}`;\n    const body = new URLSearchParams();\n    body.set('grant_type', 'urn:ietf:params:oauth:grant-type:jwt-bearer');\n    body.set('assertion', jwt);\n    const resp = await fetch('https://oauth2.googleapis.com/token', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n      body,\n    });\n    if (!resp.ok) {\n      console.error('Push: token exchange failed', resp.status, await resp.text());\n      return null;\n    }\n  const json = await resp.json() as { access_token: string };\n  return { token: json.access_token, projectId };\n  } catch (e) {\n    console.error('Push: getAccessToken failed', e);\n    return null;\n  }\n}\n\nasync function sendV1ToToken(c: Context, projectId: string, accessToken: string, token: string, title: string, body: string, data?: PushData) {\n  const url = `https://fcm.googleapis.com/v1/projects/${projectId}/messages:send`;\n  const payload = {\n    message: {\n      token,\n      notification: { title, body },\n      data: data || {},\n    },\n  };\n  const res = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${accessToken}`,\n    },\n    body: JSON.stringify(payload),\n  });\n  if (!res.ok) {\n    console.error('Push: FCM v1 error', res.status, await res.text());\n  }\n}\n\nexport async function sendPushToUsers(c: Context, userIds: number[], title: string, body: string, data?: PushData) {\n  try {\n    const tokens = await getUserDeviceTokens(c, userIds);\n    if (!tokens.length) return;\n\n    // Prefer HTTP v1 with service account\n    const access = await getAccessToken(c);\n    if (access) {\n      for (const t of tokens) {\n        await sendV1ToToken(c, access.projectId, access.token, t, title, body, data);\n      }\n      return;\n    }\n\n    // Fallback: legacy (only if explicitly provided)\n    const serverKey = c.env.FCM_SERVER_KEY || c.env.FCM_LEGACY_SERVER_KEY;\n    if (!serverKey) {\n      console.warn('Push: No FCM credentials configured');\n      return;\n    }\n    const payload: any = {\n      registration_ids: tokens,\n      notification: { title, body },\n      data: data || {},\n      priority: 'high',\n    };\n    const res = await fetch('https://fcm.googleapis.com/fcm/send', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `key=${serverKey}`,\n      },\n      body: JSON.stringify(payload),\n    });\n    if (!res.ok) {\n      const txt = await res.text();\n      console.error('Push: FCM legacy error', res.status, txt);\n    }\n  } catch (e) {\n    console.error('Push: sendPushToUsers failed', e);\n  }\n}\n\nexport async function sendChannelMessagePush(c: Context, channelId: string, senderId: number, title: string, body: string) {\n  try {\n    let recipients: number[] = [];\n    if (channelId.startsWith('dm_')) {\n      const parts = channelId.split('_');\n      if (parts.length === 3) {\n        const u1 = Number(parts[1]);\n        const u2 = Number(parts[2]);\n        recipients = [u1, u2].filter(id => id !== senderId);\n      }\n    } else {\n      // Try members first\n      const memberRows = await c.env.DB.prepare(\n        'SELECT user_id FROM channel_members WHERE channel_id = ?'\n      ).bind(channelId).all();\n      const members = ((memberRows.results as any[]) || []).map(r => Number((r as any).user_id));\n      if (members.length) {\n        recipients = members.filter(id => id !== senderId);\n      } else {\n        // Public channel: send to all users except sender\n        const userRows = await c.env.DB.prepare('SELECT id FROM users').all();\n        const all = ((userRows.results as any[]) || []).map(r => Number((r as any).id));\n        recipients = all.filter(id => id !== senderId);\n      }\n    }\n    // Exclude muted\n    const unmuted = await filterMutedUsers(c, channelId, recipients);\n    if (!unmuted.length) return;\n    await sendPushToUsers(c, unmuted, title, body, { channelId });\n  } catch (e) {\n    console.error('Push: sendChannelMessagePush failed', e);\n  }\n}\n", "import { Hono } from 'hono';\nimport { sendPushToUsers } from '../utils/push';\nimport { authMiddleware } from '../auth/middleware';\n\ninterface CloudflareEnv {\n  DB: D1Database;\n  JWT_SECRET: string;\n}\n\ninterface AuthUser {\n  id: number;\n  username: string;\n  isAdmin: boolean;\n}\n\nconst tasks = new Hono<{ \n  Bindings: CloudflareEnv;\n  Variables: { user: AuthUser };\n}>();\n\ntasks.use('*', authMiddleware);\n\ntasks.get('/', async (c) => {\n  try {\n    const { results } = await c.env.DB.prepare(`\n      SELECT t.*, \n             u1.username as creator_username,\n             u2.username as assignee_username\n      FROM tasks t \n      LEFT JOIN users u1 ON t.created_by = u1.id\n      LEFT JOIN users u2 ON t.assigned_to = u2.id\n      ORDER BY t.due_date ASC, t.created_at DESC\n    `).all();\n    return c.json(results);\n  } catch (error) {\n    console.error('Error fetching tasks:', error);\n    return c.json({ error: 'Internal server error' }, 500);\n  }\n});\n\ntasks.post('/', async (c) => {\n  try {\n    const user = c.get('user');\n    const { title, description, assigned_to, due_date, priority } = await c.req.json();\n\n    if (!title) {\n      return c.json({ error: 'Title is required' }, 400);\n    }\n\n    // Validate priority\n    const validPriorities = ['low', 'medium', 'high'];\n    const taskPriority = priority && validPriorities.includes(priority) ? priority : 'medium';\n\n    // Validate due_date format if provided (YYYY-MM-DD)\n    if (due_date && !/^\\d{4}-\\d{2}-\\d{2}$/.test(due_date)) {\n      return c.json({ error: 'Invalid due date format. Use YYYY-MM-DD' }, 400);\n    }\n\n    const { success } = await c.env.DB.prepare(\n      'INSERT INTO tasks (title, description, assigned_to, created_by, due_date, priority) VALUES (?, ?, ?, ?, ?, ?)'\n    )\n      .bind(title, description || null, assigned_to || null, user.id, due_date || null, taskPriority)\n      .run();\n\n    if (success) {\n      // Push to assignee if present\n      if (assigned_to) {\n        try {\n          await sendPushToUsers(c as any, [Number(assigned_to)], 'New Task Assigned', title, { type: 'task', action: 'created' });\n        } catch (e) { console.warn('tasks.create push failed', e); }\n      }\n      return c.json({ message: 'Task created successfully' });\n    }\n\n    return c.json({ error: 'Failed to create task' }, 500);\n  } catch (error) {\n    console.error('Error creating task:', error);\n    return c.json({ error: 'Internal server error' }, 500);\n  }\n});\n\ntasks.put('/:id', async (c) => {\n  try {\n    const { id } = c.req.param();\n    const { title, description, completed, assigned_to, due_date, priority } = await c.req.json();\n\n    if (!title) {\n      return c.json({ error: 'Title is required' }, 400);\n    }\n\n    // Validate priority if provided\n    const validPriorities = ['low', 'medium', 'high'];\n    const taskPriority = priority && validPriorities.includes(priority) ? priority : 'medium';\n\n    // Validate due_date format if provided (YYYY-MM-DD)\n    if (due_date && !/^\\d{4}-\\d{2}-\\d{2}$/.test(due_date)) {\n      return c.json({ error: 'Invalid due date format. Use YYYY-MM-DD' }, 400);\n    }\n\n    // Fetch previous assignee to detect changes\n    const prev = await c.env.DB.prepare('SELECT assigned_to, title FROM tasks WHERE id = ?').bind(id).first();\n    const prevAssigned = prev ? (prev as any).assigned_to : null;\n    const prevTitle = prev ? (prev as any).title : title;\n\n    const { success } = await c.env.DB.prepare(\n      'UPDATE tasks SET title = ?, description = ?, completed = ?, assigned_to = ?, due_date = ?, priority = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?'\n    )\n      .bind(\n        title, \n        description || null, \n        completed ? 1 : 0, \n        assigned_to || null, \n        due_date || null, \n        taskPriority,\n        id\n      )\n      .run();\n\n    if (success) {\n      // If assignment changed, notify the new assignee\n      if (assigned_to && Number(assigned_to) !== Number(prevAssigned)) {\n        try {\n          await sendPushToUsers(c as any, [Number(assigned_to)], 'Task Assigned', title || prevTitle, { type: 'task', action: 'updated' });\n        } catch (e) { console.warn('tasks.update push failed', e); }\n      }\n      return c.json({ message: 'Task updated successfully' });\n    }\n\n    return c.json({ error: 'Failed to update task' }, 500);\n  } catch (error) {\n    console.error('Error updating task:', error);\n    return c.json({ error: 'Internal server error' }, 500);\n  }\n});\n\ntasks.patch('/:id/complete', async (c) => {\n  try {\n    const { id } = c.req.param();\n    const { completed } = await c.req.json();\n\n    if (typeof completed !== 'boolean') {\n      return c.json({ error: 'Invalid completed status' }, 400);\n    }\n\n    const { success } = await c.env.DB.prepare(\n      'UPDATE tasks SET completed = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?'\n    )\n      .bind(completed ? 1 : 0, id)\n      .run();\n\n    if (success) {\n      return c.json({ message: 'Task completion status updated' });\n    }\n\n    return c.json({ error: 'Failed to update task' }, 500);\n  } catch (error) {\n    console.error('Error updating task completion:', error);\n    return c.json({ error: 'Internal server error' }, 500);\n  }\n});\n\ntasks.delete('/:id', async (c) => {\n  try {\n    const { id } = c.req.param();\n\n    const { success } = await c.env.DB.prepare('DELETE FROM tasks WHERE id = ?')\n      .bind(id)\n      .run();\n\n    if (success) {\n      return c.json({ message: 'Task deleted successfully' });\n    }\n\n    return c.json({ error: 'Failed to delete task' }, 500);\n  } catch (error) {\n    console.error('Error deleting task:', error);\n    return c.json({ error: 'Internal server error' }, 500);\n  }\n});\n\nexport default tasks;\n", "import { Hono } from 'hono';\nimport { authMiddleware } from '../auth/middleware';\n\ninterface CloudflareEnv {\n  DB: D1Database;\n  JWT_SECRET: string;\n}\n\ninterface AuthUser {\n  id: number;\n  username: string;\n  isAdmin: boolean;\n  avatar: string;\n}\n\n// Simple password hashing using Web Crypto API\nasync function hashPassword(password: string): Promise<string> {\n  const encoder = new TextEncoder();\n  const data = encoder.encode(password);\n  const hashBuffer = await crypto.subtle.digest('SHA-256', data);\n  const hashArray = Array.from(new Uint8Array(hashBuffer));\n  return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n}\n\n// Simple password verification using Web Crypto API\nasync function verifyPassword(password: string, hashedPassword: string): Promise<boolean> {\n  const encoder = new TextEncoder();\n  const data = encoder.encode(password);\n  const hashBuffer = await crypto.subtle.digest('SHA-256', data);\n  const hashArray = Array.from(new Uint8Array(hashBuffer));\n  const computedHash = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n  return computedHash === hashedPassword;\n}\n\nconst profile = new Hono<{ \n  Bindings: CloudflareEnv;\n  Variables: { user: AuthUser };\n}>();\n\nprofile.use('*', authMiddleware);\n\n// Get current user profile\nprofile.get('/', async (c) => {\n  try {\n    const user = c.get('user');\n    \n    const dbUser = await c.env.DB.prepare('SELECT id, username, is_admin, created_at, avatar_color, user_type FROM users WHERE id = ?')\n      .bind(user.id)\n      .first() as { id: number; username: string; is_admin: number; created_at: string; avatar_color: string | null; user_type: string } | null;\n\n    if (!dbUser) {\n      return c.json({ error: 'User not found' }, 404);\n    }\n\n    return c.json({\n      id: dbUser.id,\n      username: dbUser.username,\n      is_admin: !!dbUser.is_admin,\n      user_type: dbUser.user_type,\n      created_at: dbUser.created_at,\n      avatar_color: dbUser.avatar_color\n    });\n  } catch (error) {\n    console.error('Error fetching user profile:', error);\n    return c.json({ error: 'Internal server error' }, 500);\n  }\n});\n\n// Update user profile\nprofile.put('/', async (c) => {\n  try {\n    const user = c.get('user');\n    const body = await c.req.json();\n    \n    // Handle password update\n    if (body.password) {\n      if (body.password.length < 6) {\n        return c.json({ error: 'Password must be at least 6 characters long' }, 400);\n      }\n\n      // Hash new password\n      const hashedPassword = await hashPassword(body.password);\n\n      // Update password\n      const { success } = await c.env.DB.prepare(\n        'UPDATE users SET password = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?'\n      )\n        .bind(hashedPassword, user.id)\n        .run();\n\n      if (success) {\n        return c.json({ message: 'Password updated successfully' });\n      }\n\n      return c.json({ error: 'Failed to update password' }, 500);\n    }\n\n    // Handle avatar color update\n    if (body.avatar_color !== undefined) {\n      const { success } = await c.env.DB.prepare(\n        'UPDATE users SET avatar_color = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?'\n      )\n        .bind(body.avatar_color, user.id)\n        .run();\n\n      if (success) {\n        return c.json({ message: 'Avatar color updated successfully' });\n      }\n\n      return c.json({ error: 'Failed to update avatar color' }, 500);\n    }\n\n    // Handle username update\n    if (body.username !== undefined) { // Check if username field is present in the request body\n      const newUsername = String(body.username).trim(); // Ensure it's a string and trim whitespace\n\n      if (newUsername.length < 3) {\n        return c.json({ error: 'Username must be at least 3 characters long' }, 400);\n      }\n\n      // Check if username is already taken by another user (case-insensitive)\n      const existingUser = await c.env.DB.prepare('SELECT id FROM users WHERE LOWER(username) = LOWER(?) AND id != ?')\n        .bind(newUsername, user.id)\n        .first();\n\n      if (existingUser) {\n        return c.json({ error: 'Username already taken' }, 409);\n      }\n\n      const { success } = await c.env.DB.prepare(\n        'UPDATE users SET username = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?'\n      )\n        .bind(newUsername, user.id)\n        .run();\n\n      if (success) {\n        return c.json({ message: 'Profile updated successfully' });\n      }\n\n      return c.json({ error: 'Failed to update profile' }, 500);\n    }\n\n    return c.json({ error: 'No valid fields to update' }, 400);\n  } catch (error) {\n    console.error('Error updating user profile:', error);\n    return c.json({ error: 'Internal server error' }, 500);\n  }\n});\n\n// Change password\nprofile.post('/change-password', async (c) => {\n  try {\n    const user = c.get('user');\n    const { currentPassword, newPassword, confirmPassword } = await c.req.json();\n\n    if (!currentPassword || !newPassword || !confirmPassword) {\n      return c.json({ error: 'All password fields are required' }, 400);\n    }\n\n    if (newPassword !== confirmPassword) {\n      return c.json({ error: 'New passwords do not match' }, 400);\n    }\n\n    if (newPassword.length < 6) {\n      return c.json({ error: 'New password must be at least 6 characters long' }, 400);\n    }\n\n    // Get current user with password\n    const dbUser = await c.env.DB.prepare('SELECT password FROM users WHERE id = ?')\n      .bind(user.id)\n      .first() as { password: string } | null;\n\n    if (!dbUser) {\n      return c.json({ error: 'User not found' }, 404);\n    }\n\n    // Verify current password\n    const validPassword = await verifyPassword(currentPassword, dbUser.password);\n    if (!validPassword) {\n      return c.json({ error: 'Current password is incorrect' }, 401);\n    }\n\n    // Hash new password\n    const hashedPassword = await hashPassword(newPassword);\n\n    // Update password\n    const { success } = await c.env.DB.prepare(\n      'UPDATE users SET password = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?'\n    )\n      .bind(hashedPassword, user.id)\n      .run();\n\n    if (success) {\n      return c.json({ message: 'Password changed successfully' });\n    }\n\n    return c.json({ error: 'Failed to change password' }, 500);\n  } catch (error) {\n    console.error('Error changing password:', error);\n    return c.json({ error: 'Internal server error' }, 500);\n  }\n});\n\nexport default profile;\n", "import { Hono } from 'hono';\nimport { authMiddleware, AuthUser } from '../auth/middleware';\n\ninterface CloudflareEnv {\n  DB: D1Database;\n}\n\nconst preferences = new Hono<{ Bindings: CloudflareEnv; Variables: { user: AuthUser } }>();\n\npreferences.use('*', authMiddleware);\n\n// Get all per-team preferences for current user\npreferences.get('/teams', async (c) => {\n  const user = c.get('user');\n  const rows = await c.env.DB.prepare(\n    'SELECT team_number, highlight_color, notif_upcoming, notif_alliance, notif_results, notif_awards FROM user_team_preferences WHERE user_id = ? ORDER BY CAST(team_number AS INTEGER)'\n  ).bind(user.id).all();\n  return c.json({ teams: rows.results || [] });\n});\n\n// Upsert a team preference\npreferences.post('/teams', async (c) => {\n  const user = c.get('user');\n  const body = await c.req.json();\n  const team_number = String(body.team_number || '').trim();\n  if (!team_number || !/^\\d+$/.test(team_number)) {\n    return c.json({ error: 'team_number must be digits' }, 400);\n  }\n  const color = typeof body.highlight_color === 'string' ? body.highlight_color : '#ffd166';\n  const notif_upcoming = body.notif_upcoming ? 1 : 0;\n  const notif_alliance = body.notif_alliance ? 1 : 0;\n  const notif_results = body.notif_results ? 1 : 0;\n  const notif_awards = body.notif_awards ? 1 : 0;\n\n  await c.env.DB.prepare(\n    `INSERT INTO user_team_preferences (user_id, team_number, highlight_color, notif_upcoming, notif_alliance, notif_results, notif_awards)\n     VALUES (?, ?, ?, ?, ?, ?, ?)\n     ON CONFLICT(user_id, team_number) DO UPDATE SET\n       highlight_color = excluded.highlight_color,\n       notif_upcoming = excluded.notif_upcoming,\n       notif_alliance = excluded.notif_alliance,\n       notif_results = excluded.notif_results,\n       notif_awards = excluded.notif_awards,\n       updated_at = CURRENT_TIMESTAMP`\n  ).bind(user.id, team_number, color, notif_upcoming, notif_alliance, notif_results, notif_awards).run();\n\n  return c.json({ success: true });\n});\n\n// Delete a team preference\npreferences.delete('/teams/:team_number', async (c) => {\n  const user = c.get('user');\n  const { team_number } = c.req.param();\n  await c.env.DB.prepare('DELETE FROM user_team_preferences WHERE user_id = ? AND team_number = ?')\n    .bind(user.id, team_number).run();\n  return c.json({ success: true });\n});\n\nexport default preferences;\n", "import { Context } from 'hono';\nimport { sendChannelMessagePush } from '../utils/push';\nimport { D1Database } from '@cloudflare/workers-types';\n\ninterface Env {\n  DB: D1Database;\n}\n\nexport async function getMessages(c: Context): Promise<Response> {\n  console.log(\"getMessages: Received request\");\n  const { channelId } = c.req.param();\n  console.log(\"getMessages: Channel ID\", channelId);\n  \n  const userIdStr = c.req.query('user_id');\n  const userId = userIdStr ? Number(userIdStr) : undefined;\n  \n  if (!channelId) {\n    return new Response('Channel ID is required', { status: 400 });\n  }\n\n  try {\n    // Check channel privacy\n    const channelRow = await c.env.DB.prepare('SELECT is_private FROM channels WHERE id = ?').bind(channelId).first();\n    if (!channelRow) {\n      return new Response('Channel not found', { status: 404 });\n    }\n\n    const isPrivate = (channelRow as { is_private: number }).is_private === 1;\n    if (isPrivate) {\n      if (!userId) {\n        return new Response('Unauthorized', { status: 401 });\n      }\n\n      // Check if user is member or admin\n      const adminRow = await c.env.DB.prepare('SELECT is_admin FROM users WHERE id = ?').bind(userId).first();\n      const isAdmin = adminRow && (adminRow as { is_admin: number }).is_admin === 1;\n\n      if (!isAdmin) {\n        const memberRow = await c.env.DB.prepare('SELECT 1 FROM channel_members WHERE channel_id = ? AND user_id = ?').bind(channelId, userId).first();\n        if (!memberRow) {\n          return new Response('Forbidden', { status: 403 });\n        }\n      }\n    }\n\n    console.log(\"getMessages: Fetching messages for channel\", channelId);\n    const { results } = await c.env.DB.prepare(\n      'SELECT messages.*, users.username as sender_username, users.avatar FROM messages JOIN users ON messages.sender_id = users.id WHERE channel_id = ? ORDER BY timestamp ASC'\n    )\n      .bind(channelId)\n      .all();\n\n    console.log(`getMessages: Found ${results.length} messages`);\n    \n    // Fetch read status for this channel to compute readers per message\n    let channelReadStatuses: Array<{ user_id: number; last_read_timestamp: string; username: string }> = [];\n    try {\n      const readRes = await c.env.DB.prepare(\n        'SELECT urs.user_id, urs.last_read_timestamp, u.username FROM user_read_status urs JOIN users u ON u.id = urs.user_id WHERE urs.channel_id = ?'\n      ).bind(channelId).all();\n      channelReadStatuses = (readRes.results as any[])?.map(r => ({\n        user_id: Number((r as any).user_id),\n        last_read_timestamp: (r as any).last_read_timestamp,\n        username: (r as any).username,\n      })) || [];\n    } catch (e) {\n      console.warn('getMessages: Failed to fetch channel read statuses:', e);\n    }\n\n  // Compute lightweight read receipts for channel chats (based on other users' last_read_timestamp)\n  // We only annotate messages sent by the requesting user (if provided)\n  if (userId && results.length > 0) {\n      try {\n        // Get the most recent read timestamp by any other user in this channel\n        const otherReadRow = await c.env.DB.prepare(\n          'SELECT MAX(last_read_timestamp) as max_ts FROM user_read_status WHERE channel_id = ? AND user_id != ?'\n        ).bind(channelId, userId).first();\n        const otherMaxRead: string | null = (otherReadRow as any)?.max_ts || null;\n\n        if (otherMaxRead) {\n          const otherReadTime = new Date(otherMaxRead).getTime();\n          for (const r of results as any[]) {\n            if (r.sender_id === userId) {\n              const msgTime = new Date(r.timestamp).getTime();\n              // Consider read if any other user's last_read >= message timestamp\n              (r as any).read_by_any = otherReadTime >= msgTime ? 1 : 0;\n            }\n          }\n        } else {\n          for (const r of results as any[]) {\n            if (r.sender_id === userId) {\n              (r as any).read_by_any = 0;\n            }\n          }\n        }\n      } catch (e) {\n        console.warn('getMessages: Failed to compute read receipts:', e);\n      }\n    }\n    \n    // Attach readers per message (all users whose last_read_timestamp >= message.timestamp and not the sender)\n    try {\n      if (Array.isArray(results) && channelReadStatuses.length > 0) {\n        for (const r of results as any[]) {\n          const msgTime = new Date(r.timestamp).getTime();\n          const readers = channelReadStatuses.filter(s => s.user_id !== Number(r.sender_id) && new Date(s.last_read_timestamp).getTime() >= msgTime)\n            .map(s => ({ user_id: s.user_id, username: s.username, read_at: s.last_read_timestamp }));\n          (r as any).readers = readers;\n        }\n      }\n    } catch (e) {\n      console.warn('getMessages: Failed to attach readers:', e);\n    }\n    \n    // If user is provided and there are messages, mark channel as read\n    if (userId && results.length > 0) {\n      try {\n        const timestamp = new Date().toISOString();\n        await c.env.DB.prepare(`\n          INSERT INTO user_read_status (user_id, channel_id, last_read_timestamp)\n          VALUES (?, ?, ?)\n          ON CONFLICT(user_id, channel_id) DO UPDATE SET\n            last_read_timestamp = excluded.last_read_timestamp\n        `).bind(userId, channelId, timestamp).run();\n        console.log(\"getMessages: Marked channel as read for user\");\n      } catch (error) {\n        console.error(\"getMessages: Error marking channel as read:\", error);\n        // Don't fail the get messages if read status update fails\n      }\n    }\n\n    return new Response(JSON.stringify(results), {\n      headers: { 'Content-Type': 'application/json' },\n    });\n  } catch (error) {\n    console.error('Error fetching messages:', error);\n    return new Response('Error fetching messages: ' + (error instanceof Error ? error.message : String(error)), { status: 500 });\n  }\n}\n\nexport async function sendMessage(c: Context): Promise<Response> {\n  console.log(\"sendMessage: Received request\");\n  const { channelId } = c.req.param();\n  console.log(\"sendMessage: Channel ID\", channelId);\n  \n  const userIdStr = c.req.query('user_id');\n  const userIdFromQuery = userIdStr ? Number(userIdStr) : undefined;\n\n  if (!channelId) {\n    return new Response('Channel ID is required', { status: 400 });\n  }\n\n  try {\n    const { content, sender_id } = await c.req.json();\n    console.log(\"sendMessage: Parsed body\", { content, sender_id });\n    \n    if (!content || !sender_id) {\n      return new Response('Content and sender_id are required', { status: 400 });\n    }\n\n    const effectiveUserId = userIdFromQuery || Number(sender_id);\n    if (!effectiveUserId) {\n      return new Response('Unauthorized', { status: 401 });\n    }\n\n    // Check channel privacy\n    const chanRow = await c.env.DB.prepare('SELECT is_private FROM channels WHERE id = ?').bind(channelId).first();\n    if (!chanRow) {\n      return new Response('Channel not found', { status: 404 });\n    }\n\n    const isPrivateChan = (chanRow as { is_private: number }).is_private === 1;\n    if (isPrivateChan) {\n      // Allow if admin or member\n      const admRow = await c.env.DB.prepare('SELECT is_admin FROM users WHERE id = ?').bind(effectiveUserId).first();\n      const isAdmin = admRow && (admRow as { is_admin: number }).is_admin === 1;\n      if (!isAdmin) {\n        const membRow = await c.env.DB.prepare('SELECT 1 FROM channel_members WHERE channel_id = ? AND user_id = ?').bind(channelId, effectiveUserId).first();\n        if (!membRow) {\n          return new Response('Forbidden', { status: 403 });\n        }\n      }\n    }\n\n    const timestamp = new Date().toISOString();\n    console.log(\"sendMessage: Inserting message\", { channelId, sender_id, timestamp });\n    \n    const result = await c.env.DB.prepare(\n      'INSERT INTO messages (channel_id, sender_id, content, timestamp) VALUES (?, ?, ?, ?)'\n    )\n      .bind(channelId, sender_id, content, timestamp)\n      .run();\n\n    console.log(\"sendMessage: Insert result\", result);\n    if (result.success) {\n      // Automatically mark this channel as read for the sender\n      try {\n        await c.env.DB.prepare(`\n          INSERT INTO user_read_status (user_id, channel_id, last_read_timestamp)\n          VALUES (?, ?, ?)\n          ON CONFLICT(user_id, channel_id) DO UPDATE SET\n            last_read_timestamp = excluded.last_read_timestamp\n        `).bind(sender_id, channelId, timestamp).run();\n        console.log(\"sendMessage: Marked channel as read for sender\");\n      } catch (error) {\n        console.error(\"sendMessage: Error marking channel as read:\", error);\n        // Don't fail the message send if read status update fails\n      }\n\n      // Fire push notifications (best-effort)\n      try {\n        const senderRow = await c.env.DB.prepare('SELECT username FROM users WHERE id = ?').bind(sender_id).first();\n        const senderName = (senderRow as any)?.username || 'New message';\n        await sendChannelMessagePush(c, channelId, Number(sender_id), senderName, content);\n      } catch (e) {\n        console.warn('sendMessage: push failed', e);\n      }\n\n      return new Response(JSON.stringify({ message: 'Message sent' }), {\n        status: 201,\n        headers: { 'Content-Type': 'application/json' },\n      });\n    } else {\n      return new Response('Failed to send message', { status: 500 });\n    }\n  } catch (error) {\n    console.error('Error sending message:', error);\n    return new Response('Error sending message: ' + (error instanceof Error ? error.message : String(error)), { status: 500 });\n  }\n}\n\nexport async function deleteMessage(c: Context): Promise<Response> {\n  console.log(\"deleteMessage: Received request\");\n  const { messageId } = c.req.param();\n  console.log(\"deleteMessage: Message ID\", messageId);\n  \n  if (!messageId) {\n    return new Response('Message ID is required', { status: 400 });\n  }\n\n  try {\n    // Get user ID from request body\n    const { user_id } = await c.req.json();\n    console.log(\"deleteMessage: User ID\", user_id);\n    \n    if (!user_id) {\n      return new Response('User ID is required', { status: 400 });\n    }\n\n    // Check if message exists and get sender_id\n    const message = await c.env.DB.prepare(\n      'SELECT sender_id FROM messages WHERE id = ?'\n    )\n      .bind(messageId)\n      .first();\n\n    if (!message) {\n      return new Response('Message not found', { status: 404 });\n    }\n\n    // Check if user is the sender or an admin\n    const isAdmin = await c.env.DB.prepare(\n      'SELECT is_admin FROM users WHERE id = ?'\n    )\n      .bind(user_id)\n      .first();\n\n    const isAuthorized = isAdmin && (isAdmin as { is_admin: number }).is_admin === 1 || (message as { sender_id: number }).sender_id === Number(user_id);\n\n    if (!isAuthorized) {\n      return new Response('Unauthorized: You can only delete your own messages', { status: 403 });\n    }\n\n    // Delete the message\n    const result = await c.env.DB.prepare(\n      'DELETE FROM messages WHERE id = ?'\n    )\n      .bind(messageId)\n      .run();\n\n    console.log(\"deleteMessage: Delete result\", result);\n\n    if (result.success) {\n      return new Response(JSON.stringify({ message: 'Message deleted' }), {\n        status: 200,\n        headers: { 'Content-Type': 'application/json' },\n      });\n    } else {\n      return new Response('Failed to delete message', { status: 500 });\n    }\n  } catch (error) {\n    console.error('Error deleting message:', error);\n    return new Response('Error deleting message: ' + (error instanceof Error ? error.message : String(error)), { status: 500 });\n  }\n}\n\n// Direct Message specific functions\nexport async function getDMMessages(c: Context): Promise<Response> {\n  console.log(\"getDMMessages: Received request\");\n  const { dmId } = c.req.param();\n  console.log(\"getDMMessages: DM ID\", dmId);\n  \n  const userIdStr = c.req.query('user_id');\n  const userId = userIdStr ? Number(userIdStr) : undefined;\n  \n  if (!dmId || !dmId.startsWith('dm_')) {\n    return new Response('Invalid DM ID', { status: 400 });\n  }\n\n  if (!userId) {\n    return new Response('User ID is required', { status: 401 });\n  }\n\n  try {\n    // Extract user IDs from DM ID (format: dm_<smallerId>_<largerId>)\n    const dmParts = dmId.split('_');\n    if (dmParts.length !== 3) {\n      return new Response('Invalid DM ID format', { status: 400 });\n    }\n\n    const user1Id = parseInt(dmParts[1]);\n    const user2Id = parseInt(dmParts[2]);\n\n    // Verify the requesting user is one of the participants\n    if (userId !== user1Id && userId !== user2Id) {\n      return new Response('Unauthorized: You can only view your own DMs', { status: 403 });\n    }\n\n    console.log(\"getDMMessages: Fetching DM messages for\", dmId);\n    const { results } = await c.env.DB.prepare(\n      'SELECT messages.*, users.username as sender_username, users.avatar FROM messages JOIN users ON messages.sender_id = users.id WHERE channel_id = ? ORDER BY timestamp ASC'\n    )\n      .bind(dmId)\n      .all();\n\n    console.log(`getDMMessages: Found ${results.length} messages`);\n    \n    // Fetch read status for this DM channel to compute readers per message\n    let dmReadStatuses: Array<{ user_id: number; last_read_timestamp: string; username: string }> = [];\n    try {\n      const readRes = await c.env.DB.prepare(\n        'SELECT urs.user_id, urs.last_read_timestamp, u.username FROM user_read_status urs JOIN users u ON u.id = urs.user_id WHERE urs.channel_id = ?'\n      ).bind(dmId).all();\n      dmReadStatuses = (readRes.results as any[])?.map(r => ({\n        user_id: Number((r as any).user_id),\n        last_read_timestamp: (r as any).last_read_timestamp,\n        username: (r as any).username,\n      })) || [];\n    } catch (e) {\n      console.warn('getDMMessages: Failed to fetch DM read statuses:', e);\n    }\n\n    // Compute lightweight read receipts for DM based on the other participant's last_read_timestamp\n    try {\n      const otherId = userId === user1Id ? user2Id : user1Id;\n      const otherReadRow = await c.env.DB.prepare(\n        'SELECT last_read_timestamp FROM user_read_status WHERE user_id = ? AND channel_id = ?'\n      ).bind(otherId, dmId).first();\n      const otherLastRead: string | null = (otherReadRow as any)?.last_read_timestamp || null;\n      if (otherLastRead) {\n        const otherReadTime = new Date(otherLastRead).getTime();\n        for (const r of results as any[]) {\n          if (r.sender_id === userId) {\n            const msgTime = new Date(r.timestamp).getTime();\n            (r as any).read_by_any = otherReadTime >= msgTime ? 1 : 0;\n          }\n        }\n      } else {\n        for (const r of results as any[]) {\n          if (r.sender_id === userId) {\n            (r as any).read_by_any = 0;\n          }\n        }\n      }\n    } catch (e) {\n      console.warn('getDMMessages: Failed to compute read receipts:', e);\n    }\n    \n    // Attach readers per message (users whose last_read_timestamp >= message.timestamp and not the sender)\n    try {\n      if (Array.isArray(results) && dmReadStatuses.length > 0) {\n        for (const r of results as any[]) {\n          const msgTime = new Date(r.timestamp).getTime();\n          const readers = dmReadStatuses.filter(s => s.user_id !== Number(r.sender_id) && new Date(s.last_read_timestamp).getTime() >= msgTime)\n            .map(s => ({ user_id: s.user_id, username: s.username, read_at: s.last_read_timestamp }));\n          (r as any).readers = readers;\n        }\n      }\n    } catch (e) {\n      console.warn('getDMMessages: Failed to attach readers:', e);\n    }\n    \n    // Mark DM channel as read for the requesting user\n    if (results.length > 0) {\n      try {\n        const timestamp = new Date().toISOString();\n        await c.env.DB.prepare(`\n          INSERT INTO user_read_status (user_id, channel_id, last_read_timestamp)\n          VALUES (?, ?, ?)\n          ON CONFLICT(user_id, channel_id) DO UPDATE SET\n            last_read_timestamp = excluded.last_read_timestamp\n        `).bind(userId, dmId, timestamp).run();\n        console.log(\"getDMMessages: Marked DM as read for user\");\n      } catch (error) {\n        console.error(\"getDMMessages: Error marking DM as read:\", error);\n        // Don't fail the get messages if read status update fails\n      }\n    }\n\n    return new Response(JSON.stringify(results), {\n      headers: { 'Content-Type': 'application/json' },\n    });\n  } catch (error) {\n    console.error('Error fetching DM messages:', error);\n    return new Response('Error fetching DM messages: ' + (error instanceof Error ? error.message : String(error)), { status: 500 });\n  }\n}\n\nexport async function sendDMMessage(c: Context): Promise<Response> {\n  console.log(\"sendDMMessage: Received request\");\n  const { dmId } = c.req.param();\n  console.log(\"sendDMMessage: DM ID\", dmId);\n  \n  const userIdStr = c.req.query('user_id');\n  const userIdFromQuery = userIdStr ? Number(userIdStr) : undefined;\n  \n  if (!dmId || !dmId.startsWith('dm_')) {\n    return new Response('Invalid DM ID', { status: 400 });\n  }\n\n  try {\n    const { content, sender_id } = await c.req.json();\n    console.log(\"sendDMMessage: Parsed body\", { content, sender_id });\n    \n    if (!content || !sender_id) {\n      return new Response('Content and sender_id are required', { status: 400 });\n    }\n\n    const effectiveUserId = userIdFromQuery || Number(sender_id);\n    if (!effectiveUserId) {\n      return new Response('Unauthorized', { status: 401 });\n    }\n\n    // Extract user IDs from DM ID (format: dm_<smallerId>_<largerId>)\n    const dmParts = dmId.split('_');\n    if (dmParts.length !== 3) {\n      return new Response('Invalid DM ID format', { status: 400 });\n    }\n\n    const user1Id = parseInt(dmParts[1]);\n    const user2Id = parseInt(dmParts[2]);\n\n    // Verify the sender is one of the participants\n    if (sender_id !== user1Id && sender_id !== user2Id) {\n      return new Response('Unauthorized: You can only send messages in your own DMs', { status: 403 });\n    }\n\n    const timestamp = new Date().toISOString();\n    console.log(\"sendDMMessage: Inserting message\", { dmId, sender_id, timestamp });\n    \n    const result = await c.env.DB.prepare(\n      'INSERT INTO messages (channel_id, sender_id, content, timestamp) VALUES (?, ?, ?, ?)'\n    )\n      .bind(dmId, sender_id, content, timestamp)\n      .run();\n\n    console.log(\"sendDMMessage: Insert result\", result);\n\n    if (result.success) {\n      // Automatically mark this DM channel as read for the sender\n      try {\n        await c.env.DB.prepare(`\n          INSERT INTO user_read_status (user_id, channel_id, last_read_timestamp)\n          VALUES (?, ?, ?)\n          ON CONFLICT(user_id, channel_id) DO UPDATE SET\n            last_read_timestamp = excluded.last_read_timestamp\n        `).bind(sender_id, dmId, timestamp).run();\n        console.log(\"sendDMMessage: Marked DM as read for sender\");\n      } catch (error) {\n        console.error(\"sendDMMessage: Error marking DM as read:\", error);\n        // Don't fail the message send if read status update fails\n      }\n\n      // Fire push (best-effort)\n      try {\n        const senderRow = await c.env.DB.prepare('SELECT username FROM users WHERE id = ?').bind(sender_id).first();\n        const senderName = (senderRow as any)?.username || 'New message';\n        await sendChannelMessagePush(c, dmId, Number(sender_id), senderName, content);\n      } catch (e) {\n        console.warn('sendDMMessage: push failed', e);\n      }\n\n      return new Response(JSON.stringify({ message: 'DM message sent' }), {\n        status: 201,\n        headers: { 'Content-Type': 'application/json' },\n      });\n    } else {\n      return new Response('Failed to send DM message', { status: 500 });\n    }\n  } catch (error) {\n    console.error('Error sending DM message:', error);\n    return new Response('Error sending DM message: ' + (error instanceof Error ? error.message : String(error)), { status: 500 });\n  }\n}", "import { Context } from 'hono';\nimport { D1Database } from '@cloudflare/workers-types';\n\ninterface Env {\n  DB: D1Database;\n}\n\ninterface PositionResult {\n  max_pos: number;\n}\n\nexport async function getChannels(c: Context): Promise<Response> {\n  console.log(\"getChannels: Received request\");\n  try {\n    const userIdStr = c.req.query('user_id');\n    let channels;\n    if (userIdStr) {\n      const userId = Number(userIdStr);\n      // Check if user is admin\n      const adminRow = await c.env.DB.prepare('SELECT is_admin FROM users WHERE id = ?')\n        .bind(userId)\n        .first();\n      const isAdmin = adminRow && (adminRow as { is_admin: number }).is_admin === 1;\n\n      if (isAdmin) {\n        // Filter out DM channels and group chats\n        const { results } = await c.env.DB.prepare('SELECT * FROM channels WHERE id NOT LIKE \"dm_%\" AND id NOT LIKE \"group_%\" ORDER BY position ASC').all();\n        channels = results;\n      } else {\n        // Filter out DM channels and group chats for non-admin users too\n        const { results } = await c.env.DB.prepare(\n          `SELECT DISTINCT channels.*\n           FROM channels\n           LEFT JOIN channel_members ON channels.id = channel_members.channel_id AND channel_members.user_id = ?\n           WHERE channels.id NOT LIKE \"dm_%\" AND channels.id NOT LIKE \"group_%\" AND (channels.is_private = 0 OR channel_members.user_id = ?)\n           ORDER BY channels.position ASC`\n        ).bind(userId, userId).all();\n        channels = results;\n      }\n    } else {\n      // No user specified \u2013 return only public channels, excluding DMs and group chats\n      const { results } = await c.env.DB.prepare('SELECT * FROM channels WHERE is_private = 0 AND id NOT LIKE \"dm_%\" AND id NOT LIKE \"group_%\" ORDER BY position ASC').all();\n      channels = results;\n    }\n\n    console.log(\"getChannels: Found channels\", channels);\n    return new Response(JSON.stringify(channels), {\n      headers: { 'Content-Type': 'application/json' },\n    });\n  } catch (error) {\n    console.error('Error fetching channels:', error);\n    return new Response('Error fetching channels: ' + (error instanceof Error ? error.message : String(error)), { status: 500 });\n  }\n}\n\nexport async function createChannel(c: Context): Promise<Response> {\n  console.log(\"createChannel: Received request\");\n  try {\n    const { id, name, created_by, is_private = false, members = [] } = await c.req.json();\n    console.log(\"createChannel: Parsed body\", { id, name, created_by, is_private, members });\n    \n    // Temporarily disable admin check for debugging\n    /*\n    // Verify user is admin before allowing channel creation\n    const authHeader = c.req.header('Authorization');\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return new Response('Unauthorized', { status: 401 });\n    }\n    \n    const token = authHeader.substring(7);\n    try {\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      if (!payload.isAdmin) {\n        return new Response('Admin privileges required', { status: 403 });\n      }\n    } catch (error) {\n      return new Response('Invalid token', { status: 401 });\n    }\n    */\n    \n    if (!id || !name) {\n      return new Response('Channel ID and name are required', { status: 400 });\n    }\n\n    // Check if channel ID already exists\n    const existingChannel = await c.env.DB.prepare(\n      'SELECT id FROM channels WHERE id = ?'\n    ).bind(id).first();\n    \n    if (existingChannel) {\n      return new Response('Channel ID already exists', { status: 409 });\n    }\n    \n    // Get highest position to place new channel at the end\n    const positionResult = await c.env.DB.prepare(\n      'SELECT COALESCE(MAX(position), 0) as max_pos FROM channels'\n    ).first();\n    \n    const position = positionResult ? (positionResult as PositionResult).max_pos + 1 : 1;\n    const now = new Date().toISOString();\n    console.log(\"createChannel: Inserting channel\", { id, name, created_by, now, position });\n    \n    // Ensure the creator is in the members list for a private channel\n    let memberIds: number[] = Array.isArray(members) ? [...members] : [];\n    if (is_private && created_by && !memberIds.includes(Number(created_by))) {\n      memberIds.push(Number(created_by));\n    }\n    \n    const result = await c.env.DB.prepare(\n      'INSERT INTO channels (id, name, created_by, created_at, updated_at, position, is_private) VALUES (?, ?, ?, ?, ?, ?, ?)'\n    ).bind(id, name, created_by, now, now, position, is_private ? 1 : 0).run();\n\n    console.log(\"createChannel: Insert result\", result);\n\n    if (result.success) {\n      // If the channel is private and members are specified, add them to channel_members table\n      if (is_private) {\n        for (const memberId of memberIds) {\n          try {\n            await c.env.DB.prepare(\n              'INSERT INTO channel_members (channel_id, user_id) VALUES (?, ?)'\n            ).bind(id, memberId).run();\n          } catch (memberErr) {\n            console.error('Error adding channel member:', memberErr);\n            // Continue inserting other members even if one fails\n          }\n        }\n      }\n\n      return new Response(JSON.stringify({ \n        message: 'Channel created', \n        id, \n        name,\n        position,\n        is_private\n      }), {\n        status: 201,\n        headers: { 'Content-Type': 'application/json' },\n      });\n    } else {\n      return new Response('Failed to create channel', { status: 500 });\n    }\n  } catch (error) {\n    console.error('Error creating channel:', error);\n    return new Response('Error creating channel: ' + (error instanceof Error ? error.message : String(error)), { status: 500 });\n  }\n}\n\nexport async function updateChannel(c: Context): Promise<Response> {\n  console.log(\"updateChannel: Received request\");\n  try {\n    const { channelId } = c.req.param();\n    const { name, is_private, members = [] } = await c.req.json();\n    console.log(\"updateChannel: Parsed data\", { channelId, name, is_private, members });\n    \n    // Temporarily disable admin check for debugging\n    /*\n    // Verify user is admin\n    const authHeader = c.req.header('Authorization');\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return new Response('Unauthorized', { status: 401 });\n    }\n    \n    const token = authHeader.substring(7);\n    try {\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      if (!payload.isAdmin) {\n        return new Response('Admin privileges required', { status: 403 });\n      }\n    } catch (error) {\n      return new Response('Invalid token', { status: 401 });\n    }\n    */\n    \n    if (!name) {\n      return new Response('Channel name is required', { status: 400 });\n    }\n\n    const now = new Date().toISOString();\n    console.log(\"updateChannel: Updating channel\", { channelId, name, now });\n    \n    const result = await c.env.DB.prepare(\n      'UPDATE channels SET name = ?, is_private = ?, updated_at = ? WHERE id = ?'\n    ).bind(name, is_private ? 1 : 0, now, channelId).run();\n\n    console.log(\"updateChannel: Update result\", result);\n\n    if (result.success) {\n      // Update membership\n      if (is_private !== undefined) {\n        // Clear existing members\n        await c.env.DB.prepare('DELETE FROM channel_members WHERE channel_id = ?').bind(channelId).run();\n        if (is_private && Array.isArray(members)) {\n          for (const memberId of members) {\n            try {\n              await c.env.DB.prepare('INSERT INTO channel_members (channel_id, user_id) VALUES (?, ?)').bind(channelId, memberId).run();\n            } catch (memberErr) {\n              console.error('Error updating channel member:', memberErr);\n            }\n          }\n        }\n      }\n\n      return new Response(JSON.stringify({ \n        message: 'Channel updated', \n        id: channelId, \n        name,\n        is_private\n      }), {\n        headers: { 'Content-Type': 'application/json' },\n      });\n    } else {\n      return new Response('Channel not found', { status: 404 });\n    }\n  } catch (error) {\n    console.error('Error updating channel:', error);\n    return new Response('Error updating channel: ' + (error instanceof Error ? error.message : String(error)), { status: 500 });\n  }\n}\n\nexport async function deleteChannel(c: Context): Promise<Response> {\n  console.log(\"deleteChannel: Received request\");\n  try {\n    const { channelId } = c.req.param();\n    console.log(\"deleteChannel: Channel ID\", channelId);\n    \n    // Temporarily disable admin check for debugging\n    /*\n    // Verify user is admin\n    const authHeader = c.req.header('Authorization');\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return new Response('Unauthorized', { status: 401 });\n    }\n    \n    const token = authHeader.substring(7);\n    try {\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      if (!payload.isAdmin) {\n        return new Response('Admin privileges required', { status: 403 });\n      }\n    } catch (error) {\n      return new Response('Invalid token', { status: 401 });\n    }\n    */\n    \n    // Don't allow deletion of the general channel\n    if (channelId === 'general') {\n      return new Response('Cannot delete the general channel', { status: 403 });\n    }\n\n    // Delete channel members (if any)\n    console.log(\"deleteChannel: Deleting channel members for channel\", channelId);\n    await c.env.DB.prepare('DELETE FROM channel_members WHERE channel_id = ?').bind(channelId).run();\n\n    // Delete all messages in the channel first\n    console.log(\"deleteChannel: Deleting messages for channel\", channelId);\n    await c.env.DB.prepare(\n      'DELETE FROM messages WHERE channel_id = ?'\n    ).bind(channelId).run();\n    \n    // Then delete the channel\n    console.log(\"deleteChannel: Deleting channel\", channelId);\n    const result = await c.env.DB.prepare(\n      'DELETE FROM channels WHERE id = ?'\n    ).bind(channelId).run();\n\n    console.log(\"deleteChannel: Delete result\", result);\n\n    if (result.success) {\n      return new Response(JSON.stringify({ \n        message: 'Channel deleted' \n      }), {\n        headers: { 'Content-Type': 'application/json' },\n      });\n    } else {\n      return new Response('Channel not found', { status: 404 });\n    }\n  } catch (error) {\n    console.error('Error deleting channel:', error);\n    return new Response('Error deleting channel: ' + (error instanceof Error ? error.message : String(error)), { status: 500 });\n  }\n}\n\nexport async function reorderChannels(c: Context): Promise<Response> {\n  console.log(\"reorderChannels: Received request\");\n  try {\n    const { channels } = await c.req.json() as { channels: { id: string, position: number }[] };\n    console.log(\"reorderChannels: Parsed channels\", channels);\n    \n    // Temporarily disable admin check for debugging\n    /*\n    // Verify user is admin\n    const authHeader = c.req.header('Authorization');\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return new Response('Unauthorized', { status: 401 });\n    }\n    \n    const token = authHeader.substring(7);\n    try {\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      if (!payload.isAdmin) {\n        return new Response('Admin privileges required', { status: 403 });\n      }\n    } catch (error) {\n      return new Response('Invalid token', { status: 401 });\n    }\n    */\n    \n    if (!channels || !Array.isArray(channels) || channels.length === 0) {\n      return new Response('Channels array is required', { status: 400 });\n    }\n\n    // Begin a transaction to update all positions\n    const db = c.env.DB;\n    \n    // Update each channel's position\n    for (const channel of channels) {\n      console.log(\"reorderChannels: Updating channel position\", channel);\n      await db.prepare(\n        'UPDATE channels SET position = ? WHERE id = ?'\n      ).bind(channel.position, channel.id).run();\n    }\n    \n    // Fetch updated channels\n    const { results } = await db.prepare(\n      'SELECT * FROM channels ORDER BY position ASC'\n    ).all();\n\n    return new Response(JSON.stringify({\n      message: 'Channels reordered',\n      channels: results\n    }), {\n      headers: { 'Content-Type': 'application/json' },\n    });\n  } catch (error) {\n    console.error('Error reordering channels:', error);\n    return new Response('Error reordering channels: ' + (error instanceof Error ? error.message : String(error)), { status: 500 });\n  }\n} \n\n// Group Chat Management Functions\nexport async function getGroupChats(c: Context): Promise<Response> {\n  console.log(\"getGroupChats: Received request\");\n  try {\n    const userIdStr = c.req.query('user_id');\n    if (!userIdStr) {\n      return new Response('User ID is required', { status: 400 });\n    }\n    \n    const userId = Number(userIdStr);\n    \n    // Get all group chats where the user is a member, with last message timestamp\n    const { results } = await c.env.DB.prepare(\n      `SELECT DISTINCT \n         channels.*,\n         COALESCE(MAX(messages.timestamp), channels.created_at) as last_activity\n       FROM channels \n       JOIN channel_members ON channels.id = channel_members.channel_id \n       LEFT JOIN messages ON channels.id = messages.channel_id\n       WHERE channels.id LIKE 'group_%' AND channel_members.user_id = ?\n       GROUP BY channels.id, channels.name, channels.created_by, channels.created_at, channels.updated_at, channels.position, channels.is_private\n       ORDER BY last_activity DESC`\n    ).bind(userId).all();\n\n    console.log(\"getGroupChats: Found group chats\", results);\n    return new Response(JSON.stringify(results), {\n      headers: { 'Content-Type': 'application/json' },\n    });\n  } catch (error) {\n    console.error('Error fetching group chats:', error);\n    return new Response('Error fetching group chats: ' + (error instanceof Error ? error.message : String(error)), { status: 500 });\n  }\n}\n\nexport async function createGroupChat(c: Context): Promise<Response> {\n  console.log(\"createGroupChat: Received request\");\n  try {\n    const { name, created_by, members = [] } = await c.req.json();\n    console.log(\"createGroupChat: Parsed body\", { name, created_by, members });\n    \n    if (!name || !created_by) {\n      return new Response('Group name and creator ID are required', { status: 400 });\n    }\n\n    if (!Array.isArray(members) || members.length === 0) {\n      return new Response('At least one member is required', { status: 400 });\n    }\n\n    // Generate a unique group ID\n    const groupId = `group_${Date.now()}_${Math.random().toString(36).substring(2, 8)}`;\n    const now = new Date().toISOString();\n    \n    // Ensure the creator is in the members list\n    let memberIds: number[] = [...members];\n    if (!memberIds.includes(Number(created_by))) {\n      memberIds.push(Number(created_by));\n    }\n    \n    console.log(\"createGroupChat: Creating group\", { groupId, name, created_by, now, memberIds });\n    \n    // Create the group chat as a private channel\n    const result = await c.env.DB.prepare(\n      'INSERT INTO channels (id, name, created_by, created_at, updated_at, position, is_private) VALUES (?, ?, ?, ?, ?, ?, ?)'\n    ).bind(groupId, name, created_by, now, now, 0, 1).run();\n\n    console.log(\"createGroupChat: Insert result\", result);\n\n    if (result.success) {\n      // Add all members to the group\n      for (const memberId of memberIds) {\n        try {\n          await c.env.DB.prepare(\n            'INSERT INTO channel_members (channel_id, user_id) VALUES (?, ?)'\n          ).bind(groupId, memberId).run();\n        } catch (memberErr) {\n          console.error('Error adding group member:', memberErr);\n          // Continue adding other members even if one fails\n        }\n      }\n\n      return new Response(JSON.stringify({ \n        message: 'Group chat created', \n        id: groupId,\n        name,\n        members: memberIds\n      }), {\n        status: 201,\n        headers: { 'Content-Type': 'application/json' },\n      });\n    } else {\n      return new Response('Failed to create group chat', { status: 500 });\n    }\n  } catch (error) {\n    console.error('Error creating group chat:', error);\n    return new Response('Error creating group chat: ' + (error instanceof Error ? error.message : String(error)), { status: 500 });\n  }\n}\n\nexport async function updateGroupChat(c: Context): Promise<Response> {\n  console.log(\"updateGroupChat: Received request\");\n  try {\n    const { groupId } = c.req.param();\n    const { name, members = [] } = await c.req.json();\n    console.log(\"updateGroupChat: Parsed data\", { groupId, name, members });\n    \n    if (!name) {\n      return new Response('Group name is required', { status: 400 });\n    }\n\n    // Verify this is actually a group chat\n    if (!groupId.startsWith('group_')) {\n      return new Response('Invalid group ID', { status: 400 });\n    }\n\n    const now = new Date().toISOString();\n    console.log(\"updateGroupChat: Updating group\", { groupId, name, now });\n    \n    const result = await c.env.DB.prepare(\n      'UPDATE channels SET name = ?, updated_at = ? WHERE id = ?'\n    ).bind(name, now, groupId).run();\n\n    console.log(\"updateGroupChat: Update result\", result);\n\n    if (result.success) {\n      // Update membership\n      if (Array.isArray(members) && members.length > 0) {\n        // Clear existing members\n        await c.env.DB.prepare('DELETE FROM channel_members WHERE channel_id = ?').bind(groupId).run();\n        \n        // Add new members\n        for (const memberId of members) {\n          try {\n            await c.env.DB.prepare('INSERT INTO channel_members (channel_id, user_id) VALUES (?, ?)').bind(groupId, memberId).run();\n          } catch (memberErr) {\n            console.error('Error updating group member:', memberErr);\n          }\n        }\n      }\n\n      return new Response(JSON.stringify({ \n        message: 'Group chat updated', \n        id: groupId, \n        name,\n        members\n      }), {\n        headers: { 'Content-Type': 'application/json' },\n      });\n    } else {\n      return new Response('Group chat not found', { status: 404 });\n    }\n  } catch (error) {\n    console.error('Error updating group chat:', error);\n    return new Response('Error updating group chat: ' + (error instanceof Error ? error.message : String(error)), { status: 500 });\n  }\n}\n\nexport async function getChannelMembers(c: Context): Promise<Response> {\n  console.log(\"getChannelMembers: Received request\");\n  try {\n    const { channelId } = c.req.param();\n    console.log(\"getChannelMembers: Channel ID\", channelId);\n    \n    // Get all members of the channel along with user details\n    const { results } = await c.env.DB.prepare(\n      `SELECT channel_members.user_id, users.username \n       FROM channel_members \n       JOIN users ON channel_members.user_id = users.id \n       WHERE channel_members.channel_id = ?`\n    ).bind(channelId).all();\n\n    console.log(\"getChannelMembers: Found members\", results);\n    return new Response(JSON.stringify(results), {\n      headers: { 'Content-Type': 'application/json' },\n    });\n  } catch (error) {\n    console.error('Error fetching channel members:', error);\n    return new Response('Error fetching channel members: ' + (error instanceof Error ? error.message : String(error)), { status: 500 });\n  }\n}\n\nexport async function deleteGroupChat(c: Context): Promise<Response> {\n  console.log(\"deleteGroupChat: Received request\");\n  try {\n    const { groupId } = c.req.param();\n    console.log(\"deleteGroupChat: Group ID\", groupId);\n    \n    // Verify this is actually a group chat\n    if (!groupId.startsWith('group_')) {\n      return new Response('Invalid group ID', { status: 400 });\n    }\n\n    // Delete group members\n    console.log(\"deleteGroupChat: Deleting group members for group\", groupId);\n    await c.env.DB.prepare('DELETE FROM channel_members WHERE channel_id = ?').bind(groupId).run();\n\n    // Delete all messages in the group\n    console.log(\"deleteGroupChat: Deleting messages for group\", groupId);\n    await c.env.DB.prepare(\n      'DELETE FROM messages WHERE channel_id = ?'\n    ).bind(groupId).run();\n    \n    // Delete the group chat\n    console.log(\"deleteGroupChat: Deleting group\", groupId);\n    const result = await c.env.DB.prepare(\n      'DELETE FROM channels WHERE id = ?'\n    ).bind(groupId).run();\n\n    console.log(\"deleteGroupChat: Delete result\", result);\n\n    if (result.success) {\n      return new Response(JSON.stringify({ \n        message: 'Group chat deleted' \n      }), {\n        headers: { 'Content-Type': 'application/json' },\n      });\n    } else {\n      return new Response('Group chat not found', { status: 404 });\n    }\n  } catch (error) {\n    console.error('Error deleting group chat:', error);\n    return new Response('Error deleting group chat: ' + (error instanceof Error ? error.message : String(error)), { status: 500 });\n  }\n}", "import { Context } from 'hono';\nimport { D1Database } from '@cloudflare/workers-types';\n\ninterface Env {\n  DB: D1Database;\n}\n\n// Return minimal public information for all users so that any authenticated user\n// can start a direct-message conversation.\nexport async function getUsers(c: Context): Promise<Response> {\n  try {\n    const { results } = await c.env.DB.prepare(\n      \"SELECT id, username, is_admin FROM users WHERE user_type = 'member' ORDER BY username COLLATE NOCASE ASC\"\n    ).all();\n\n    return new Response(JSON.stringify(results), {\n      headers: { 'Content-Type': 'application/json' },\n    });\n  } catch (error) {\n    console.error('Error fetching users list', error);\n    return new Response('Error fetching users list', { status: 500 });\n  }\n}\n\n// Return users sorted by most recent conversation activity for a specific user\nexport async function getUsersByRecentActivity(c: Context): Promise<Response> {\n  try {\n    const userIdStr = c.req.query('user_id');\n    if (!userIdStr) {\n      return new Response('User ID is required', { status: 400 });\n    }\n    \n    const userId = Number(userIdStr);\n    const userIdString = userIdStr; // Keep as string for LIKE queries\n    console.log(`getUsersByRecentActivity called for user ${userId}`);\n    \n    // First, get all users except the current user\n    const { results: allUsers } = await c.env.DB.prepare(\n      \"SELECT id, username, is_admin FROM users WHERE id != ? AND user_type = 'member' ORDER BY username COLLATE NOCASE ASC\"\n    ).bind(userId).all();\n    \n    console.log(`Found ${allUsers.length} users (excluding current user)`);\n\n    // Then, get the most recent message timestamp for each DM conversation involving this user\n    const { results: recentMessages } = await c.env.DB.prepare(`\n      SELECT \n        m.channel_id,\n        MAX(m.timestamp) as last_message_time\n      FROM messages m\n      WHERE m.channel_id LIKE 'dm_%'\n        AND (\n          m.channel_id LIKE 'dm_' || ? || '_%' \n          OR m.channel_id LIKE 'dm_%_' || ?\n        )\n      GROUP BY m.channel_id\n      ORDER BY last_message_time DESC\n    `).bind(userIdString, userIdString).all();\n    \n    console.log(`Found ${recentMessages.length} DM conversations:`, recentMessages);\n\n    // Also check what messages exist in general for debugging\n    const { results: allDMMessages } = await c.env.DB.prepare(`\n      SELECT channel_id, timestamp, sender_id \n      FROM messages \n      WHERE channel_id LIKE 'dm_%' \n      ORDER BY timestamp DESC \n      LIMIT 10\n    `).all();\n    console.log(`Sample DM messages in database:`, allDMMessages);\n\n    // Create a map of user IDs to their last message time\n    const userLastMessageMap = new Map<number, string>();\n    \n    for (const msg of recentMessages as any[]) {\n      const channelId = msg.channel_id as string;\n      const parts = channelId.split('_');\n      if (parts.length === 3) {\n        const user1Id = parseInt(parts[1]);\n        const user2Id = parseInt(parts[2]);\n        const otherUserId = user1Id === userId ? user2Id : user1Id;\n        \n        // Only set if we haven't seen this user yet (since we're ordered by most recent)\n        if (!userLastMessageMap.has(otherUserId)) {\n          userLastMessageMap.set(otherUserId, msg.last_message_time);\n          console.log(`Mapped user ${otherUserId} to timestamp ${msg.last_message_time}`);\n        }\n      }\n    }\n\n    // Add last_message_time to users and sort them\n    const usersWithActivity = (allUsers as any[]).map(user => ({\n      ...user,\n      last_message_time: userLastMessageMap.get(user.id) || ''\n    }));\n\n    // Sort: users with recent messages first (by timestamp desc), then users without messages (alphabetically)\n    usersWithActivity.sort((a, b) => {\n      const aHasMessages = !!a.last_message_time;\n      const bHasMessages = !!b.last_message_time;\n      \n      if (aHasMessages && bHasMessages) {\n        // Both have messages, sort by timestamp (most recent first)\n        return b.last_message_time.localeCompare(a.last_message_time);\n      } else if (aHasMessages && !bHasMessages) {\n        // A has messages, B doesn't - A comes first\n        return -1;\n      } else if (!aHasMessages && bHasMessages) {\n        // A doesn't have messages, B does - B comes first\n        return 1;\n      } else {\n        // Neither has messages, sort alphabetically\n        return a.username.localeCompare(b.username, undefined, { sensitivity: 'base' });\n      }\n    });\n\n    console.log('Final sorted result:', usersWithActivity.map(u => ({ \n      id: u.id, \n      username: u.username, \n      last_message_time: u.last_message_time \n    })));\n\n    return new Response(JSON.stringify(usersWithActivity), {\n      headers: { 'Content-Type': 'application/json' },\n    });\n  } catch (error) {\n    console.error('Error fetching users by recent activity', error);\n    return new Response('Error fetching users by recent activity', { status: 500 });\n  }\n} ", "import { Context } from 'hono';\nimport { sendPushToUsers } from '../utils/push';\n\n// Mark a channel as read for a user\nexport async function markChannelAsRead(c: Context): Promise<Response> {\n  try {\n    const { channelId } = c.req.param();\n    const { user_id } = await c.req.json();\n    \n    if (!user_id || !channelId) {\n      return new Response('User ID and Channel ID are required', { status: 400 });\n    }\n    \n    const timestamp = new Date().toISOString();\n    \n    // Update or insert the read status\n    await c.env.DB.prepare(`\n      INSERT INTO user_read_status (user_id, channel_id, last_read_timestamp)\n      VALUES (?, ?, ?)\n      ON CONFLICT(user_id, channel_id) DO UPDATE SET\n        last_read_timestamp = excluded.last_read_timestamp\n    `).bind(user_id, channelId, timestamp).run();\n    \n    return new Response(JSON.stringify({ success: true, timestamp }), {\n      headers: { 'Content-Type': 'application/json' }\n    });\n  } catch (error) {\n    console.error('Error marking channel as read:', error);\n    return new Response('Error marking channel as read', { status: 500 });\n  }\n}\n\n// Get all notification data in a single call to reduce API requests\nexport async function getAllNotificationData(c: Context): Promise<Response> {\n  try {\n    const userIdStr = c.req.query('user_id');\n    if (!userIdStr) {\n      return new Response('User ID is required', { status: 400 });\n    }\n    \n    const userId = Number(userIdStr);\n    \n    // Get all channels the user has access to\n    const { results: channels } = await c.env.DB.prepare(`\n      SELECT DISTINCT channels.*\n      FROM channels\n      LEFT JOIN channel_members ON channels.id = channel_members.channel_id AND channel_members.user_id = ?\n      WHERE channels.id NOT LIKE \"dm_%\" AND channels.id NOT LIKE \"group_%\" \n        AND (channels.is_private = 0 OR channel_members.user_id = ?)\n      ORDER BY channels.position ASC\n    `).bind(userId, userId).all();\n    \n    // Get all DM conversations for this user\n    const { results: dmConversations } = await c.env.DB.prepare(`\n      SELECT DISTINCT channel_id\n      FROM messages\n      WHERE channel_id LIKE 'dm_%'\n        AND (\n          channel_id LIKE 'dm_' || ? || '_%' \n          OR channel_id LIKE 'dm_%_' || ?\n        )\n    `).bind(userIdStr, userIdStr).all();\n    \n    // Get all group chats the user is a member of\n    const { results: groupChats } = await c.env.DB.prepare(`\n      SELECT DISTINCT channels.*\n      FROM channels\n      LEFT JOIN channel_members ON channels.id = channel_members.channel_id\n      WHERE channels.id LIKE \"group_%\" \n        AND channel_members.user_id = ?\n    `).bind(userId).all();\n    \n    // Fetch muted channels for this user\n    const mutedRows = await c.env.DB.prepare(\n      'SELECT channel_id FROM user_notification_settings WHERE user_id = ? AND muted = 1'\n    ).bind(userId).all();\n    const mutedSet = new Set((mutedRows.results as any[])?.map(r => (r as any).channel_id) || []);\n    // Combine all channel/DM/group IDs and filter muted\n    const allChannelIds = [\n      ...channels.map((c: any) => c.id),\n      ...dmConversations.map((dm: any) => dm.channel_id),\n      ...groupChats.map((g: any) => g.id)\n    ].filter((id) => !mutedSet.has(id));\n    \n    const unreadCounts: Record<string, number> = {};\n    let channelsUnread = 0;\n    let messagesUnread = 0;\n    \n    // For each channel, count unread messages\n    for (const channelId of allChannelIds) {\n      try {\n        // Get user's last read timestamp for this channel\n        const readStatus = await c.env.DB.prepare(\n          'SELECT last_read_timestamp FROM user_read_status WHERE user_id = ? AND channel_id = ?'\n        ).bind(userId, channelId).first();\n        \n        const lastReadTimestamp = readStatus?.last_read_timestamp || '1970-01-01T00:00:00.000Z';\n        \n        // Count messages after the last read timestamp\n        const unreadResult = await c.env.DB.prepare(`\n          SELECT COUNT(*) as count\n          FROM messages\n          WHERE channel_id = ? \n            AND timestamp > ?\n            AND sender_id != ?\n        `).bind(channelId, lastReadTimestamp, userId).first();\n        \n        const count = (unreadResult as any)?.count || 0;\n        if (count > 0) {\n          unreadCounts[channelId] = count;\n          \n          // Categorize by channel type for totals\n          if (channelId.startsWith('dm_') || channelId.startsWith('group_')) {\n            messagesUnread += count;\n          } else {\n            channelsUnread += count;\n          }\n        }\n      } catch (error) {\n        console.error(`Error counting unread for channel ${channelId}:`, error);\n      }\n    }\n    \n    return new Response(JSON.stringify({\n      unreadCounts,\n      totalUnread: channelsUnread + messagesUnread,\n      channelsUnread,\n      messagesUnread\n    }), {\n      headers: { 'Content-Type': 'application/json' }\n    });\n  } catch (error) {\n    console.error('Error getting notification data:', error);\n    return new Response('Error getting notification data', { status: 500 });\n  }\n}\n\n// Get unread message counts for all channels/DMs for a user\nexport async function getUnreadCounts(c: Context): Promise<Response> {\n  try {\n    const userIdStr = c.req.query('user_id');\n    if (!userIdStr) {\n      return new Response('User ID is required', { status: 400 });\n    }\n    \n    const userId = Number(userIdStr);\n    \n    // Get all channels the user has access to\n    const { results: channels } = await c.env.DB.prepare(`\n      SELECT DISTINCT channels.*\n      FROM channels\n      LEFT JOIN channel_members ON channels.id = channel_members.channel_id AND channel_members.user_id = ?\n      WHERE channels.id NOT LIKE \"dm_%\" AND channels.id NOT LIKE \"group_%\" \n        AND (channels.is_private = 0 OR channel_members.user_id = ?)\n      ORDER BY channels.position ASC\n    `).bind(userId, userId).all();\n    \n    // Get all DM conversations for this user\n    const { results: dmConversations } = await c.env.DB.prepare(`\n      SELECT DISTINCT channel_id\n      FROM messages\n      WHERE channel_id LIKE 'dm_%'\n        AND (\n          channel_id LIKE 'dm_' || ? || '_%' \n          OR channel_id LIKE 'dm_%_' || ?\n        )\n    `).bind(userIdStr, userIdStr).all();\n    \n    console.log('NotificationAPI: Found DM conversations for user', userId, ':', dmConversations.map((dm: any) => dm.channel_id));\n    \n    // Get all group chats the user is a member of\n    const { results: groupChats } = await c.env.DB.prepare(`\n      SELECT DISTINCT channels.*\n      FROM channels\n      LEFT JOIN channel_members ON channels.id = channel_members.channel_id\n      WHERE channels.id LIKE \"group_%\" \n        AND channel_members.user_id = ?\n    `).bind(userId).all();\n    \n    // Fetch muted channels for this user\n    const mutedRows = await c.env.DB.prepare(\n      'SELECT channel_id FROM user_notification_settings WHERE user_id = ? AND muted = 1'\n    ).bind(userId).all();\n    const mutedSet = new Set((mutedRows.results as any[])?.map(r => (r as any).channel_id) || []);\n    // Combine all channel/DM/group IDs and filter muted\n    const allChannelIds = [\n      ...channels.map((c: any) => c.id),\n      ...dmConversations.map((dm: any) => dm.channel_id),\n      ...groupChats.map((g: any) => g.id)\n    ].filter((id) => !mutedSet.has(id));\n    \n    const unreadCounts: Record<string, number> = {};\n    \n    // For each channel, count unread messages\n    for (const channelId of allChannelIds) {\n      try {\n        // Get user's last read timestamp for this channel\n        const readStatus = await c.env.DB.prepare(\n          'SELECT last_read_timestamp FROM user_read_status WHERE user_id = ? AND channel_id = ?'\n        ).bind(userId, channelId).first();\n        \n        const lastReadTimestamp = readStatus?.last_read_timestamp || '1970-01-01T00:00:00.000Z';\n        \n        // Count messages after the last read timestamp\n        const unreadResult = await c.env.DB.prepare(`\n          SELECT COUNT(*) as count\n          FROM messages\n          WHERE channel_id = ? \n            AND timestamp > ?\n            AND sender_id != ?\n        `).bind(channelId, lastReadTimestamp, userId).first();\n        \n        const count = (unreadResult as any)?.count || 0;\n        if (count > 0) {\n          unreadCounts[channelId] = count;\n          \n          // Debug logging for DM channels\n          if (channelId.startsWith('dm_')) {\n            console.log(`NotificationAPI: DM channel ${channelId} has ${count} unread messages for user ${userId}`);\n          }\n        }\n      } catch (error) {\n        console.error(`Error counting unread for channel ${channelId}:`, error);\n      }\n    }\n    \n    console.log('NotificationAPI: Final unread counts for user', userId, ':', unreadCounts);\n    \n    return new Response(JSON.stringify(unreadCounts), {\n      headers: { 'Content-Type': 'application/json' }\n    });\n  } catch (error) {\n    console.error('Error getting unread counts:', error);\n    return new Response('Error getting unread counts', { status: 500 });\n  }\n}\n\n// Get total unread count across all channels/DMs for sidebar notification\nexport async function getTotalUnreadCount(c: Context): Promise<Response> {\n  try {\n    const userIdStr = c.req.query('user_id');\n    if (!userIdStr) {\n      return new Response('User ID is required', { status: 400 });\n    }\n    \n    const userId = Number(userIdStr);\n    \n    // Get regular channels the user has access to (excluding muted)\n    const { results: regularChannels } = await c.env.DB.prepare(`\n      SELECT DISTINCT channels.id as channel_id\n      FROM channels\n      LEFT JOIN channel_members ON channels.id = channel_members.channel_id AND channel_members.user_id = ?\n      WHERE channels.id NOT LIKE \"dm_%\" AND channels.id NOT LIKE \"group_%\" \n        AND (channels.is_private = 0 OR channel_members.user_id = ?)\n        AND channels.id NOT IN (\n          SELECT channel_id FROM user_notification_settings WHERE user_id = ? AND muted = 1\n        )\n    `).bind(userId, userId, userId).all();\n    \n    // Get DM conversations for this user (excluding muted)\n    const { results: dmConversations } = await c.env.DB.prepare(`\n      SELECT DISTINCT m.channel_id as channel_id\n      FROM messages m\n      WHERE m.channel_id LIKE 'dm_%'\n        AND (m.channel_id LIKE 'dm_' || ? || '_%' OR m.channel_id LIKE 'dm_%_' || ?)\n        AND m.channel_id NOT IN (\n          SELECT channel_id FROM user_notification_settings WHERE user_id = ? AND muted = 1\n        )\n    `).bind(userIdStr, userIdStr, userId).all();\n    \n    // Get group chats the user is a member of (excluding muted)\n    const { results: groupChats } = await c.env.DB.prepare(`\n      SELECT DISTINCT channels.id as channel_id\n      FROM channels\n      LEFT JOIN channel_members ON channels.id = channel_members.channel_id\n      WHERE channels.id LIKE \"group_%\" \n        AND channel_members.user_id = ?\n        AND channels.id NOT IN (\n          SELECT channel_id FROM user_notification_settings WHERE user_id = ? AND muted = 1\n        )\n    `).bind(userId, userId).all();\n    \n    let channelsUnread = 0;\n    let messagesUnread = 0;\n    \n    // Count unread in regular channels\n    for (const row of regularChannels as any[]) {\n      const channelId = row.channel_id;\n      \n      try {\n        const readStatus = await c.env.DB.prepare(\n          'SELECT last_read_timestamp FROM user_read_status WHERE user_id = ? AND channel_id = ?'\n        ).bind(userId, channelId).first();\n        \n        const lastReadTimestamp = readStatus?.last_read_timestamp || '1970-01-01T00:00:00.000Z';\n        \n        const unreadResult = await c.env.DB.prepare(`\n          SELECT COUNT(*) as count\n          FROM messages\n          WHERE channel_id = ? \n            AND timestamp > ?\n            AND sender_id != ?\n        `).bind(channelId, lastReadTimestamp, userId).first();\n        \n        channelsUnread += (unreadResult as any)?.count || 0;\n      } catch (error) {\n        console.error(`Error counting unread for channel ${channelId}:`, error);\n      }\n    }\n    \n    // Count unread in DMs and group chats\n    const allMessages = [...dmConversations, ...groupChats];\n    for (const row of allMessages as any[]) {\n      const channelId = row.channel_id;\n      \n      try {\n        const readStatus = await c.env.DB.prepare(\n          'SELECT last_read_timestamp FROM user_read_status WHERE user_id = ? AND channel_id = ?'\n        ).bind(userId, channelId).first();\n        \n        const lastReadTimestamp = readStatus?.last_read_timestamp || '1970-01-01T00:00:00.000Z';\n        \n        const unreadResult = await c.env.DB.prepare(`\n          SELECT COUNT(*) as count\n          FROM messages\n          WHERE channel_id = ? \n            AND timestamp > ?\n            AND sender_id != ?\n        `).bind(channelId, lastReadTimestamp, userId).first();\n        \n        messagesUnread += (unreadResult as any)?.count || 0;\n      } catch (error) {\n        console.error(`Error counting unread for conversation ${channelId}:`, error);\n      }\n    }\n    \n    return new Response(JSON.stringify({ \n      totalUnread: channelsUnread + messagesUnread,\n      channelsUnread,\n      messagesUnread\n    }), {\n      headers: { 'Content-Type': 'application/json' }\n    });\n  } catch (error) {\n    console.error('Error getting total unread count:', error);\n    return new Response('Error getting total unread count', { status: 500 });\n  }\n}\n\n// Toggle mute for a channel/DM for the current user\nexport async function toggleMute(c: Context): Promise<Response> {\n  try {\n    const { channelId } = c.req.param();\n    const { user_id, muted } = await c.req.json();\n    if (!user_id || !channelId || typeof muted !== 'boolean') {\n      return new Response('user_id, channelId and muted are required', { status: 400 });\n    }\n    await c.env.DB.prepare(`\n      INSERT INTO user_notification_settings (user_id, channel_id, muted)\n      VALUES (?, ?, ?)\n      ON CONFLICT(user_id, channel_id) DO UPDATE SET muted = excluded.muted\n    `).bind(user_id, channelId, muted ? 1 : 0).run();\n    return new Response(JSON.stringify({ success: true, muted }), { headers: { 'Content-Type': 'application/json' } });\n  } catch (error) {\n    console.error('Error toggling mute:', error);\n    return new Response('Error toggling mute', { status: 500 });\n  }\n}\n\n// Register a device token for push notifications\nexport async function registerDevice(c: Context): Promise<Response> {\n  try {\n    const { user_id, platform, token } = await c.req.json();\n    if (!user_id || !platform || !token) {\n      return new Response('user_id, platform, token required', { status: 400 });\n    }\n    await c.env.DB.prepare(`\n      INSERT INTO user_devices (user_id, platform, token)\n      VALUES (?, ?, ?)\n      ON CONFLICT(user_id, token) DO NOTHING\n    `).bind(user_id, platform, token).run();\n    return new Response(JSON.stringify({ success: true }), { headers: { 'Content-Type': 'application/json' } });\n  } catch (error) {\n    console.error('Error registering device:', error);\n    return new Response('Error registering device', { status: 500 });\n  }\n}\n\n// Get muted channels/DMs for a user\nexport async function getMutedSettings(c: Context): Promise<Response> {\n  try {\n    const userIdStr = c.req.query('user_id');\n    if (!userIdStr) {\n      return new Response('User ID is required', { status: 400 });\n    }\n    const userId = Number(userIdStr);\n    const rows = await c.env.DB.prepare(\n      'SELECT channel_id FROM user_notification_settings WHERE user_id = ? AND muted = 1'\n    ).bind(userId).all();\n    const muted = ((rows.results as any[]) || []).map(r => (r as any).channel_id);\n    return new Response(JSON.stringify({ muted }), { headers: { 'Content-Type': 'application/json' } });\n  } catch (error) {\n    console.error('Error getting muted settings:', error);\n    return new Response('Error getting muted settings', { status: 500 });\n  }\n}\n\n// Diagnostics: get push configuration and token counts (optionally for a user)\nexport async function getPushConfig(c: Context): Promise<Response> {\n  try {\n    const hasSA = !!c.env.GOOGLE_SERVICE_ACCOUNT_JSON;\n    const hasLegacy = !!(c.env.FCM_SERVER_KEY || c.env.FCM_LEGACY_SERVER_KEY);\n    const mode = hasSA ? 'v1' : hasLegacy ? 'legacy' : 'none';\n    const userIdStr = c.req.query('user_id');\n    let tokenCount = undefined as number | undefined;\n    if (userIdStr) {\n      const { results } = await c.env.DB.prepare('SELECT COUNT(*) as count FROM user_devices WHERE user_id = ?')\n        .bind(Number(userIdStr)).all();\n      tokenCount = Number(((results as any[])?.[0]?.count) || 0);\n    }\n    return new Response(JSON.stringify({ mode, hasServiceAccount: hasSA, hasLegacyKey: hasLegacy, tokenCount }), {\n      headers: { 'Content-Type': 'application/json' }\n    });\n  } catch (e) {\n    console.error('Error getting push config:', e);\n    return new Response('Error getting push config', { status: 500 });\n  }\n}\n\n// Send a test push notification to a specific user\nexport async function sendTestPush(c: Context): Promise<Response> {\n  try {\n    const { user_id } = await c.req.json();\n    if (!user_id) {\n      return new Response('user_id required', { status: 400 });\n    }\n    await sendPushToUsers(c, [Number(user_id)], 'Test notification', 'This is a test push', { type: 'test' });\n    return new Response(JSON.stringify({ success: true }), { headers: { 'Content-Type': 'application/json' } });\n  } catch (e) {\n    console.error('Error sending test push:', e);\n    return new Response('Error sending test push', { status: 500 });\n  }\n}\n", "import { Hono } from 'hono';\nimport { authMiddleware } from '../auth/middleware';\nimport { getMessages, sendMessage, deleteMessage, getDMMessages, sendDMMessage } from './messages';\nimport { \n  getChannels, \n  createChannel, \n  updateChannel, \n  deleteChannel,\n  reorderChannels,\n  getChannelMembers,\n  getGroupChats,\n  createGroupChat,\n  updateGroupChat,\n  deleteGroupChat\n} from './channels';\nimport { getUsers, getUsersByRecentActivity } from './users';\nimport { markChannelAsRead, getUnreadCounts, getTotalUnreadCount, getAllNotificationData, toggleMute, registerDevice, getMutedSettings, getPushConfig, sendTestPush } from './notifications';\n\nconst chat = new Hono();\n\n// Require auth for all chat routes and forbid public accounts\nchat.use('*', authMiddleware, async (c, next) => {\n  const user = c.get('user') as any;\n  if (user && user.userType === 'public') {\n    return c.json({ error: 'Chat features are restricted to members.' }, 403);\n  }\n  await next();\n});\n\n// Debug endpoint\nchat.get('/debug', async (c) => {\n  const authHeader = c.req.header('Authorization');\n  console.log(\"Debug endpoint called\");\n  \n  if (!authHeader || !authHeader.startsWith('Bearer ')) {\n    return c.json({ \n      message: 'No token found',\n      hasToken: false \n    });\n  }\n  \n  const token = authHeader.substring(7);\n  try {\n    // Try to parse the JWT payload\n    const [headerBase64, payloadBase64] = token.split('.');\n    const header = JSON.parse(atob(headerBase64));\n    const payload = JSON.parse(atob(payloadBase64));\n    \n    return c.json({\n      message: 'Token found and parsed',\n      hasToken: true,\n      tokenInfo: {\n        header,\n        payload: {\n          ...payload,\n          // Don't reveal sensitive fields\n          password: payload.password ? '[REDACTED]' : undefined\n        }\n      }\n    });\n  } catch (error) {\n    return c.json({ \n      message: 'Token parsing error',\n      hasToken: true,\n      error: String(error)\n    });\n  }\n});\n\n// Messages endpoints\nchat.get('/messages/:channelId', getMessages);\nchat.post('/messages/:channelId', sendMessage);\nchat.delete('/messages/:messageId', deleteMessage);\n\n// Direct Messages endpoints\nchat.get('/messages/dm/:dmId', getDMMessages);\nchat.post('/messages/dm/:dmId', sendDMMessage);\n\n// Channels endpoints\nchat.get('/channels', getChannels);\nchat.post('/channels', createChannel);\nchat.put('/channels/:channelId', updateChannel);\nchat.delete('/channels/:channelId', deleteChannel);\nchat.get('/channels/:channelId/members', getChannelMembers);\nchat.post('/channels/reorder', reorderChannels);\n\n// Group chat endpoints\nchat.get('/groups', getGroupChats);\nchat.post('/groups', createGroupChat);\nchat.put('/groups/:groupId', updateGroupChat);\nchat.delete('/groups/:groupId', deleteGroupChat);\n\n// Users endpoint (public to authenticated users)\nchat.get('/users', getUsers);\nchat.get('/users/recent', getUsersByRecentActivity);\n\n// Notifications endpoints\nchat.post('/notifications/read/:channelId', markChannelAsRead);\nchat.get('/notifications/all', getAllNotificationData); // New combined endpoint\nchat.get('/notifications/unread', getUnreadCounts);\nchat.get('/notifications/total', getTotalUnreadCount);\nchat.post('/notifications/mute/:channelId', toggleMute);\nchat.post('/notifications/register-device', registerDevice);\nchat.get('/notifications/muted', getMutedSettings);\nchat.get('/notifications/push-config', getPushConfig);\nchat.post('/notifications/test', sendTestPush);\n\nexport default chat;", "import { Hono } from 'hono';\n\n// Declare expected environment bindings for type safety\ninterface EnvBindings {\n  TBA_API_KEY?: string;\n  OPENAI_API_KEY?: string;\n  OPENAI_MODEL?: string;\n  OPENAI_BASE_URL?: string;\n  AZURE_OPENAI_KEY?: string;\n  AZURE_OPENAI_ENDPOINT?: string;\n  AZURE_OPENAI_DEPLOYMENT?: string;\n  GROQ_API_KEY?: string;\n  GROQ_MODEL?: string;\n  OPENROUTER_API_KEY?: string;\n  OPENROUTER_MODEL?: string;\n  OPENROUTER_SITE_URL?: string;\n  OPENROUTER_APP_NAME?: string;\n}\n\n// Minimal interface for incoming JSON body\ninterface MatchSummaryRequest {\n  match_key?: string;\n  match?: any; // full match object (optional to avoid refetch latency)\n}\n\n// Utility: build a concise stats line from match JSON\nfunction humanCompLevel(match: any): string {\n  switch (match?.comp_level) {\n    case 'qm': return 'qualification match';\n    case 'ef': return 'eighth-final playoff match';\n    case 'qf': return 'quarterfinal match';\n    case 'sf': return 'semifinal match';\n    case 'f': return 'finals match';\n    default: return 'match';\n  }\n}\n\ninterface Factor {\n  name: string;\n  blue: number;\n  red: number;\n  diff: number; // blue - red (positive means blue advantage)\n  impactRank?: number;\n}\n\nfunction classifyMargin(margin: number): string {\n  if (margin <= 5) return 'narrow';\n  if (margin <= 25) return 'moderate';\n  if (margin <= 50) return 'decisive';\n  return 'dominant';\n}\n\nfunction pickVerb(marginClass: string): string {\n  switch (marginClass) {\n    case 'narrow': return 'edges out';\n    case 'moderate': return 'prevails over';\n    case 'decisive': return 'defeats';\n    default: return 'dominates';\n  }\n}\n\nfunction buildStats(match: any): { prompt: string; fallback: string; factors: Factor[] } {\n  if (!match) {\n    return { prompt: 'No match data provided.', fallback: 'Summary unavailable.', factors: [] };\n  }\n  const blueTeams = match?.alliances?.blue?.team_keys?.map((t: string) => t.replace('frc','')).join(', ');\n  const redTeams = match?.alliances?.red?.team_keys?.map((t: string) => t.replace('frc','')).join(', ');\n  const blueScore = match?.alliances?.blue?.score;\n  const redScore = match?.alliances?.red?.score;\n  const winner = match?.winning_alliance;\n  const key = match?.key;\n  const round = humanCompLevel(match);\n  const base = `${round} ${key}: Blue [${blueTeams}] ${blueScore} - Red [${redTeams}] ${redScore}. Winner: ${winner || 'TBD'}.`;\n  const breakdown = match?.score_breakdown;\n  const factors: Factor[] = [];\n  if (breakdown && breakdown.blue && breakdown.red) {\n    const blue = breakdown.blue;\n    const red = breakdown.red;\n    // Candidate numeric fields\n    const candidateFields = Object.keys(blue).filter(k => typeof blue[k] === 'number' && typeof red[k] === 'number');\n    for (const f of candidateFields) {\n      const bVal = Number(blue[f]);\n      const rVal = Number(red[f]);\n      if (Number.isFinite(bVal) && Number.isFinite(rVal)) {\n        // exclude obvious total duplication fields to reduce noise\n        if (/^total/i.test(f)) continue;\n        factors.push({ name: f, blue: bVal, red: rVal, diff: bVal - rVal });\n      }\n    }\n    // Rank by absolute diff (importance) ignoring fields with zero diff\n    factors.sort((a,b) => Math.abs(b.diff) - Math.abs(a.diff));\n    // Keep top 8 raw, then assign impactRank to top 3 for summarization\n    factors.slice(0,3).forEach((f,i)=> f.impactRank = i+1);\n  }\n\n  const margin = (blueScore != null && redScore != null) ? Math.abs((blueScore as number) - (redScore as number)) : null;\n  const marginClass = margin != null ? classifyMargin(margin) : 'pending';\n  const verb = winner ? pickVerb(marginClass) : 'ties';\n  const winnerPhrase = winner ? (winner === 'blue' ? `Blue alliance ${verb} Red` : `Red alliance ${verb} Blue`) : 'Match tied';\n\n  // Determine potential decisive factor keywords\n  const factorHints: string[] = [];\n  const findField = (names: string[]) => factors.find(f => names.includes(f.name));\n  const autoF = findField(['autoPoints','autoScore','auto']);\n  const endF = findField(['endGamePoints','endgamePoints','endGameScore']);\n  const foulF = findField(['foulPoints','foulScore']);\n  if (foulF && Math.abs(foulF.diff) > 0 && margin && Math.abs(foulF.diff) >= margin * 0.5) factorHints.push('penalties');\n  if (autoF && margin && Math.abs(autoF.diff) >= margin * 0.35) factorHints.push('auto performance');\n  if (endF && margin && Math.abs(endF.diff) >= margin * 0.35) factorHints.push('endgame execution');\n\n  const fallback = (blueScore != null && redScore != null)\n    ? `${winnerPhrase}: ${blueScore} - ${redScore}${factorHints.length?` (factor: ${factorHints[0]})`:''}`\n    : 'Upcoming match';\n\n  const structured = {\n    meta: { key, round, winner, margin, marginClass },\n    alliances: { blue: { teams: blueTeams, score: blueScore }, red: { teams: redTeams, score: redScore } },\n    topFactors: factors.slice(0,8),\n    decisiveHints: factorHints\n  };\n\n  const prompt = `${base}\\nSTRUCTURED_JSON=${JSON.stringify(structured)}`;\n  return { prompt, fallback, factors };\n}\n\nconst ai = new Hono();\n\nai.post('/generate', async c => {\n  try {\n    const env = (c.env || {}) as EnvBindings; // typed view\n    \n    let body: MatchSummaryRequest;\n    try {\n      body = await c.req.json();\n    } catch (parseErr) {\n      console.error('JSON parse error:', parseErr);\n      return c.json({ error: 'Invalid JSON in request body', details: (parseErr as Error).message }, 400);\n    }\n    \n    const { match_key, match } = body;\n\n    if (!match_key && !match) {\n      return c.json({ error: 'match_key or match object required' }, 400);\n    }\n\n    // If full match object not supplied, fetch from TBA (server-side) for better caching\n    let matchData = match;\n    if (!matchData && match_key) {\n      const resp = await fetch(`https://www.thebluealliance.com/api/v3/match/${match_key}`, {\n        headers: { 'X-TBA-Auth-Key': env.TBA_API_KEY || 'gdgkcwgh93dBGQjVXlh0ndD4GIkiQlzzbaRu9NUHGfk72tPVG2a69LF2BoYB1QNf' }\n      });\n      if (!resp.ok) {\n        return c.json({ error: 'Failed to fetch match data' }, 502);\n      }\n      matchData = await resp.json();\n    }\n\n  const { prompt, fallback, factors } = buildStats(matchData);\n\n    // If no AI key configured, return deterministic fallback so UI still shows something\n  const openRouterKey = env.OPENROUTER_API_KEY; // Preferred if user wants OpenRouter\n  const apiKey = openRouterKey || env.OPENAI_API_KEY || env.AZURE_OPENAI_KEY || env.GROQ_API_KEY;\n    if (!apiKey) {\n  return c.json({ summary: fallback, model: 'fallback', cached: false, fallbackUsed: true, factors: [] });\n    }\n\n    // Simple provider selection (OpenAI compatible). Adjust base URL if Azure.\n  // Provider precedence: openrouter -> azure -> openai (direct) -> groq\n  const provider = openRouterKey ? 'openrouter' : (env.AZURE_OPENAI_DEPLOYMENT ? 'azure' : (env.OPENAI_API_KEY ? 'openai' : (env.GROQ_API_KEY ? 'groq' : 'fallback')));\n  let summaryText = fallback;\n  let usedAI = false;\n\n    try {\n      if (provider === 'openrouter') {\n  const model = env.OPENROUTER_MODEL || 'z-ai/glm-4.5-air:free';\n        const resp = await fetch('https://openrouter.ai/api/v1/chat/completions', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${openRouterKey}`,\n            'HTTP-Referer': env.OPENROUTER_SITE_URL || 'https://www.frc7790.com',\n            'X-Title': env.OPENROUTER_APP_NAME || 'FRC 7790'\n          },\n          body: JSON.stringify({\n            model,\n            messages: [\n              { role: 'system', content: 'You are an expert FIRST Robotics Competition commentator. Produce a concise 1-2 sentence recap. FIRST sentence: outcome & margin (if decisive). SECOND sentence (optional): key deciding factors using provided stats only (auto/endgame/penalties/objective bonuses). Do NOT just repeat the raw score at the start; avoid speculation.' },\n              { role: 'user', content: prompt }\n            ],\n            max_tokens: 160,\n            temperature: 0.5\n          })\n        });\n        if (resp.ok) {\n          const data: any = await resp.json();\n          const candidate = data.choices?.[0]?.message?.content?.trim();\n          if (candidate && candidate.length > 0) {\n            summaryText = candidate;\n            usedAI = true;\n          }\n        }\n      } else if (provider === 'azure') {\n  const azureEndpoint = env.AZURE_OPENAI_ENDPOINT; // e.g., https://your-resource-name.openai.azure.com\n  const deployment = env.AZURE_OPENAI_DEPLOYMENT;\n        const resp = await fetch(`${azureEndpoint}/openai/deployments/${deployment}/chat/completions?api-version=2024-02-15-preview`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'api-key': apiKey\n          },\n          body: JSON.stringify({\n            messages: [\n              { role: 'system', content: 'You are an expert FIRST Robotics Competition commentator. Produce a concise 1-2 sentence recap. FIRST sentence: outcome & margin (if decisive). SECOND sentence (optional): key deciding factors using provided stats only (auto/endgame/penalties/objective bonuses). Do NOT just repeat the raw score at the start; avoid speculation.' },\n              { role: 'user', content: prompt }\n            ],\n            max_tokens: 160,\n            temperature: 0.5\n          })\n        });\n        if (resp.ok) {\n          const data: any = await resp.json();\n          const candidate = data.choices?.[0]?.message?.content?.trim();\n          if (candidate && candidate.length > 0) {\n            summaryText = candidate; usedAI = true;\n          }\n        }\n      } else if (provider === 'openai') {\n        // OpenAI or other compat endpoint\n  const baseUrl = env.OPENAI_BASE_URL || 'https://api.openai.com/v1';\n        const resp = await fetch(`${baseUrl}/chat/completions`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${apiKey}`\n          },\n          body: JSON.stringify({\n            model: env.OPENAI_MODEL || 'gpt-4o-mini',\n            messages: [\n              { role: 'system', content: 'You are an expert FIRST Robotics Competition commentator. Produce a concise 1-2 sentence recap. FIRST sentence: outcome & margin (if decisive). SECOND sentence (optional): key deciding factors using provided stats only (auto/endgame/penalties/objective bonuses). Do NOT just repeat the raw score at the start; avoid speculation.' },\n              { role: 'user', content: prompt }\n            ],\n            max_tokens: 160,\n            temperature: 0.5\n          })\n        });\n        if (resp.ok) {\n          const data: any = await resp.json();\n          const candidate = data.choices?.[0]?.message?.content?.trim();\n          if (candidate && candidate.length > 0) { summaryText = candidate; usedAI = true; }\n        }\n      } else if (provider === 'groq') {\n        const resp = await fetch('https://api.groq.com/openai/v1/chat/completions', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${apiKey}`\n          },\n          body: JSON.stringify({\n            model: env.GROQ_MODEL || 'llama-3.1-70b-versatile',\n            messages: [\n              { role: 'system', content: 'You are an expert FIRST Robotics Competition commentator. Produce a concise 1-2 sentence recap. FIRST sentence: outcome & margin (if decisive). SECOND sentence (optional): key deciding factors using provided stats only (auto/endgame/penalties/objective bonuses). Do NOT just repeat the raw score at the start; avoid speculation.' },\n              { role: 'user', content: prompt }\n            ],\n            max_tokens: 160,\n            temperature: 0.5\n          })\n        });\n        if (resp.ok) {\n          const data: any = await resp.json();\n          const candidate = data.choices?.[0]?.message?.content?.trim();\n          if (candidate && candidate.length > 0) { summaryText = candidate; usedAI = true; }\n        }\n      }\n    } catch (err) {\n      console.error('AI generation error', err);\n      // fall back silently\n    }\n\n  const fallbackUsed = !usedAI || summaryText === fallback;\n  return c.json({ summary: summaryText, model: provider, promptUsed: prompt, fallbackUsed, factors });\n  } catch (err) {\n    console.error('Match summary generation error:', err);\n    return c.json({ \n      error: 'Failed to generate match summary', \n      details: (err as Error).message,\n      stack: (err as Error).stack \n    }, 500);\n  }\n});\n\nexport default ai;\n", "import { Hono } from 'hono';\nimport { handle } from 'hono/cloudflare-pages';\nimport { corsMiddleware, errorMiddleware, rateLimitMiddleware } from './middleware';\n\n// Import route modules\nimport register from './auth/register';\nimport login from './auth/login';\nimport adminUsers from './admin/users';\nimport calendar from './calendar';\nimport tasks from './tasks';\nimport profile from './profile';\nimport preferences from './preferences';\n\nimport chat from './chat';\nimport aiMatchSummary from './ai/matchSummary';\n\nconst app = new Hono().basePath('/api');\n\n// Apply global middleware\napp.use('*', corsMiddleware);\napp.use('*', errorMiddleware);\napp.use('*', rateLimitMiddleware);\n\n// Mount route modules\napp.route('/auth/register', register);\napp.route('/auth/login', login);\napp.route('/admin/users', adminUsers);\napp.route('/calendar', calendar);\napp.route('/tasks', tasks);\napp.route('/profile', profile);\napp.route('/preferences', preferences);\napp.route('/chat', chat);\napp.route('/ai/match-summary', aiMatchSummary);\n\n\n// Health check endpoint\napp.get('/health', (c) => c.json({ \n  status: 'ok', \n  timestamp: new Date().toISOString(),\n  version: '1.0.0'\n}));\n\n// Root endpoint\napp.get('/', (c) => c.json({ \n  message: 'FRC 7790 Baywatch Robotics API',\n  version: '1.0.0',\n  endpoints: [\n    '/api/health',\n    '/api/auth/login',\n    '/api/auth/register', \n    '/api/profile',\n    '/api/calendar',\n    '/api/tasks',\n    '/api/preferences/teams',\n    '/api/admin/users'\n  ]\n}));\n\nexport const onRequest = handle(app);\n", "import { onRequest as __api___path___ts_onRequest } from \"/Users/gmoceri/Documents/FRC7790.com/functions/api/[[path]].ts\"\n\nexport const routes = [\n    {\n      routePath: \"/api/:path*\",\n      mountPath: \"/api\",\n      method: \"\",\n      middlewares: [],\n      modules: [__api___path___ts_onRequest],\n    },\n  ]", "/**\n * Tokenizer results.\n */\ninterface LexToken {\n  type:\n    | \"OPEN\"\n    | \"CLOSE\"\n    | \"PATTERN\"\n    | \"NAME\"\n    | \"CHAR\"\n    | \"ESCAPED_CHAR\"\n    | \"MODIFIER\"\n    | \"END\";\n  index: number;\n  value: string;\n}\n\n/**\n * Tokenize input string.\n */\nfunction lexer(str: string): LexToken[] {\n  const tokens: LexToken[] = [];\n  let i = 0;\n\n  while (i < str.length) {\n    const char = str[i];\n\n    if (char === \"*\" || char === \"+\" || char === \"?\") {\n      tokens.push({ type: \"MODIFIER\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"\\\\\") {\n      tokens.push({ type: \"ESCAPED_CHAR\", index: i++, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"{\") {\n      tokens.push({ type: \"OPEN\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"}\") {\n      tokens.push({ type: \"CLOSE\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \":\") {\n      let name = \"\";\n      let j = i + 1;\n\n      while (j < str.length) {\n        const code = str.charCodeAt(j);\n\n        if (\n          // `0-9`\n          (code >= 48 && code <= 57) ||\n          // `A-Z`\n          (code >= 65 && code <= 90) ||\n          // `a-z`\n          (code >= 97 && code <= 122) ||\n          // `_`\n          code === 95\n        ) {\n          name += str[j++];\n          continue;\n        }\n\n        break;\n      }\n\n      if (!name) throw new TypeError(`Missing parameter name at ${i}`);\n\n      tokens.push({ type: \"NAME\", index: i, value: name });\n      i = j;\n      continue;\n    }\n\n    if (char === \"(\") {\n      let count = 1;\n      let pattern = \"\";\n      let j = i + 1;\n\n      if (str[j] === \"?\") {\n        throw new TypeError(`Pattern cannot start with \"?\" at ${j}`);\n      }\n\n      while (j < str.length) {\n        if (str[j] === \"\\\\\") {\n          pattern += str[j++] + str[j++];\n          continue;\n        }\n\n        if (str[j] === \")\") {\n          count--;\n          if (count === 0) {\n            j++;\n            break;\n          }\n        } else if (str[j] === \"(\") {\n          count++;\n          if (str[j + 1] !== \"?\") {\n            throw new TypeError(`Capturing groups are not allowed at ${j}`);\n          }\n        }\n\n        pattern += str[j++];\n      }\n\n      if (count) throw new TypeError(`Unbalanced pattern at ${i}`);\n      if (!pattern) throw new TypeError(`Missing pattern at ${i}`);\n\n      tokens.push({ type: \"PATTERN\", index: i, value: pattern });\n      i = j;\n      continue;\n    }\n\n    tokens.push({ type: \"CHAR\", index: i, value: str[i++] });\n  }\n\n  tokens.push({ type: \"END\", index: i, value: \"\" });\n\n  return tokens;\n}\n\nexport interface ParseOptions {\n  /**\n   * Set the default delimiter for repeat parameters. (default: `'/'`)\n   */\n  delimiter?: string;\n  /**\n   * List of characters to automatically consider prefixes when parsing.\n   */\n  prefixes?: string;\n}\n\n/**\n * Parse a string for the raw tokens.\n */\nexport function parse(str: string, options: ParseOptions = {}): Token[] {\n  const tokens = lexer(str);\n  const { prefixes = \"./\", delimiter = \"/#?\" } = options;\n  const result: Token[] = [];\n  let key = 0;\n  let i = 0;\n  let path = \"\";\n\n  const tryConsume = (type: LexToken[\"type\"]): string | undefined => {\n    if (i < tokens.length && tokens[i].type === type) return tokens[i++].value;\n  };\n\n  const mustConsume = (type: LexToken[\"type\"]): string => {\n    const value = tryConsume(type);\n    if (value !== undefined) return value;\n    const { type: nextType, index } = tokens[i];\n    throw new TypeError(`Unexpected ${nextType} at ${index}, expected ${type}`);\n  };\n\n  const consumeText = (): string => {\n    let result = \"\";\n    let value: string | undefined;\n    while ((value = tryConsume(\"CHAR\") || tryConsume(\"ESCAPED_CHAR\"))) {\n      result += value;\n    }\n    return result;\n  };\n\n  const isSafe = (value: string): boolean => {\n    for (const char of delimiter) if (value.indexOf(char) > -1) return true;\n    return false;\n  };\n\n  const safePattern = (prefix: string) => {\n    const prev = result[result.length - 1];\n    const prevText = prefix || (prev && typeof prev === \"string\" ? prev : \"\");\n\n    if (prev && !prevText) {\n      throw new TypeError(\n        `Must have text between two parameters, missing text after \"${(prev as Key).name}\"`,\n      );\n    }\n\n    if (!prevText || isSafe(prevText)) return `[^${escapeString(delimiter)}]+?`;\n    return `(?:(?!${escapeString(prevText)})[^${escapeString(delimiter)}])+?`;\n  };\n\n  while (i < tokens.length) {\n    const char = tryConsume(\"CHAR\");\n    const name = tryConsume(\"NAME\");\n    const pattern = tryConsume(\"PATTERN\");\n\n    if (name || pattern) {\n      let prefix = char || \"\";\n\n      if (prefixes.indexOf(prefix) === -1) {\n        path += prefix;\n        prefix = \"\";\n      }\n\n      if (path) {\n        result.push(path);\n        path = \"\";\n      }\n\n      result.push({\n        name: name || key++,\n        prefix,\n        suffix: \"\",\n        pattern: pattern || safePattern(prefix),\n        modifier: tryConsume(\"MODIFIER\") || \"\",\n      });\n      continue;\n    }\n\n    const value = char || tryConsume(\"ESCAPED_CHAR\");\n    if (value) {\n      path += value;\n      continue;\n    }\n\n    if (path) {\n      result.push(path);\n      path = \"\";\n    }\n\n    const open = tryConsume(\"OPEN\");\n    if (open) {\n      const prefix = consumeText();\n      const name = tryConsume(\"NAME\") || \"\";\n      const pattern = tryConsume(\"PATTERN\") || \"\";\n      const suffix = consumeText();\n\n      mustConsume(\"CLOSE\");\n\n      result.push({\n        name: name || (pattern ? key++ : \"\"),\n        pattern: name && !pattern ? safePattern(prefix) : pattern,\n        prefix,\n        suffix,\n        modifier: tryConsume(\"MODIFIER\") || \"\",\n      });\n      continue;\n    }\n\n    mustConsume(\"END\");\n  }\n\n  return result;\n}\n\nexport interface TokensToFunctionOptions {\n  /**\n   * When `true` the regexp will be case sensitive. (default: `false`)\n   */\n  sensitive?: boolean;\n  /**\n   * Function for encoding input strings for output.\n   */\n  encode?: (value: string, token: Key) => string;\n  /**\n   * When `false` the function can produce an invalid (unmatched) path. (default: `true`)\n   */\n  validate?: boolean;\n}\n\n/**\n * Compile a string to a template function for the path.\n */\nexport function compile<P extends object = object>(\n  str: string,\n  options?: ParseOptions & TokensToFunctionOptions,\n) {\n  return tokensToFunction<P>(parse(str, options), options);\n}\n\nexport type PathFunction<P extends object = object> = (data?: P) => string;\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nexport function tokensToFunction<P extends object = object>(\n  tokens: Token[],\n  options: TokensToFunctionOptions = {},\n): PathFunction<P> {\n  const reFlags = flags(options);\n  const { encode = (x: string) => x, validate = true } = options;\n\n  // Compile all the tokens into regexps.\n  const matches = tokens.map((token) => {\n    if (typeof token === \"object\") {\n      return new RegExp(`^(?:${token.pattern})$`, reFlags);\n    }\n  });\n\n  return (data: Record<string, any> | null | undefined) => {\n    let path = \"\";\n\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n\n      if (typeof token === \"string\") {\n        path += token;\n        continue;\n      }\n\n      const value = data ? data[token.name] : undefined;\n      const optional = token.modifier === \"?\" || token.modifier === \"*\";\n      const repeat = token.modifier === \"*\" || token.modifier === \"+\";\n\n      if (Array.isArray(value)) {\n        if (!repeat) {\n          throw new TypeError(\n            `Expected \"${token.name}\" to not repeat, but got an array`,\n          );\n        }\n\n        if (value.length === 0) {\n          if (optional) continue;\n\n          throw new TypeError(`Expected \"${token.name}\" to not be empty`);\n        }\n\n        for (let j = 0; j < value.length; j++) {\n          const segment = encode(value[j], token);\n\n          if (validate && !(matches[i] as RegExp).test(segment)) {\n            throw new TypeError(\n              `Expected all \"${token.name}\" to match \"${token.pattern}\", but got \"${segment}\"`,\n            );\n          }\n\n          path += token.prefix + segment + token.suffix;\n        }\n\n        continue;\n      }\n\n      if (typeof value === \"string\" || typeof value === \"number\") {\n        const segment = encode(String(value), token);\n\n        if (validate && !(matches[i] as RegExp).test(segment)) {\n          throw new TypeError(\n            `Expected \"${token.name}\" to match \"${token.pattern}\", but got \"${segment}\"`,\n          );\n        }\n\n        path += token.prefix + segment + token.suffix;\n        continue;\n      }\n\n      if (optional) continue;\n\n      const typeOfMessage = repeat ? \"an array\" : \"a string\";\n      throw new TypeError(`Expected \"${token.name}\" to be ${typeOfMessage}`);\n    }\n\n    return path;\n  };\n}\n\nexport interface RegexpToFunctionOptions {\n  /**\n   * Function for decoding strings for params.\n   */\n  decode?: (value: string, token: Key) => string;\n}\n\n/**\n * A match result contains data about the path match.\n */\nexport interface MatchResult<P extends object = object> {\n  path: string;\n  index: number;\n  params: P;\n}\n\n/**\n * A match is either `false` (no match) or a match result.\n */\nexport type Match<P extends object = object> = false | MatchResult<P>;\n\n/**\n * The match function takes a string and returns whether it matched the path.\n */\nexport type MatchFunction<P extends object = object> = (\n  path: string,\n) => Match<P>;\n\n/**\n * Create path match function from `path-to-regexp` spec.\n */\nexport function match<P extends object = object>(\n  str: Path,\n  options?: ParseOptions & TokensToRegexpOptions & RegexpToFunctionOptions,\n) {\n  const keys: Key[] = [];\n  const re = pathToRegexp(str, keys, options);\n  return regexpToFunction<P>(re, keys, options);\n}\n\n/**\n * Create a path match function from `path-to-regexp` output.\n */\nexport function regexpToFunction<P extends object = object>(\n  re: RegExp,\n  keys: Key[],\n  options: RegexpToFunctionOptions = {},\n): MatchFunction<P> {\n  const { decode = (x: string) => x } = options;\n\n  return function (pathname: string) {\n    const m = re.exec(pathname);\n    if (!m) return false;\n\n    const { 0: path, index } = m;\n    const params = Object.create(null);\n\n    for (let i = 1; i < m.length; i++) {\n      if (m[i] === undefined) continue;\n\n      const key = keys[i - 1];\n\n      if (key.modifier === \"*\" || key.modifier === \"+\") {\n        params[key.name] = m[i].split(key.prefix + key.suffix).map((value) => {\n          return decode(value, key);\n        });\n      } else {\n        params[key.name] = decode(m[i], key);\n      }\n    }\n\n    return { path, index, params };\n  };\n}\n\n/**\n * Escape a regular expression string.\n */\nfunction escapeString(str: string) {\n  return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, \"\\\\$1\");\n}\n\n/**\n * Get the flags for a regexp from the options.\n */\nfunction flags(options?: { sensitive?: boolean }) {\n  return options && options.sensitive ? \"\" : \"i\";\n}\n\n/**\n * Metadata about a key.\n */\nexport interface Key {\n  name: string | number;\n  prefix: string;\n  suffix: string;\n  pattern: string;\n  modifier: string;\n}\n\n/**\n * A token is a string (nothing special) or key metadata (capture group).\n */\nexport type Token = string | Key;\n\n/**\n * Pull out keys from a regexp.\n */\nfunction regexpToRegexp(path: RegExp, keys?: Key[]): RegExp {\n  if (!keys) return path;\n\n  const groupsRegex = /\\((?:\\?<(.*?)>)?(?!\\?)/g;\n\n  let index = 0;\n  let execResult = groupsRegex.exec(path.source);\n  while (execResult) {\n    keys.push({\n      // Use parenthesized substring match if available, index otherwise\n      name: execResult[1] || index++,\n      prefix: \"\",\n      suffix: \"\",\n      modifier: \"\",\n      pattern: \"\",\n    });\n    execResult = groupsRegex.exec(path.source);\n  }\n\n  return path;\n}\n\n/**\n * Transform an array into a regexp.\n */\nfunction arrayToRegexp(\n  paths: Array<string | RegExp>,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions,\n): RegExp {\n  const parts = paths.map((path) => pathToRegexp(path, keys, options).source);\n  return new RegExp(`(?:${parts.join(\"|\")})`, flags(options));\n}\n\n/**\n * Create a path regexp from string input.\n */\nfunction stringToRegexp(\n  path: string,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions,\n) {\n  return tokensToRegexp(parse(path, options), keys, options);\n}\n\nexport interface TokensToRegexpOptions {\n  /**\n   * When `true` the regexp will be case sensitive. (default: `false`)\n   */\n  sensitive?: boolean;\n  /**\n   * When `true` the regexp won't allow an optional trailing delimiter to match. (default: `false`)\n   */\n  strict?: boolean;\n  /**\n   * When `true` the regexp will match to the end of the string. (default: `true`)\n   */\n  end?: boolean;\n  /**\n   * When `true` the regexp will match from the beginning of the string. (default: `true`)\n   */\n  start?: boolean;\n  /**\n   * Sets the final character for non-ending optimistic matches. (default: `/`)\n   */\n  delimiter?: string;\n  /**\n   * List of characters that can also be \"end\" characters.\n   */\n  endsWith?: string;\n  /**\n   * Encode path tokens for use in the `RegExp`.\n   */\n  encode?: (value: string) => string;\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n */\nexport function tokensToRegexp(\n  tokens: Token[],\n  keys?: Key[],\n  options: TokensToRegexpOptions = {},\n) {\n  const {\n    strict = false,\n    start = true,\n    end = true,\n    encode = (x: string) => x,\n    delimiter = \"/#?\",\n    endsWith = \"\",\n  } = options;\n  const endsWithRe = `[${escapeString(endsWith)}]|$`;\n  const delimiterRe = `[${escapeString(delimiter)}]`;\n  let route = start ? \"^\" : \"\";\n\n  // Iterate over the tokens and create our regexp string.\n  for (const token of tokens) {\n    if (typeof token === \"string\") {\n      route += escapeString(encode(token));\n    } else {\n      const prefix = escapeString(encode(token.prefix));\n      const suffix = escapeString(encode(token.suffix));\n\n      if (token.pattern) {\n        if (keys) keys.push(token);\n\n        if (prefix || suffix) {\n          if (token.modifier === \"+\" || token.modifier === \"*\") {\n            const mod = token.modifier === \"*\" ? \"?\" : \"\";\n            route += `(?:${prefix}((?:${token.pattern})(?:${suffix}${prefix}(?:${token.pattern}))*)${suffix})${mod}`;\n          } else {\n            route += `(?:${prefix}(${token.pattern})${suffix})${token.modifier}`;\n          }\n        } else {\n          if (token.modifier === \"+\" || token.modifier === \"*\") {\n            throw new TypeError(\n              `Can not repeat \"${token.name}\" without a prefix and suffix`,\n            );\n          }\n\n          route += `(${token.pattern})${token.modifier}`;\n        }\n      } else {\n        route += `(?:${prefix}${suffix})${token.modifier}`;\n      }\n    }\n  }\n\n  if (end) {\n    if (!strict) route += `${delimiterRe}?`;\n\n    route += !options.endsWith ? \"$\" : `(?=${endsWithRe})`;\n  } else {\n    const endToken = tokens[tokens.length - 1];\n    const isEndDelimited =\n      typeof endToken === \"string\"\n        ? delimiterRe.indexOf(endToken[endToken.length - 1]) > -1\n        : endToken === undefined;\n\n    if (!strict) {\n      route += `(?:${delimiterRe}(?=${endsWithRe}))?`;\n    }\n\n    if (!isEndDelimited) {\n      route += `(?=${delimiterRe}|${endsWithRe})`;\n    }\n  }\n\n  return new RegExp(route, flags(options));\n}\n\n/**\n * Supported `path-to-regexp` input types.\n */\nexport type Path = string | RegExp | Array<string | RegExp>;\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n */\nexport function pathToRegexp(\n  path: Path,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions,\n) {\n  if (path instanceof RegExp) return regexpToRegexp(path, keys);\n  if (Array.isArray(path)) return arrayToRegexp(path, keys, options);\n  return stringToRegexp(path, keys, options);\n}\n", "import { match } from \"path-to-regexp\";\n\n//note: this explicitly does not include the * character, as pages requires this\nconst escapeRegex = /[.+?^${}()|[\\]\\\\]/g;\n\ntype HTTPMethod =\n\t| \"HEAD\"\n\t| \"OPTIONS\"\n\t| \"GET\"\n\t| \"POST\"\n\t| \"PUT\"\n\t| \"PATCH\"\n\t| \"DELETE\";\n\n/* TODO: Grab these from @cloudflare/workers-types instead */\ntype Params<P extends string = string> = Record<P, string | string[]>;\n\ntype EventContext<Env, P extends string, Data> = {\n\trequest: Request;\n\tfunctionPath: string;\n\twaitUntil: (promise: Promise<unknown>) => void;\n\tpassThroughOnException: () => void;\n\tnext: (input?: Request | string, init?: RequestInit) => Promise<Response>;\n\tenv: Env & { ASSETS: { fetch: typeof fetch } };\n\tparams: Params<P>;\n\tdata: Data;\n};\n\ndeclare type PagesFunction<\n\tEnv = unknown,\n\tP extends string = string,\n\tData extends Record<string, unknown> = Record<string, unknown>,\n> = (context: EventContext<Env, P, Data>) => Response | Promise<Response>;\n/* end @cloudflare/workers-types */\n\ntype RouteHandler = {\n\troutePath: string;\n\tmountPath: string;\n\tmethod?: HTTPMethod;\n\tmodules: PagesFunction[];\n\tmiddlewares: PagesFunction[];\n};\n\n// inject `routes` via ESBuild\ndeclare const routes: RouteHandler[];\n// define `__FALLBACK_SERVICE__` via ESBuild\ndeclare const __FALLBACK_SERVICE__: string;\n\n// expect an ASSETS fetcher binding pointing to the asset-server stage\ntype FetchEnv = {\n\t[name: string]: { fetch: typeof fetch };\n\tASSETS: { fetch: typeof fetch };\n};\n\ntype WorkerContext = {\n\twaitUntil: (promise: Promise<unknown>) => void;\n\tpassThroughOnException: () => void;\n};\n\nfunction* executeRequest(request: Request) {\n\tconst requestPath = new URL(request.url).pathname;\n\n\t// First, iterate through the routes (backwards) and execute \"middlewares\" on partial route matches\n\tfor (const route of [...routes].reverse()) {\n\t\tif (route.method && route.method !== request.method) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// replaces with \"\\\\$&\", this prepends a backslash to the matched string, e.g. \"[\" becomes \"\\[\"\n\t\tconst routeMatcher = match(route.routePath.replace(escapeRegex, \"\\\\$&\"), {\n\t\t\tend: false,\n\t\t});\n\t\tconst mountMatcher = match(route.mountPath.replace(escapeRegex, \"\\\\$&\"), {\n\t\t\tend: false,\n\t\t});\n\t\tconst matchResult = routeMatcher(requestPath);\n\t\tconst mountMatchResult = mountMatcher(requestPath);\n\t\tif (matchResult && mountMatchResult) {\n\t\t\tfor (const handler of route.middlewares.flat()) {\n\t\t\t\tyield {\n\t\t\t\t\thandler,\n\t\t\t\t\tparams: matchResult.params as Params,\n\t\t\t\t\tpath: mountMatchResult.path,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n\n\t// Then look for the first exact route match and execute its \"modules\"\n\tfor (const route of routes) {\n\t\tif (route.method && route.method !== request.method) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst routeMatcher = match(route.routePath.replace(escapeRegex, \"\\\\$&\"), {\n\t\t\tend: true,\n\t\t});\n\t\tconst mountMatcher = match(route.mountPath.replace(escapeRegex, \"\\\\$&\"), {\n\t\t\tend: false,\n\t\t});\n\t\tconst matchResult = routeMatcher(requestPath);\n\t\tconst mountMatchResult = mountMatcher(requestPath);\n\t\tif (matchResult && mountMatchResult && route.modules.length) {\n\t\t\tfor (const handler of route.modules.flat()) {\n\t\t\t\tyield {\n\t\t\t\t\thandler,\n\t\t\t\t\tparams: matchResult.params as Params,\n\t\t\t\t\tpath: matchResult.path,\n\t\t\t\t};\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\nexport default {\n\tasync fetch(\n\t\toriginalRequest: Request,\n\t\tenv: FetchEnv,\n\t\tworkerContext: WorkerContext\n\t) {\n\t\tlet request = originalRequest;\n\t\tconst handlerIterator = executeRequest(request);\n\t\tlet data = {}; // arbitrary data the user can set between functions\n\t\tlet isFailOpen = false;\n\n\t\tconst next = async (input?: RequestInfo, init?: RequestInit) => {\n\t\t\tif (input !== undefined) {\n\t\t\t\tlet url = input;\n\t\t\t\tif (typeof input === \"string\") {\n\t\t\t\t\turl = new URL(input, request.url).toString();\n\t\t\t\t}\n\t\t\t\trequest = new Request(url, init);\n\t\t\t}\n\n\t\t\tconst result = handlerIterator.next();\n\t\t\t// Note we can't use `!result.done` because this doesn't narrow to the correct type\n\t\t\tif (result.done === false) {\n\t\t\t\tconst { handler, params, path } = result.value;\n\t\t\t\tconst context = {\n\t\t\t\t\trequest: new Request(request.clone()),\n\t\t\t\t\tfunctionPath: path,\n\t\t\t\t\tnext,\n\t\t\t\t\tparams,\n\t\t\t\t\tget data() {\n\t\t\t\t\t\treturn data;\n\t\t\t\t\t},\n\t\t\t\t\tset data(value) {\n\t\t\t\t\t\tif (typeof value !== \"object\" || value === null) {\n\t\t\t\t\t\t\tthrow new Error(\"context.data must be an object\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// user has overriden context.data, so we need to merge it with the existing data\n\t\t\t\t\t\tdata = value;\n\t\t\t\t\t},\n\t\t\t\t\tenv,\n\t\t\t\t\twaitUntil: workerContext.waitUntil.bind(workerContext),\n\t\t\t\t\tpassThroughOnException: () => {\n\t\t\t\t\t\tisFailOpen = true;\n\t\t\t\t\t},\n\t\t\t\t};\n\n\t\t\t\tconst response = await handler(context);\n\n\t\t\t\tif (!(response instanceof Response)) {\n\t\t\t\t\tthrow new Error(\"Your Pages function should return a Response\");\n\t\t\t\t}\n\n\t\t\t\treturn cloneResponse(response);\n\t\t\t} else if (__FALLBACK_SERVICE__) {\n\t\t\t\t// There are no more handlers so finish with the fallback service (`env.ASSETS.fetch` in Pages' case)\n\t\t\t\tconst response = await env[__FALLBACK_SERVICE__].fetch(request);\n\t\t\t\treturn cloneResponse(response);\n\t\t\t} else {\n\t\t\t\t// There was not fallback service so actually make the request to the origin.\n\t\t\t\tconst response = await fetch(request);\n\t\t\t\treturn cloneResponse(response);\n\t\t\t}\n\t\t};\n\n\t\ttry {\n\t\t\treturn await next();\n\t\t} catch (error) {\n\t\t\tif (isFailOpen) {\n\t\t\t\tconst response = await env[__FALLBACK_SERVICE__].fetch(request);\n\t\t\t\treturn cloneResponse(response);\n\t\t\t}\n\n\t\t\tthrow error;\n\t\t}\n\t},\n};\n\n// This makes a Response mutable\nconst cloneResponse = (response: Response) =>\n\t// https://fetch.spec.whatwg.org/#null-body-status\n\tnew Response(\n\t\t[101, 204, 205, 304].includes(response.status) ? null : response.body,\n\t\tresponse\n\t);\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Users/gmoceri/Documents/FRC7790.com/node_modules/wrangler/templates/pages-template-worker.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/Users/gmoceri/Documents/FRC7790.com/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/Users/gmoceri/Documents/FRC7790.com/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/Users/gmoceri/Documents/FRC7790.com/node_modules/wrangler/templates/pages-template-worker.ts\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/Users/gmoceri/Documents/FRC7790.com/.wrangler/tmp/bundle-XoVhQD/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/Users/gmoceri/Documents/FRC7790.com/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/Users/gmoceri/Documents/FRC7790.com/.wrangler/tmp/bundle-XoVhQD/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/Users/gmoceri/Documents/FRC7790.com/.wrangler/tmp/bundle-XoVhQD/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": ["match", "raw", "app", "routes", "match", "routes", "Node", "Node", "Hono", "app", "verifyWithJwks", "verify", "decode", "sign", "verify", "Hono", "verify", "sign", "Hono", "sign", "verify", "hashPassword", "Hono", "results", "Hono", "raw", "jwt", "Hono", "hashPassword", "verifyPassword", "Hono", "Hono", "c", "Hono", "match", "Hono", "Hono", "parse", "value", "_a", "result", "char", "prefix", "decode", "i", "parse"]
}
